com.badlogic.gdx.AbstractGraphics:
    public float getBackBufferScale()
    public float getDensity()
    public float getRawDeltaTime()
com.badlogic.gdx.AbstractInput:
    public boolean isCatchMenuKey()
    public boolean isKeyJustPressed(int)
    public void setCatchBackKey(boolean)
    public void setCatchMenuKey(boolean)
com.badlogic.gdx.Application:
    public static final int LOG_DEBUG
    public static final int LOG_ERROR
    public static final int LOG_INFO
    public static final int LOG_NONE
    public abstract void debug(java.lang.String,java.lang.String)
    public abstract void debug(java.lang.String,java.lang.String,java.lang.Throwable)
    public abstract com.badlogic.gdx.ApplicationLogger getApplicationLogger()
    public abstract com.badlogic.gdx.Audio getAudio()
    public abstract com.badlogic.gdx.Files getFiles()
    public abstract com.badlogic.gdx.Input getInput()
    public abstract long getJavaHeap()
    public abstract int getLogLevel()
    public abstract long getNativeHeap()
    public abstract com.badlogic.gdx.Net getNet()
    public abstract void setApplicationLogger(com.badlogic.gdx.ApplicationLogger)
    public abstract void setLogLevel(int)
com.badlogic.gdx.ApplicationAdapter
com.badlogic.gdx.ApplicationLogger:
    public abstract void debug(java.lang.String,java.lang.String)
    public abstract void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.Audio:
    public abstract java.lang.String[] getAvailableOutputDevices()
    public abstract com.badlogic.gdx.audio.AudioDevice newAudioDevice(int,boolean)
    public abstract com.badlogic.gdx.audio.AudioRecorder newAudioRecorder(int,boolean)
    public abstract boolean switchOutputDevice(java.lang.String)
com.badlogic.gdx.Files:
    public abstract boolean isExternalStorageAvailable()
    public abstract boolean isLocalStorageAvailable()
com.badlogic.gdx.Game
com.badlogic.gdx.Gdx:
    public static com.badlogic.gdx.graphics.GL31 gl31
    public static com.badlogic.gdx.graphics.GL32 gl32
    public void <init>()
com.badlogic.gdx.Graphics$GraphicsType
com.badlogic.gdx.Graphics$Monitor
com.badlogic.gdx.Graphics:
    public abstract float getBackBufferScale()
    public abstract com.badlogic.gdx.Graphics$BufferFormat getBufferFormat()
    public abstract com.badlogic.gdx.Graphics$DisplayMode getDisplayMode(com.badlogic.gdx.Graphics$Monitor)
    public abstract com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes()
    public abstract com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes(com.badlogic.gdx.Graphics$Monitor)
    public abstract long getFrameId()
    public abstract int getFramesPerSecond()
    public abstract com.badlogic.gdx.graphics.GL20 getGL20()
    public abstract com.badlogic.gdx.graphics.GL30 getGL30()
    public abstract com.badlogic.gdx.graphics.GL31 getGL31()
    public abstract com.badlogic.gdx.graphics.GL32 getGL32()
    public abstract com.badlogic.gdx.Graphics$Monitor getMonitor()
    public abstract com.badlogic.gdx.Graphics$Monitor[] getMonitors()
    public abstract float getPpcX()
    public abstract float getPpcY()
    public abstract float getPpiX()
    public abstract float getPpiY()
    public abstract com.badlogic.gdx.Graphics$Monitor getPrimaryMonitor()
    public abstract float getRawDeltaTime()
    public abstract com.badlogic.gdx.Graphics$GraphicsType getType()
    public abstract boolean isContinuousRendering()
    public abstract boolean isFullscreen()
    public abstract boolean isGL31Available()
    public abstract boolean isGL32Available()
    public abstract void setContinuousRendering(boolean)
    public abstract void setForegroundFPS(int)
    public abstract boolean setFullscreenMode(com.badlogic.gdx.Graphics$DisplayMode)
    public abstract void setGL20(com.badlogic.gdx.graphics.GL20)
    public abstract void setGL30(com.badlogic.gdx.graphics.GL30)
    public abstract void setGL31(com.badlogic.gdx.graphics.GL31)
    public abstract void setGL32(com.badlogic.gdx.graphics.GL32)
    public abstract void setResizable(boolean)
    public abstract void setSystemCursor(com.badlogic.gdx.graphics.Cursor$SystemCursor)
    public abstract void setTitle(java.lang.String)
    public abstract void setUndecorated(boolean)
    public abstract void setVSync(boolean)
    public abstract boolean setWindowedMode(int,int)
    public abstract boolean supportsDisplayModeChange()
com.badlogic.gdx.Input$Buttons
com.badlogic.gdx.Input$Keys:
    public static final int A
    public static final int ALT_LEFT
    public static final int ALT_RIGHT
    public static final int ANY_KEY
    public static final int APOSTROPHE
    public static final int AT
    public static final int B
    public static final int BACK
    public static final int BACKSLASH
    public static final int BACKSPACE
    public static final int BUTTON_A
    public static final int BUTTON_B
    public static final int BUTTON_C
    public static final int BUTTON_CIRCLE
    public static final int BUTTON_L1
    public static final int BUTTON_L2
    public static final int BUTTON_MODE
    public static final int BUTTON_R1
    public static final int BUTTON_R2
    public static final int BUTTON_SELECT
    public static final int BUTTON_START
    public static final int BUTTON_THUMBL
    public static final int BUTTON_THUMBR
    public static final int BUTTON_X
    public static final int BUTTON_Y
    public static final int BUTTON_Z
    public static final int C
    public static final int CALL
    public static final int CAMERA
    public static final int CAPS_LOCK
    public static final int CENTER
    public static final int CLEAR
    public static final int COLON
    public static final int COMMA
    public static final int CONTROL_LEFT
    public static final int CONTROL_RIGHT
    public static final int D
    public static final int DEL
    public static final int DOWN
    public static final int DPAD_CENTER
    public static final int DPAD_DOWN
    public static final int DPAD_LEFT
    public static final int DPAD_RIGHT
    public static final int DPAD_UP
    public static final int E
    public static final int END
    public static final int ENDCALL
    public static final int ENTER
    public static final int ENVELOPE
    public static final int EQUALS
    public static final int ESCAPE
    public static final int EXPLORER
    public static final int F
    public static final int F1
    public static final int F10
    public static final int F11
    public static final int F12
    public static final int F13
    public static final int F14
    public static final int F15
    public static final int F16
    public static final int F17
    public static final int F18
    public static final int F19
    public static final int F2
    public static final int F20
    public static final int F21
    public static final int F22
    public static final int F23
    public static final int F24
    public static final int F3
    public static final int F4
    public static final int F5
    public static final int F6
    public static final int F7
    public static final int F8
    public static final int F9
    public static final int FOCUS
    public static final int FORWARD_DEL
    public static final int G
    public static final int GRAVE
    public static final int H
    public static final int HEADSETHOOK
    public static final int HOME
    public static final int I
    public static final int INSERT
    public static final int J
    public static final int K
    public static final int L
    public static final int LEFT
    public static final int LEFT_BRACKET
    public static final int M
    public static final int MAX_KEYCODE
    public static final int MEDIA_FAST_FORWARD
    public static final int MEDIA_NEXT
    public static final int MEDIA_PLAY_PAUSE
    public static final int MEDIA_PREVIOUS
    public static final int MEDIA_REWIND
    public static final int MEDIA_STOP
    public static final int MENU
    public static final int META_ALT_LEFT_ON
    public static final int META_ALT_ON
    public static final int META_ALT_RIGHT_ON
    public static final int META_SHIFT_LEFT_ON
    public static final int META_SHIFT_ON
    public static final int META_SHIFT_RIGHT_ON
    public static final int META_SYM_ON
    public static final int MINUS
    public static final int MUTE
    public static final int N
    public static final int NOTIFICATION
    public static final int NUM
    public static final int NUMPAD_0
    public static final int NUMPAD_1
    public static final int NUMPAD_2
    public static final int NUMPAD_3
    public static final int NUMPAD_4
    public static final int NUMPAD_5
    public static final int NUMPAD_6
    public static final int NUMPAD_7
    public static final int NUMPAD_8
    public static final int NUMPAD_9
    public static final int NUMPAD_ADD
    public static final int NUMPAD_COMMA
    public static final int NUMPAD_DIVIDE
    public static final int NUMPAD_DOT
    public static final int NUMPAD_ENTER
    public static final int NUMPAD_EQUALS
    public static final int NUMPAD_LEFT_PAREN
    public static final int NUMPAD_MULTIPLY
    public static final int NUMPAD_RIGHT_PAREN
    public static final int NUMPAD_SUBTRACT
    public static final int NUM_0
    public static final int NUM_1
    public static final int NUM_2
    public static final int NUM_3
    public static final int NUM_4
    public static final int NUM_5
    public static final int NUM_6
    public static final int NUM_7
    public static final int NUM_8
    public static final int NUM_9
    public static final int NUM_LOCK
    public static final int O
    public static final int P
    public static final int PAGE_DOWN
    public static final int PAGE_UP
    public static final int PAUSE
    public static final int PERIOD
    public static final int PICTSYMBOLS
    public static final int PLUS
    public static final int POUND
    public static final int POWER
    public static final int PRINT_SCREEN
    public static final int Q
    public static final int R
    public static final int RIGHT
    public static final int RIGHT_BRACKET
    public static final int S
    public static final int SCROLL_LOCK
    public static final int SEARCH
    public static final int SEMICOLON
    public static final int SHIFT_LEFT
    public static final int SHIFT_RIGHT
    public static final int SLASH
    public static final int SOFT_LEFT
    public static final int SOFT_RIGHT
    public static final int SPACE
    public static final int STAR
    public static final int SWITCH_CHARSET
    public static final int SYM
    public static final int T
    public static final int TAB
    public static final int U
    public static final int UNKNOWN
    public static final int UP
    public static final int V
    public static final int VOLUME_DOWN
    public static final int VOLUME_UP
    public static final int W
    public static final int X
    public static final int Y
    public static final int Z
    private static com.badlogic.gdx.utils.ObjectIntMap keyNames
    public void <init>()
    private static void initializeKeyNames()
    public static int valueOf(java.lang.String)
com.badlogic.gdx.Input$TextInputListener
com.badlogic.gdx.Input$VibrationType
com.badlogic.gdx.Input:
    public abstract float getAccelerometerX()
    public abstract float getAccelerometerY()
    public abstract float getAccelerometerZ()
    public abstract float getAzimuth()
    public abstract long getCurrentEventTime()
    public abstract int getDeltaX(int)
    public abstract int getDeltaY(int)
    public abstract float getGyroscopeX()
    public abstract float getGyroscopeY()
    public abstract float getGyroscopeZ()
    public abstract com.badlogic.gdx.InputProcessor getInputProcessor()
    public abstract int getMaxPointers()
    public abstract com.badlogic.gdx.Input$Orientation getNativeOrientation()
    public abstract float getPitch()
    public abstract float getPressure()
    public abstract float getPressure(int)
    public abstract float getRoll()
    public abstract int getRotation()
    public abstract void getRotationMatrix(float[])
    public abstract void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String)
    public abstract void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String,com.badlogic.gdx.Input$OnscreenKeyboardType)
    public abstract int getX(int)
    public abstract int getY(int)
    public abstract boolean isButtonJustPressed(int)
    public abstract boolean isButtonPressed(int)
    public abstract boolean isCatchKey(int)
    public abstract boolean isCatchMenuKey()
    public abstract boolean isCursorCatched()
    public abstract boolean isKeyJustPressed(int)
    public abstract boolean isTouched()
    public abstract boolean isTouched(int)
    public abstract boolean justTouched()
    public abstract void setCatchBackKey(boolean)
    public abstract void setCatchMenuKey(boolean)
    public abstract void setOnscreenKeyboardVisible(boolean,com.badlogic.gdx.Input$OnscreenKeyboardType)
    public abstract void vibrate(int,int,boolean)
    public abstract void vibrate(int,boolean)
    public abstract void vibrate(com.badlogic.gdx.Input$VibrationType)
com.badlogic.gdx.InputAdapter:
    public boolean keyDown(int)
    public boolean keyUp(int)
    public boolean mouseMoved(int,int)
    public boolean scrolled(float,float)
    public boolean touchCancelled(int,int,int,int)
    public boolean touchDown(int,int,int,int)
    public boolean touchDragged(int,int,int)
    public boolean touchUp(int,int,int,int)
com.badlogic.gdx.InputEventQueue
com.badlogic.gdx.InputMultiplexer:
    public varargs void <init>(com.badlogic.gdx.InputProcessor[])
    public void addProcessor(com.badlogic.gdx.InputProcessor)
    public void clear()
    public com.badlogic.gdx.utils.SnapshotArray getProcessors()
    public void removeProcessor(int)
    public void setProcessors(com.badlogic.gdx.utils.Array)
    public varargs void setProcessors(com.badlogic.gdx.InputProcessor[])
    public int size()
com.badlogic.gdx.Net$HttpMethods
com.badlogic.gdx.Net$HttpRequest:
    public long getContentLength()
    public boolean getIncludeCredentials()
    public void setContent(java.io.InputStream,long)
    public void setContent(java.lang.String)
    public void setFollowRedirects(boolean)
    public void setIncludeCredentials(boolean)
    public void setMethod(java.lang.String)
    public void setTimeOut(int)
com.badlogic.gdx.Net$HttpResponse:
    public abstract java.lang.String getHeader(java.lang.String)
    public abstract java.util.Map getHeaders()
    public abstract byte[] getResult()
    public abstract java.lang.String getResultAsString()
    public abstract com.badlogic.gdx.net.HttpStatus getStatus()
com.badlogic.gdx.Net$HttpResponseListener:
    public abstract void cancelled()
com.badlogic.gdx.Net$Protocol
com.badlogic.gdx.Net:
    public abstract void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
    public abstract com.badlogic.gdx.net.Socket newClientSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints)
    public abstract com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints)
    public abstract com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints)
com.badlogic.gdx.Preferences:
    public abstract void clear()
    public abstract java.util.Map get()
    public abstract boolean getBoolean(java.lang.String)
    public abstract float getFloat(java.lang.String)
    public abstract float getFloat(java.lang.String,float)
    public abstract int getInteger(java.lang.String)
    public abstract long getLong(java.lang.String)
    public abstract java.lang.String getString(java.lang.String)
    public abstract com.badlogic.gdx.Preferences put(java.util.Map)
    public abstract com.badlogic.gdx.Preferences putFloat(java.lang.String,float)
    public abstract void remove(java.lang.String)
com.badlogic.gdx.Screen
com.badlogic.gdx.ScreenAdapter
com.badlogic.gdx.Version
com.badlogic.gdx.assets.AssetDescriptor
com.badlogic.gdx.assets.AssetErrorListener
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback:
    public abstract void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.assets.AssetLoadingTask
com.badlogic.gdx.assets.AssetManager$RefCountedContainer
com.badlogic.gdx.assets.AssetManager:
    final com.badlogic.gdx.utils.ObjectMap assetDependencies
    final com.badlogic.gdx.utils.ObjectMap assetTypes
    final com.badlogic.gdx.utils.ObjectMap assets
    final com.badlogic.gdx.utils.async.AsyncExecutor executor
    final com.badlogic.gdx.utils.ObjectSet injected
    com.badlogic.gdx.assets.AssetErrorListener listener
    final com.badlogic.gdx.utils.Array loadQueue
    int loaded
    final com.badlogic.gdx.utils.ObjectMap loaders
    com.badlogic.gdx.utils.Logger log
    int peakTasks
    final com.badlogic.gdx.assets.loaders.FileHandleResolver resolver
    final com.badlogic.gdx.utils.Array tasks
    int toLoad
    public void <init>()
    public void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver)
    public void <init>(com.badlogic.gdx.assets.loaders.FileHandleResolver,boolean)
    protected void addAsset(java.lang.String,java.lang.Class,java.lang.Object)
    private void addTask(com.badlogic.gdx.assets.AssetDescriptor)
    public void clear()
    public synchronized boolean contains(java.lang.String)
    public synchronized boolean contains(java.lang.String,java.lang.Class)
    public synchronized boolean containsAsset(java.lang.Object)
    public void dispose()
    public java.lang.Object finishLoadingAsset(com.badlogic.gdx.assets.AssetDescriptor)
    public java.lang.Object finishLoadingAsset(java.lang.String)
    public synchronized java.lang.Object get(com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized java.lang.Object get(java.lang.String)
    public synchronized java.lang.Object get(java.lang.String,java.lang.Class)
    public synchronized java.lang.Object get(java.lang.String,java.lang.Class,boolean)
    public synchronized java.lang.Object get(java.lang.String,boolean)
    public synchronized com.badlogic.gdx.utils.Array getAll(java.lang.Class,com.badlogic.gdx.utils.Array)
    public synchronized com.badlogic.gdx.utils.Array getAssetNames()
    public synchronized java.lang.Class getAssetType(java.lang.String)
    public synchronized com.badlogic.gdx.utils.Array getDependencies(java.lang.String)
    public synchronized java.lang.String getDiagnostics()
    public com.badlogic.gdx.assets.loaders.FileHandleResolver getFileHandleResolver()
    public synchronized int getLoadedAssets()
    public com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class)
    public com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class,java.lang.String)
    public com.badlogic.gdx.utils.Logger getLogger()
    public synchronized float getProgress()
    public synchronized int getQueuedAssets()
    private void handleTaskError(java.lang.Throwable)
    private void incrementRefCountedDependencies(java.lang.String)
    synchronized void injectDependencies(java.lang.String,com.badlogic.gdx.utils.Array)
    private synchronized void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized boolean isFinished()
    public synchronized boolean isLoaded(com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized boolean isLoaded(java.lang.String)
    public synchronized boolean isLoaded(java.lang.String,java.lang.Class)
    public synchronized void load(com.badlogic.gdx.assets.AssetDescriptor)
    public synchronized void load(java.lang.String,java.lang.Class)
    private void nextTask()
    public synchronized void setErrorListener(com.badlogic.gdx.assets.AssetErrorListener)
    public synchronized void setLoader(java.lang.Class,com.badlogic.gdx.assets.loaders.AssetLoader)
    public synchronized void setLoader(java.lang.Class,java.lang.String,com.badlogic.gdx.assets.loaders.AssetLoader)
    public void setLogger(com.badlogic.gdx.utils.Logger)
    protected void taskFailed(com.badlogic.gdx.assets.AssetDescriptor,java.lang.RuntimeException)
    public synchronized boolean update()
    public boolean update(int)
    private boolean updateTask()
com.badlogic.gdx.assets.loaders.AssetLoader
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter
com.badlogic.gdx.assets.loaders.BitmapFontLoader
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo
com.badlogic.gdx.assets.loaders.CubemapLoader
com.badlogic.gdx.assets.loaders.FileHandleResolver
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter
com.badlogic.gdx.assets.loaders.I18NBundleLoader
com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters
com.badlogic.gdx.assets.loaders.ModelLoader
com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter
com.badlogic.gdx.assets.loaders.MusicLoader
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter
com.badlogic.gdx.assets.loaders.ParticleEffectLoader
com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter
com.badlogic.gdx.assets.loaders.PixmapLoader
com.badlogic.gdx.assets.loaders.ShaderProgramLoader$ShaderProgramParameter
com.badlogic.gdx.assets.loaders.ShaderProgramLoader
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter
com.badlogic.gdx.assets.loaders.SkinLoader
com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter
com.badlogic.gdx.assets.loaders.SoundLoader
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter
com.badlogic.gdx.assets.loaders.TextureAtlasLoader
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo
com.badlogic.gdx.assets.loaders.TextureLoader
com.badlogic.gdx.assets.loaders.resolvers.AbsoluteFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.ClasspathFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.ExternalFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.LocalFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.PrefixFileHandleResolver
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver
com.badlogic.gdx.audio.AudioDevice
com.badlogic.gdx.audio.AudioRecorder
com.badlogic.gdx.audio.Music:
    public abstract float getPosition()
    public abstract float getVolume()
    public abstract void pause()
    public abstract void setPan(float,float)
    public abstract void setPosition(float)
    public abstract void stop()
com.badlogic.gdx.audio.Sound:
    public abstract long loop()
    public abstract long loop(float)
    public abstract long loop(float,float,float)
    public abstract void pause()
    public abstract void pause(long)
    public abstract long play()
    public abstract long play(float)
    public abstract void resume()
    public abstract void resume(long)
    public abstract void setLooping(long,boolean)
    public abstract void setPan(long,float,float)
    public abstract void setPitch(long,float)
    public abstract void setVolume(long,float)
    public abstract void stop()
    public abstract void stop(long)
com.badlogic.gdx.backends.android.APKExpansionSupport
com.badlogic.gdx.backends.android.AndroidApplication:
    public void addAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener)
    public void debug(java.lang.String,java.lang.String)
    public void debug(java.lang.String,java.lang.String,java.lang.Throwable)
    public synthetic bridge com.badlogic.gdx.Input getInput()
    public long getJavaHeap()
    public int getLogLevel()
    public long getNativeHeap()
    public void initialize(com.badlogic.gdx.ApplicationListener)
    public android.view.View initializeForView(com.badlogic.gdx.ApplicationListener)
    public android.view.View initializeForView(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
    public void removeAndroidEventListener(com.badlogic.gdx.backends.android.AndroidEventListener)
    public void setLogLevel(int)
com.badlogic.gdx.backends.android.AndroidApplicationBase:
    public static final int MINIMUM_SDK
    public abstract com.badlogic.gdx.backends.android.AndroidAudio createAudio(android.content.Context,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
    public abstract com.badlogic.gdx.backends.android.AndroidInput createInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration)
    public abstract void runOnUiThread(java.lang.Runnable)
com.badlogic.gdx.backends.android.AndroidApplicationLogger:
    public void debug(java.lang.String,java.lang.String)
    public void debug(java.lang.String,java.lang.String,java.lang.Throwable)
com.badlogic.gdx.backends.android.AndroidAudioDevice
com.badlogic.gdx.backends.android.AndroidAudioRecorder
com.badlogic.gdx.backends.android.AndroidCursor$1
com.badlogic.gdx.backends.android.AndroidCursor
com.badlogic.gdx.backends.android.AndroidDaydream$1
com.badlogic.gdx.backends.android.AndroidDaydream$2
com.badlogic.gdx.backends.android.AndroidDaydream
com.badlogic.gdx.backends.android.AndroidFileHandle:
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
com.badlogic.gdx.backends.android.AndroidFiles:
    public abstract boolean setAPKExpansion(int,int)
com.badlogic.gdx.backends.android.AndroidFragmentApplication$1
com.badlogic.gdx.backends.android.AndroidFragmentApplication$2
com.badlogic.gdx.backends.android.AndroidFragmentApplication$Callbacks
com.badlogic.gdx.backends.android.AndroidFragmentApplication
com.badlogic.gdx.backends.android.AndroidGL20:
    public void glActiveTexture(int)
    public void glBindAttribLocation(int,int,java.lang.String)
    public void glBlendColor(float,float,float,float)
    public void glBlendEquation(int)
    public void glBlendEquationSeparate(int,int)
    public void glClearColor(float,float,float,float)
    public void glClearDepthf(float)
    public void glClearStencil(int)
    public void glColorMask(boolean,boolean,boolean,boolean)
    public void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
    public void glCopyTexImage2D(int,int,int,int,int,int,int,int)
    public void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
    public void glCullFace(int)
    public void glDeleteBuffers(int,java.nio.IntBuffer)
    public void glDeleteFramebuffers(int,java.nio.IntBuffer)
    public void glDeleteRenderbuffers(int,java.nio.IntBuffer)
    public void glDeleteTextures(int,java.nio.IntBuffer)
    public void glDepthFunc(int)
    public void glDepthRangef(float,float)
    public void glDetachShader(int,int)
    public void glFinish()
    public void glFlush()
    public void glFrontFace(int)
    public void glGenBuffers(int,java.nio.IntBuffer)
    public void glGenFramebuffers(int,java.nio.IntBuffer)
    public void glGenRenderbuffers(int,java.nio.IntBuffer)
    public void glGenTextures(int,java.nio.IntBuffer)
    public void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
    public void glGetBooleanv(int,java.nio.Buffer)
    public void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
    public int glGetError()
    public void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
    public void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
    public void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
    public void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
    public void glGetTexParameteriv(int,int,java.nio.IntBuffer)
    public void glGetUniformfv(int,int,java.nio.FloatBuffer)
    public void glGetUniformiv(int,int,java.nio.IntBuffer)
    public void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
    public void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
    public void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
    public void glHint(int,int)
    public boolean glIsBuffer(int)
    public boolean glIsEnabled(int)
    public boolean glIsFramebuffer(int)
    public boolean glIsProgram(int)
    public boolean glIsRenderbuffer(int)
    public boolean glIsShader(int)
    public boolean glIsTexture(int)
    public void glLineWidth(float)
    public void glPolygonOffset(float,float)
    public void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
    public void glReleaseShaderCompiler()
    public void glSampleCoverage(float,boolean)
    public void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
    public void glStencilFunc(int,int,int)
    public void glStencilFuncSeparate(int,int,int,int)
    public void glStencilMask(int)
    public void glStencilMaskSeparate(int,int)
    public void glStencilOp(int,int,int)
    public void glStencilOpSeparate(int,int,int,int)
    public void glTexParameterfv(int,int,java.nio.FloatBuffer)
    public void glTexParameteriv(int,int,java.nio.IntBuffer)
    public void glUniform1f(int,float)
    public void glUniform1fv(int,int,java.nio.FloatBuffer)
    public void glUniform1fv(int,int,float[],int)
    public void glUniform1iv(int,int,java.nio.IntBuffer)
    public void glUniform1iv(int,int,int[],int)
    public void glUniform2f(int,float,float)
    public void glUniform2fv(int,int,java.nio.FloatBuffer)
    public void glUniform2fv(int,int,float[],int)
    public void glUniform2i(int,int,int)
    public void glUniform2iv(int,int,java.nio.IntBuffer)
    public void glUniform2iv(int,int,int[],int)
    public void glUniform3f(int,float,float,float)
    public void glUniform3fv(int,int,java.nio.FloatBuffer)
    public void glUniform3fv(int,int,float[],int)
    public void glUniform3i(int,int,int,int)
    public void glUniform3iv(int,int,java.nio.IntBuffer)
    public void glUniform3iv(int,int,int[],int)
    public void glUniform4fv(int,int,java.nio.FloatBuffer)
    public void glUniform4fv(int,int,float[],int)
    public void glUniform4i(int,int,int,int,int)
    public void glUniform4iv(int,int,java.nio.IntBuffer)
    public void glUniform4iv(int,int,int[],int)
    public void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix2fv(int,int,boolean,float[],int)
    public void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix3fv(int,int,boolean,float[],int)
    public void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
    public void glValidateProgram(int)
    public void glVertexAttrib1f(int,float)
    public void glVertexAttrib1fv(int,java.nio.FloatBuffer)
    public void glVertexAttrib2f(int,float,float)
    public void glVertexAttrib2fv(int,java.nio.FloatBuffer)
    public void glVertexAttrib3f(int,float,float,float)
    public void glVertexAttrib3fv(int,java.nio.FloatBuffer)
    public void glVertexAttrib4f(int,float,float,float,float)
    public void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL30:
    public void glBeginQuery(int,int)
    public void glBeginTransformFeedback(int)
    public void glBindBufferBase(int,int,int)
    public void glBindBufferRange(int,int,int,int,int)
    public void glBindSampler(int,int)
    public void glBindTransformFeedback(int,int)
    public void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)
    public void glClearBufferfi(int,int,float,int)
    public void glClearBufferfv(int,int,java.nio.FloatBuffer)
    public void glClearBufferiv(int,int,java.nio.IntBuffer)
    public void glClearBufferuiv(int,int,java.nio.IntBuffer)
    public void glCopyBufferSubData(int,int,int,int,int)
    public void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)
    public void glDeleteQueries(int,java.nio.IntBuffer)
    public void glDeleteQueries(int,int[],int)
    public void glDeleteSamplers(int,java.nio.IntBuffer)
    public void glDeleteSamplers(int,int[],int)
    public void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)
    public void glDeleteTransformFeedbacks(int,int[],int)
    public void glDeleteVertexArrays(int,int[],int)
    public void glDrawRangeElements(int,int,int,int,int,int)
    public void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)
    public void glEndQuery(int)
    public void glEndTransformFeedback()
    public void glFlushMappedBufferRange(int,int,int)
    public void glFramebufferTextureLayer(int,int,int,int,int)
    public void glGenQueries(int,java.nio.IntBuffer)
    public void glGenQueries(int,int[],int)
    public void glGenSamplers(int,java.nio.IntBuffer)
    public void glGenSamplers(int,int[],int)
    public void glGenTransformFeedbacks(int,java.nio.IntBuffer)
    public void glGenTransformFeedbacks(int,int[],int)
    public void glGenVertexArrays(int,int[],int)
    public java.lang.String glGetActiveUniformBlockName(int,int)
    public void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)
    public void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)
    public void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)
    public void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)
    public java.nio.Buffer glGetBufferPointerv(int,int)
    public int glGetFragDataLocation(int,java.lang.String)
    public void glGetInteger64v(int,java.nio.LongBuffer)
    public void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)
    public void glGetQueryiv(int,int,java.nio.IntBuffer)
    public void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)
    public java.lang.String glGetStringi(int,int)
    public int glGetUniformBlockIndex(int,java.lang.String)
    public void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)
    public void glGetUniformuiv(int,int,java.nio.IntBuffer)
    public void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)
    public void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)
    public void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)
    public void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)
    public boolean glIsQuery(int)
    public boolean glIsSampler(int)
    public boolean glIsTransformFeedback(int)
    public boolean glIsVertexArray(int)
    public java.nio.Buffer glMapBufferRange(int,int,int,int)
    public void glPauseTransformFeedback()
    public void glProgramParameteri(int,int,int)
    public void glReadBuffer(int)
    public void glRenderbufferStorageMultisample(int,int,int,int,int)
    public void glResumeTransformFeedback()
    public void glSamplerParameterf(int,int,float)
    public void glSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public void glSamplerParameteri(int,int,int)
    public void glSamplerParameteriv(int,int,java.nio.IntBuffer)
    public void glTexImage2D(int,int,int,int,int,int,int,int,int)
    public void glTexImage3D(int,int,int,int,int,int,int,int,int,int)
    public void glTexSubImage2D(int,int,int,int,int,int,int,int,int)
    public void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)
    public void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)
    public void glTransformFeedbackVaryings(int,java.lang.String[],int)
    public void glUniform1uiv(int,int,java.nio.IntBuffer)
    public void glUniform3uiv(int,int,java.nio.IntBuffer)
    public void glUniform4uiv(int,int,java.nio.IntBuffer)
    public void glUniformBlockBinding(int,int,int)
    public void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)
    public void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)
    public boolean glUnmapBuffer(int)
    public void glVertexAttribDivisor(int,int)
    public void glVertexAttribI4i(int,int,int,int,int)
    public void glVertexAttribI4ui(int,int,int,int,int)
    public void glVertexAttribIPointer(int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidMonitor
com.badlogic.gdx.backends.android.AndroidGraphics:
    private static final java.lang.String LOG_TAG
    public com.badlogic.gdx.Graphics$BufferFormat getBufferFormat()
    public com.badlogic.gdx.Graphics$DisplayMode getDisplayMode(com.badlogic.gdx.Graphics$Monitor)
    public com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes()
    public com.badlogic.gdx.Graphics$DisplayMode[] getDisplayModes(com.badlogic.gdx.Graphics$Monitor)
    public long getFrameId()
    public int getFramesPerSecond()
    public com.badlogic.gdx.graphics.GL20 getGL20()
    public com.badlogic.gdx.graphics.GL30 getGL30()
    public com.badlogic.gdx.graphics.GL31 getGL31()
    public com.badlogic.gdx.graphics.GL32 getGL32()
    public com.badlogic.gdx.Graphics$Monitor getMonitor()
    public com.badlogic.gdx.Graphics$Monitor[] getMonitors()
    public float getPpcX()
    public float getPpcY()
    public float getPpiX()
    public float getPpiY()
    public com.badlogic.gdx.Graphics$Monitor getPrimaryMonitor()
    public com.badlogic.gdx.Graphics$GraphicsType getType()
    public boolean isFullscreen()
    public boolean isGL31Available()
    public boolean isGL32Available()
    public void setForegroundFPS(int)
    public boolean setFullscreenMode(com.badlogic.gdx.Graphics$DisplayMode)
    public void setGL20(com.badlogic.gdx.graphics.GL20)
    public void setGL30(com.badlogic.gdx.graphics.GL30)
    public void setGL31(com.badlogic.gdx.graphics.GL31)
    public void setGL32(com.badlogic.gdx.graphics.GL32)
    public void setResizable(boolean)
    public void setSystemCursor(com.badlogic.gdx.graphics.Cursor$SystemCursor)
    public void setTitle(java.lang.String)
    public void setUndecorated(boolean)
    public void setVSync(boolean)
    public boolean setWindowedMode(int,int)
    public boolean supportsDisplayModeChange()
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper
com.badlogic.gdx.backends.android.AndroidHaptics$1
com.badlogic.gdx.backends.android.AndroidHaptics:
    public void vibrate(int,int,boolean)
    public void vibrate(com.badlogic.gdx.Input$VibrationType)
com.badlogic.gdx.backends.android.AndroidInput:
    public abstract void onDreamingStarted()
    public abstract void onDreamingStopped()
com.badlogic.gdx.backends.android.AndroidLiveWallpaper
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$3
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService
com.badlogic.gdx.backends.android.AndroidMouseHandler:
    private void logAction(int)
com.badlogic.gdx.backends.android.AndroidMusic:
    public float getDuration()
    public float getPosition()
    public float getVolume()
    public void setPan(float,float)
    public void setPosition(float)
    public void stop()
com.badlogic.gdx.backends.android.AndroidNet:
    public void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
    public com.badlogic.gdx.net.Socket newClientSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.SocketHints)
    public com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,int,com.badlogic.gdx.net.ServerSocketHints)
    public com.badlogic.gdx.net.ServerSocket newServerSocket(com.badlogic.gdx.Net$Protocol,java.lang.String,int,com.badlogic.gdx.net.ServerSocketHints)
com.badlogic.gdx.backends.android.AndroidPreferences:
    public void clear()
    public java.util.Map get()
    public boolean getBoolean(java.lang.String)
    public float getFloat(java.lang.String)
    public float getFloat(java.lang.String,float)
    public int getInteger(java.lang.String)
    public long getLong(java.lang.String)
    public java.lang.String getString(java.lang.String)
    public com.badlogic.gdx.Preferences put(java.util.Map)
    public com.badlogic.gdx.Preferences putFloat(java.lang.String,float)
    public void remove(java.lang.String)
com.badlogic.gdx.backends.android.AndroidSound:
    public long loop()
    public long loop(float)
    public long loop(float,float,float)
    public void pause()
    public void pause(long)
    public long play()
    public long play(float)
    public void resume()
    public void resume(long)
    public void setLooping(long,boolean)
    public void setPan(long,float,float)
    public void setPitch(long,float)
    public void setVolume(long,float)
    public void stop()
    public void stop(long)
com.badlogic.gdx.backends.android.AndroidTouchHandler:
    private void logAction(int,int)
com.badlogic.gdx.backends.android.AndroidWallpaperListener
com.badlogic.gdx.backends.android.AndroidZipFileHandle:
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
com.badlogic.gdx.backends.android.AsynchronousSound$1
com.badlogic.gdx.backends.android.AsynchronousSound$2
com.badlogic.gdx.backends.android.AsynchronousSound$4
com.badlogic.gdx.backends.android.AsynchronousSound$5
com.badlogic.gdx.backends.android.AsynchronousSound$6
com.badlogic.gdx.backends.android.AsynchronousSound$7
com.badlogic.gdx.backends.android.AsynchronousSound:
    public long loop()
    public long loop(float)
    public long loop(float,float,float)
    public void pause()
    public void pause(long)
    public long play()
    public long play(float)
    public void resume()
    public void resume(long)
    public void setLooping(long,boolean)
    public void setPan(long,float,float)
    public void setPitch(long,float)
    public void setVolume(long,float)
    public void stop()
    public void stop(long)
com.badlogic.gdx.backends.android.BuildConfig
com.badlogic.gdx.backends.android.DefaultAndroidAudio:
    public java.lang.String[] getAvailableOutputDevices()
    public com.badlogic.gdx.audio.AudioDevice newAudioDevice(int,boolean)
    public com.badlogic.gdx.audio.AudioRecorder newAudioRecorder(int,boolean)
    public com.badlogic.gdx.audio.Music newMusic(java.io.FileDescriptor)
    public boolean switchOutputDevice(java.lang.String)
com.badlogic.gdx.backends.android.DefaultAndroidFiles:
    public boolean isExternalStorageAvailable()
    public boolean isLocalStorageAvailable()
    public boolean setAPKExpansion(int,int)
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$1$1
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$1
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$2$1
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$2
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$3$1
com.badlogic.gdx.backends.android.DefaultAndroidInput$3$3
com.badlogic.gdx.backends.android.DefaultAndroidInput$3
com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent:
    static final int KEY_DOWN
    static final int KEY_TYPED
    static final int KEY_UP
com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent:
    static final int TOUCH_CANCELLED
    static final int TOUCH_DOWN
    static final int TOUCH_DRAGGED
    static final int TOUCH_MOVED
    static final int TOUCH_SCROLLED
    static final int TOUCH_UP
com.badlogic.gdx.backends.android.DefaultAndroidInput:
    public static final int NUM_TOUCHES
    public float getAccelerometerX()
    public float getAccelerometerY()
    public float getAccelerometerZ()
    public float getAzimuth()
    public long getCurrentEventTime()
    public int getDeltaX(int)
    public int getDeltaY(int)
    public float getGyroscopeX()
    public float getGyroscopeY()
    public float getGyroscopeZ()
    public com.badlogic.gdx.InputProcessor getInputProcessor()
    public int getMaxPointers()
    public com.badlogic.gdx.Input$Orientation getNativeOrientation()
    public float getPitch()
    public float getPressure()
    public float getPressure(int)
    public float getRoll()
    public void getRotationMatrix(float[])
    public void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String)
    public void getTextInput(com.badlogic.gdx.Input$TextInputListener,java.lang.String,java.lang.String,java.lang.String,com.badlogic.gdx.Input$OnscreenKeyboardType)
    public int getX(int)
    public int getY(int)
    public boolean isButtonJustPressed(int)
    public boolean isButtonPressed(int)
    public boolean isCursorCatched()
    public boolean isTouched()
    public boolean isTouched(int)
    public boolean justTouched()
    public void onDreamingStarted()
    public void onDreamingStopped()
    private void updateOrientation()
    public void vibrate(int,int,boolean)
    public void vibrate(int,boolean)
    public void vibrate(com.badlogic.gdx.Input$VibrationType)
com.badlogic.gdx.backends.android.InputProcessorLW
com.badlogic.gdx.backends.android.R
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO:
    public long mCRC32
    public long mCompressedLength
    public final java.io.File mFile
    public long mLocalHdrOffset
    public int mMethod
    public long mOffset
    public long mUncompressedLength
    public long mWhenModified
    public final java.lang.String mZipFileName
    public void <init>(java.lang.String,java.io.File,java.lang.String)
    public android.content.res.AssetFileDescriptor getAssetFileDescriptor()
    public long getOffset()
    public java.io.File getZipFile()
    public java.lang.String getZipFileName()
    public boolean isUncompressed()
    public void setOffsetFromFile(java.io.RandomAccessFile,java.nio.ByteBuffer)
com.badlogic.gdx.backends.android.ZipResourceFile:
    static final boolean LOGV
    static final java.lang.String LOG_TAG
    static final int kCDECRC
    static final int kCDECommentLen
    static final int kCDECompLen
    static final int kCDEExtraLen
    static final int kCDELen
    static final int kCDELocalOffset
    static final int kCDEMethod
    static final int kCDEModWhen
    static final int kCDENameLen
    static final int kCDESignature
    static final int kCDEUncompLen
    static final int kCompressDeflated
    static final int kCompressStored
    static final int kEOCDFileOffset
    static final int kEOCDLen
    static final int kEOCDNumEntries
    static final int kEOCDSignature
    static final int kEOCDSize
    static final int kLFHExtraLen
    static final int kLFHLen
    static final int kLFHNameLen
    static final int kLFHSignature
    static final int kMaxCommentLen
    static final int kMaxEOCDSearch
    static final int kZipEntryAdj
    private java.util.HashMap mHashMap
    java.nio.ByteBuffer mLEByteBuffer
    public java.util.HashMap mZipFiles
    public void <init>(java.lang.String)
    void addPatchFile(java.lang.String)
    public com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO[] getAllEntries()
    private static int read4LE(java.io.RandomAccessFile)
    private static int swapEndian(int)
    private static int swapEndian(short)
com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser:
    private void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
    private void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20:
    private static final boolean DEBUG
    public void <init>(android.content.Context,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
    public void <init>(android.content.Context,boolean,int,int,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy)
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser:
    public static final int EGL_COVERAGE_BUFFERS_NV
    public static final int EGL_COVERAGE_SAMPLES_NV
    private static final int EGL_OPENGL_ES2_BIT
    private static final java.lang.String TAG
    private void printConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
    private void printConfigs(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy
com.badlogic.gdx.controllers.AbstractController
com.badlogic.gdx.controllers.Controller:
    public static final int PLAYER_IDX_UNSET
    public abstract void addListener(com.badlogic.gdx.controllers.ControllerListener)
    public abstract void cancelVibration()
    public abstract float getAxis(int)
    public abstract int getAxisCount()
    public abstract boolean getButton(int)
    public abstract int getMaxButtonIndex()
    public abstract int getMinButtonIndex()
    public abstract int getPlayerIndex()
    public abstract com.badlogic.gdx.controllers.ControllerPowerLevel getPowerLevel()
    public abstract java.lang.String getUniqueId()
    public abstract boolean isConnected()
    public abstract boolean isVibrating()
    public abstract void removeListener(com.badlogic.gdx.controllers.ControllerListener)
    public abstract void setPlayerIndex(int)
    public abstract boolean supportsPlayerIndex()
com.badlogic.gdx.controllers.ControllerAdapter:
    public boolean axisMoved(com.badlogic.gdx.controllers.Controller,int,float)
    public boolean buttonDown(com.badlogic.gdx.controllers.Controller,int)
    public boolean buttonUp(com.badlogic.gdx.controllers.Controller,int)
    public void connected(com.badlogic.gdx.controllers.Controller)
    public void disconnected(com.badlogic.gdx.controllers.Controller)
com.badlogic.gdx.controllers.ControllerManager:
    public abstract void clearListeners()
    public abstract com.badlogic.gdx.utils.Array getControllers()
    public abstract com.badlogic.gdx.utils.Array getListeners()
    public abstract void removeListener(com.badlogic.gdx.controllers.ControllerListener)
com.badlogic.gdx.controllers.ControllerManagerStub:
    public void clearListeners()
    public com.badlogic.gdx.utils.Array getListeners()
    public void removeListener(com.badlogic.gdx.controllers.ControllerListener)
com.badlogic.gdx.controllers.ControllerMapping:
    public static final int UNDEFINED
com.badlogic.gdx.controllers.ControllerPowerLevel
com.badlogic.gdx.controllers.Controllers:
    private static final java.lang.String TAG
    public void <init>()
    public static void clearListeners()
    public static com.badlogic.gdx.utils.Array getControllers()
    public static com.badlogic.gdx.utils.Array getListeners()
    public static void removeListener(com.badlogic.gdx.controllers.ControllerListener)
com.badlogic.gdx.controllers.android.AndroidController:
    private boolean attached
    public void addListener(com.badlogic.gdx.controllers.ControllerListener)
    public void cancelVibration()
    public int getAxisCount()
    public int getDeviceId()
    public int getMaxButtonIndex()
    public int getMinButtonIndex()
    public int getPlayerIndex()
    public com.badlogic.gdx.controllers.ControllerPowerLevel getPowerLevel()
    public java.lang.String getUniqueId()
    public boolean isAttached()
    public boolean isConnected()
    public boolean isVibrating()
    public void removeListener(com.badlogic.gdx.controllers.ControllerListener)
    public void setAttached(boolean)
    public void setPlayerIndex(int)
    public boolean supportsPlayerIndex()
com.badlogic.gdx.controllers.android.AndroidControllerEvent:
    public static final int AXIS
    public static final int BUTTON_DOWN
    public static final int BUTTON_UP
    public static final int CONNECTED
    public static final int DISCONNECTED
com.badlogic.gdx.controllers.android.ControllerLifeCycleListener:
    private static final java.lang.String TAG
com.badlogic.gdx.files.FileHandle:
    public void <init>(java.io.File)
    public void <init>(java.lang.String)
    public void emptyDirectory()
    public void emptyDirectory(boolean)
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FileFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.io.FilenameFilter)
    public com.badlogic.gdx.files.FileHandle[] list(java.lang.String)
    public java.lang.String pathWithoutExtension()
    public java.io.BufferedInputStream read(int)
    public int readBytes(byte[],int,int)
    public java.lang.String readString()
    public java.lang.String readString(java.lang.String)
    public java.io.BufferedReader reader(int,java.lang.String)
    public java.io.Reader reader()
    public static com.badlogic.gdx.files.FileHandle tempDirectory(java.lang.String)
    public static com.badlogic.gdx.files.FileHandle tempFile(java.lang.String)
    public java.io.OutputStream write(boolean,int)
    public void writeBytes(byte[],int,int,boolean)
    public void writeString(java.lang.String,boolean)
    public void writeString(java.lang.String,boolean,java.lang.String)
    public java.io.Writer writer(boolean)
    public java.io.Writer writer(boolean,java.lang.String)
com.badlogic.gdx.files.FileHandleStream
com.badlogic.gdx.graphics.Camera:
    public com.badlogic.gdx.math.collision.Ray getPickRay(float,float)
    public com.badlogic.gdx.math.collision.Ray getPickRay(float,float,float,float,float,float)
    public void lookAt(float,float,float)
    public void lookAt(com.badlogic.gdx.math.Vector3)
    public void normalizeUp()
    public com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3)
    public void rotate(float,float,float,float)
    public void rotate(com.badlogic.gdx.math.Matrix4)
    public void rotate(com.badlogic.gdx.math.Quaternion)
    public void rotate(com.badlogic.gdx.math.Vector3,float)
    public void rotateAround(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float)
    public void transform(com.badlogic.gdx.math.Matrix4)
    public void translate(float,float,float)
    public void translate(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3)
    public abstract void update(boolean)
com.badlogic.gdx.graphics.Colors:
    private void <init>()
    public static com.badlogic.gdx.utils.ObjectMap getColors()
    public static com.badlogic.gdx.graphics.Color put(java.lang.String,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.Cubemap$1:
    public void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.graphics.Cubemap$CubemapSide
com.badlogic.gdx.graphics.Cubemap:
    public void <init>(int,int,int,com.badlogic.gdx.graphics.Pixmap$Format)
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle,boolean)
    public void <init>(com.badlogic.gdx.graphics.CubemapData)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap,boolean)
    public void <init>(com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData,com.badlogic.gdx.graphics.TextureData)
    private static void addManagedCubemap(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Cubemap)
    public int getDepth()
    public int getHeight()
    public static int getNumManagedCubemaps()
    public int getWidth()
    public static void setAssetManager(com.badlogic.gdx.assets.AssetManager)
com.badlogic.gdx.graphics.CubemapData:
    public abstract int getHeight()
    public abstract int getWidth()
com.badlogic.gdx.graphics.Cursor$SystemCursor
com.badlogic.gdx.graphics.FPSLogger
com.badlogic.gdx.graphics.GL20:
    public static final int GL_ACTIVE_ATTRIBUTES
    public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
    public static final int GL_ACTIVE_TEXTURE
    public static final int GL_ACTIVE_UNIFORMS
    public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH
    public static final int GL_ALIASED_LINE_WIDTH_RANGE
    public static final int GL_ALIASED_POINT_SIZE_RANGE
    public static final int GL_ALPHA
    public static final int GL_ALPHA_BITS
    public static final int GL_ALWAYS
    public static final int GL_ARRAY_BUFFER
    public static final int GL_ARRAY_BUFFER_BINDING
    public static final int GL_ATTACHED_SHADERS
    public static final int GL_BACK
    public static final int GL_BLEND
    public static final int GL_BLEND_COLOR
    public static final int GL_BLEND_DST_ALPHA
    public static final int GL_BLEND_DST_RGB
    public static final int GL_BLEND_EQUATION
    public static final int GL_BLEND_EQUATION_ALPHA
    public static final int GL_BLEND_EQUATION_RGB
    public static final int GL_BLEND_SRC_ALPHA
    public static final int GL_BLEND_SRC_RGB
    public static final int GL_BLUE_BITS
    public static final int GL_BOOL
    public static final int GL_BOOL_VEC2
    public static final int GL_BOOL_VEC3
    public static final int GL_BOOL_VEC4
    public static final int GL_BUFFER_SIZE
    public static final int GL_BUFFER_USAGE
    public static final int GL_BYTE
    public static final int GL_CCW
    public static final int GL_CLAMP_TO_EDGE
    public static final int GL_COLOR_ATTACHMENT0
    public static final int GL_COLOR_BUFFER_BIT
    public static final int GL_COLOR_CLEAR_VALUE
    public static final int GL_COLOR_WRITEMASK
    public static final int GL_COMPILE_STATUS
    public static final int GL_COMPRESSED_TEXTURE_FORMATS
    public static final int GL_CONSTANT_ALPHA
    public static final int GL_CONSTANT_COLOR
    public static final int GL_COVERAGE_BUFFER_BIT_NV
    public static final int GL_CULL_FACE
    public static final int GL_CULL_FACE_MODE
    public static final int GL_CURRENT_PROGRAM
    public static final int GL_CURRENT_VERTEX_ATTRIB
    public static final int GL_CW
    public static final int GL_DECR
    public static final int GL_DECR_WRAP
    public static final int GL_DELETE_STATUS
    public static final int GL_DEPTH_ATTACHMENT
    public static final int GL_DEPTH_BITS
    public static final int GL_DEPTH_BUFFER_BIT
    public static final int GL_DEPTH_CLEAR_VALUE
    public static final int GL_DEPTH_COMPONENT
    public static final int GL_DEPTH_COMPONENT16
    public static final int GL_DEPTH_FUNC
    public static final int GL_DEPTH_RANGE
    public static final int GL_DEPTH_TEST
    public static final int GL_DEPTH_WRITEMASK
    public static final int GL_DITHER
    public static final int GL_DONT_CARE
    public static final int GL_DST_ALPHA
    public static final int GL_DST_COLOR
    public static final int GL_DYNAMIC_DRAW
    public static final int GL_ELEMENT_ARRAY_BUFFER
    public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING
    public static final int GL_EQUAL
    public static final int GL_ES_VERSION_2_0
    public static final int GL_EXTENSIONS
    public static final int GL_FALSE
    public static final int GL_FASTEST
    public static final int GL_FIXED
    public static final int GL_FLOAT
    public static final int GL_FLOAT_MAT2
    public static final int GL_FLOAT_MAT3
    public static final int GL_FLOAT_MAT4
    public static final int GL_FLOAT_VEC2
    public static final int GL_FLOAT_VEC3
    public static final int GL_FLOAT_VEC4
    public static final int GL_FRAGMENT_SHADER
    public static final int GL_FRAMEBUFFER
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
    public static final int GL_FRAMEBUFFER_BINDING
    public static final int GL_FRAMEBUFFER_COMPLETE
    public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
    public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
    public static final int GL_FRAMEBUFFER_UNSUPPORTED
    public static final int GL_FRONT
    public static final int GL_FRONT_AND_BACK
    public static final int GL_FRONT_FACE
    public static final int GL_FUNC_ADD
    public static final int GL_FUNC_REVERSE_SUBTRACT
    public static final int GL_FUNC_SUBTRACT
    public static final int GL_GENERATE_MIPMAP
    public static final int GL_GENERATE_MIPMAP_HINT
    public static final int GL_GEQUAL
    public static final int GL_GREATER
    public static final int GL_GREEN_BITS
    public static final int GL_HIGH_FLOAT
    public static final int GL_HIGH_INT
    public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT
    public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE
    public static final int GL_INCR
    public static final int GL_INCR_WRAP
    public static final int GL_INFO_LOG_LENGTH
    public static final int GL_INT
    public static final int GL_INT_VEC2
    public static final int GL_INT_VEC3
    public static final int GL_INT_VEC4
    public static final int GL_INVALID_ENUM
    public static final int GL_INVALID_FRAMEBUFFER_OPERATION
    public static final int GL_INVALID_OPERATION
    public static final int GL_INVALID_VALUE
    public static final int GL_INVERT
    public static final int GL_KEEP
    public static final int GL_LEQUAL
    public static final int GL_LESS
    public static final int GL_LINEAR
    public static final int GL_LINEAR_MIPMAP_LINEAR
    public static final int GL_LINEAR_MIPMAP_NEAREST
    public static final int GL_LINES
    public static final int GL_LINE_LOOP
    public static final int GL_LINE_STRIP
    public static final int GL_LINE_WIDTH
    public static final int GL_LINK_STATUS
    public static final int GL_LOW_FLOAT
    public static final int GL_LOW_INT
    public static final int GL_LUMINANCE
    public static final int GL_LUMINANCE_ALPHA
    public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
    public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE
    public static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS
    public static final int GL_MAX_RENDERBUFFER_SIZE
    public static final int GL_MAX_TEXTURE_IMAGE_UNITS
    public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
    public static final int GL_MAX_TEXTURE_SIZE
    public static final int GL_MAX_TEXTURE_UNITS
    public static final int GL_MAX_VARYING_VECTORS
    public static final int GL_MAX_VERTEX_ATTRIBS
    public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
    public static final int GL_MAX_VERTEX_UNIFORM_VECTORS
    public static final int GL_MAX_VIEWPORT_DIMS
    public static final int GL_MEDIUM_FLOAT
    public static final int GL_MEDIUM_INT
    public static final int GL_MIRRORED_REPEAT
    public static final int GL_NEAREST
    public static final int GL_NEAREST_MIPMAP_LINEAR
    public static final int GL_NEAREST_MIPMAP_NEAREST
    public static final int GL_NEVER
    public static final int GL_NICEST
    public static final int GL_NONE
    public static final int GL_NOTEQUAL
    public static final int GL_NO_ERROR
    public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS
    public static final int GL_NUM_SHADER_BINARY_FORMATS
    public static final int GL_ONE
    public static final int GL_ONE_MINUS_CONSTANT_ALPHA
    public static final int GL_ONE_MINUS_CONSTANT_COLOR
    public static final int GL_ONE_MINUS_DST_ALPHA
    public static final int GL_ONE_MINUS_DST_COLOR
    public static final int GL_ONE_MINUS_SRC_ALPHA
    public static final int GL_ONE_MINUS_SRC_COLOR
    public static final int GL_OUT_OF_MEMORY
    public static final int GL_PACK_ALIGNMENT
    public static final int GL_POINTS
    public static final int GL_POLYGON_OFFSET_FACTOR
    public static final int GL_POLYGON_OFFSET_FILL
    public static final int GL_POLYGON_OFFSET_UNITS
    public static final int GL_RED_BITS
    public static final int GL_RENDERBUFFER
    public static final int GL_RENDERBUFFER_ALPHA_SIZE
    public static final int GL_RENDERBUFFER_BINDING
    public static final int GL_RENDERBUFFER_BLUE_SIZE
    public static final int GL_RENDERBUFFER_DEPTH_SIZE
    public static final int GL_RENDERBUFFER_GREEN_SIZE
    public static final int GL_RENDERBUFFER_HEIGHT
    public static final int GL_RENDERBUFFER_INTERNAL_FORMAT
    public static final int GL_RENDERBUFFER_RED_SIZE
    public static final int GL_RENDERBUFFER_STENCIL_SIZE
    public static final int GL_RENDERBUFFER_WIDTH
    public static final int GL_RENDERER
    public static final int GL_REPEAT
    public static final int GL_REPLACE
    public static final int GL_RGB
    public static final int GL_RGB565
    public static final int GL_RGB5_A1
    public static final int GL_RGBA
    public static final int GL_RGBA4
    public static final int GL_SAMPLER_2D
    public static final int GL_SAMPLER_CUBE
    public static final int GL_SAMPLES
    public static final int GL_SAMPLE_ALPHA_TO_COVERAGE
    public static final int GL_SAMPLE_BUFFERS
    public static final int GL_SAMPLE_COVERAGE
    public static final int GL_SAMPLE_COVERAGE_INVERT
    public static final int GL_SAMPLE_COVERAGE_VALUE
    public static final int GL_SCISSOR_BOX
    public static final int GL_SCISSOR_TEST
    public static final int GL_SHADER_BINARY_FORMATS
    public static final int GL_SHADER_COMPILER
    public static final int GL_SHADER_SOURCE_LENGTH
    public static final int GL_SHADER_TYPE
    public static final int GL_SHADING_LANGUAGE_VERSION
    public static final int GL_SHORT
    public static final int GL_SRC_ALPHA
    public static final int GL_SRC_ALPHA_SATURATE
    public static final int GL_SRC_COLOR
    public static final int GL_STATIC_DRAW
    public static final int GL_STENCIL_ATTACHMENT
    public static final int GL_STENCIL_BACK_FAIL
    public static final int GL_STENCIL_BACK_FUNC
    public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL
    public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS
    public static final int GL_STENCIL_BACK_REF
    public static final int GL_STENCIL_BACK_VALUE_MASK
    public static final int GL_STENCIL_BACK_WRITEMASK
    public static final int GL_STENCIL_BITS
    public static final int GL_STENCIL_BUFFER_BIT
    public static final int GL_STENCIL_CLEAR_VALUE
    public static final int GL_STENCIL_FAIL
    public static final int GL_STENCIL_FUNC
    public static final int GL_STENCIL_INDEX
    public static final int GL_STENCIL_INDEX8
    public static final int GL_STENCIL_PASS_DEPTH_FAIL
    public static final int GL_STENCIL_PASS_DEPTH_PASS
    public static final int GL_STENCIL_REF
    public static final int GL_STENCIL_TEST
    public static final int GL_STENCIL_VALUE_MASK
    public static final int GL_STENCIL_WRITEMASK
    public static final int GL_STREAM_DRAW
    public static final int GL_SUBPIXEL_BITS
    public static final int GL_TEXTURE
    public static final int GL_TEXTURE0
    public static final int GL_TEXTURE1
    public static final int GL_TEXTURE10
    public static final int GL_TEXTURE11
    public static final int GL_TEXTURE12
    public static final int GL_TEXTURE13
    public static final int GL_TEXTURE14
    public static final int GL_TEXTURE15
    public static final int GL_TEXTURE16
    public static final int GL_TEXTURE17
    public static final int GL_TEXTURE18
    public static final int GL_TEXTURE19
    public static final int GL_TEXTURE2
    public static final int GL_TEXTURE20
    public static final int GL_TEXTURE21
    public static final int GL_TEXTURE22
    public static final int GL_TEXTURE23
    public static final int GL_TEXTURE24
    public static final int GL_TEXTURE25
    public static final int GL_TEXTURE26
    public static final int GL_TEXTURE27
    public static final int GL_TEXTURE28
    public static final int GL_TEXTURE29
    public static final int GL_TEXTURE3
    public static final int GL_TEXTURE30
    public static final int GL_TEXTURE31
    public static final int GL_TEXTURE4
    public static final int GL_TEXTURE5
    public static final int GL_TEXTURE6
    public static final int GL_TEXTURE7
    public static final int GL_TEXTURE8
    public static final int GL_TEXTURE9
    public static final int GL_TEXTURE_2D
    public static final int GL_TEXTURE_BINDING_2D
    public static final int GL_TEXTURE_BINDING_CUBE_MAP
    public static final int GL_TEXTURE_CUBE_MAP
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z
    public static final int GL_TEXTURE_MAG_FILTER
    public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT
    public static final int GL_TEXTURE_MIN_FILTER
    public static final int GL_TEXTURE_WRAP_S
    public static final int GL_TEXTURE_WRAP_T
    public static final int GL_TRIANGLES
    public static final int GL_TRIANGLE_FAN
    public static final int GL_TRIANGLE_STRIP
    public static final int GL_TRUE
    public static final int GL_UNPACK_ALIGNMENT
    public static final int GL_UNSIGNED_BYTE
    public static final int GL_UNSIGNED_INT
    public static final int GL_UNSIGNED_SHORT
    public static final int GL_UNSIGNED_SHORT_4_4_4_4
    public static final int GL_UNSIGNED_SHORT_5_5_5_1
    public static final int GL_UNSIGNED_SHORT_5_6_5
    public static final int GL_VALIDATE_STATUS
    public static final int GL_VENDOR
    public static final int GL_VERSION
    public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
    public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED
    public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
    public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER
    public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE
    public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE
    public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE
    public static final int GL_VERTEX_PROGRAM_POINT_SIZE
    public static final int GL_VERTEX_SHADER
    public static final int GL_VIEWPORT
    public static final int GL_ZERO
    public abstract void glActiveTexture(int)
    public abstract void glBindAttribLocation(int,int,java.lang.String)
    public abstract void glBlendColor(float,float,float,float)
    public abstract void glBlendEquation(int)
    public abstract void glBlendEquationSeparate(int,int)
    public abstract void glClearColor(float,float,float,float)
    public abstract void glClearDepthf(float)
    public abstract void glClearStencil(int)
    public abstract void glColorMask(boolean,boolean,boolean,boolean)
    public abstract void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
    public abstract void glCopyTexImage2D(int,int,int,int,int,int,int,int)
    public abstract void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
    public abstract void glCullFace(int)
    public abstract void glDeleteBuffers(int,java.nio.IntBuffer)
    public abstract void glDeleteFramebuffers(int,java.nio.IntBuffer)
    public abstract void glDeleteRenderbuffers(int,java.nio.IntBuffer)
    public abstract void glDeleteTextures(int,java.nio.IntBuffer)
    public abstract void glDepthFunc(int)
    public abstract void glDepthRangef(float,float)
    public abstract void glDetachShader(int,int)
    public abstract void glFinish()
    public abstract void glFlush()
    public abstract void glFrontFace(int)
    public abstract void glGenBuffers(int,java.nio.IntBuffer)
    public abstract void glGenFramebuffers(int,java.nio.IntBuffer)
    public abstract void glGenRenderbuffers(int,java.nio.IntBuffer)
    public abstract void glGenTextures(int,java.nio.IntBuffer)
    public abstract void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
    public abstract void glGetBooleanv(int,java.nio.Buffer)
    public abstract void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
    public abstract int glGetError()
    public abstract void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
    public abstract void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
    public abstract void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetTexParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glGetUniformfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetUniformiv(int,int,java.nio.IntBuffer)
    public abstract void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
    public abstract void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
    public abstract void glHint(int,int)
    public abstract boolean glIsBuffer(int)
    public abstract boolean glIsEnabled(int)
    public abstract boolean glIsFramebuffer(int)
    public abstract boolean glIsProgram(int)
    public abstract boolean glIsRenderbuffer(int)
    public abstract boolean glIsShader(int)
    public abstract boolean glIsTexture(int)
    public abstract void glLineWidth(float)
    public abstract void glPolygonOffset(float,float)
    public abstract void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
    public abstract void glReleaseShaderCompiler()
    public abstract void glSampleCoverage(float,boolean)
    public abstract void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
    public abstract void glStencilFunc(int,int,int)
    public abstract void glStencilFuncSeparate(int,int,int,int)
    public abstract void glStencilMask(int)
    public abstract void glStencilMaskSeparate(int,int)
    public abstract void glStencilOp(int,int,int)
    public abstract void glStencilOpSeparate(int,int,int,int)
    public abstract void glTexParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glTexParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glUniform1f(int,float)
    public abstract void glUniform1fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform1fv(int,int,float[],int)
    public abstract void glUniform1iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform1iv(int,int,int[],int)
    public abstract void glUniform2f(int,float,float)
    public abstract void glUniform2fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform2fv(int,int,float[],int)
    public abstract void glUniform2i(int,int,int)
    public abstract void glUniform2iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform2iv(int,int,int[],int)
    public abstract void glUniform3f(int,float,float,float)
    public abstract void glUniform3fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform3fv(int,int,float[],int)
    public abstract void glUniform3i(int,int,int,int)
    public abstract void glUniform3iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform3iv(int,int,int[],int)
    public abstract void glUniform4fv(int,int,java.nio.FloatBuffer)
    public abstract void glUniform4fv(int,int,float[],int)
    public abstract void glUniform4i(int,int,int,int,int)
    public abstract void glUniform4iv(int,int,java.nio.IntBuffer)
    public abstract void glUniform4iv(int,int,int[],int)
    public abstract void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix2fv(int,int,boolean,float[],int)
    public abstract void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix3fv(int,int,boolean,float[],int)
    public abstract void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glValidateProgram(int)
    public abstract void glVertexAttrib1f(int,float)
    public abstract void glVertexAttrib1fv(int,java.nio.FloatBuffer)
    public abstract void glVertexAttrib2f(int,float,float)
    public abstract void glVertexAttrib2fv(int,java.nio.FloatBuffer)
    public abstract void glVertexAttrib3f(int,float,float,float)
    public abstract void glVertexAttrib3fv(int,java.nio.FloatBuffer)
    public abstract void glVertexAttrib4f(int,float,float,float,float)
    public abstract void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.graphics.GL30:
    public static final int GL_ACTIVE_UNIFORM_BLOCKS
    public static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
    public static final int GL_ALREADY_SIGNALED
    public static final int GL_ANY_SAMPLES_PASSED
    public static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE
    public static final int GL_BLUE
    public static final int GL_BUFFER_ACCESS_FLAGS
    public static final int GL_BUFFER_MAPPED
    public static final int GL_BUFFER_MAP_LENGTH
    public static final int GL_BUFFER_MAP_OFFSET
    public static final int GL_BUFFER_MAP_POINTER
    public static final int GL_COLOR
    public static final int GL_COLOR_ATTACHMENT1
    public static final int GL_COLOR_ATTACHMENT10
    public static final int GL_COLOR_ATTACHMENT11
    public static final int GL_COLOR_ATTACHMENT12
    public static final int GL_COLOR_ATTACHMENT13
    public static final int GL_COLOR_ATTACHMENT14
    public static final int GL_COLOR_ATTACHMENT15
    public static final int GL_COLOR_ATTACHMENT2
    public static final int GL_COLOR_ATTACHMENT3
    public static final int GL_COLOR_ATTACHMENT4
    public static final int GL_COLOR_ATTACHMENT5
    public static final int GL_COLOR_ATTACHMENT6
    public static final int GL_COLOR_ATTACHMENT7
    public static final int GL_COLOR_ATTACHMENT8
    public static final int GL_COLOR_ATTACHMENT9
    public static final int GL_COMPARE_REF_TO_TEXTURE
    public static final int GL_COMPRESSED_R11_EAC
    public static final int GL_COMPRESSED_RG11_EAC
    public static final int GL_COMPRESSED_RGB8_ETC2
    public static final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
    public static final int GL_COMPRESSED_RGBA8_ETC2_EAC
    public static final int GL_COMPRESSED_SIGNED_R11_EAC
    public static final int GL_COMPRESSED_SIGNED_RG11_EAC
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
    public static final int GL_COMPRESSED_SRGB8_ETC2
    public static final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
    public static final int GL_CONDITION_SATISFIED
    public static final int GL_COPY_READ_BUFFER
    public static final int GL_COPY_READ_BUFFER_BINDING
    public static final int GL_COPY_WRITE_BUFFER
    public static final int GL_COPY_WRITE_BUFFER_BINDING
    public static final int GL_CURRENT_QUERY
    public static final int GL_DEPTH
    public static final int GL_DEPTH24_STENCIL8
    public static final int GL_DEPTH32F_STENCIL8
    public static final int GL_DEPTH_COMPONENT24
    public static final int GL_DEPTH_COMPONENT32F
    public static final int GL_DEPTH_STENCIL
    public static final int GL_DEPTH_STENCIL_ATTACHMENT
    public static final int GL_DRAW_BUFFER0
    public static final int GL_DRAW_BUFFER1
    public static final int GL_DRAW_BUFFER10
    public static final int GL_DRAW_BUFFER11
    public static final int GL_DRAW_BUFFER12
    public static final int GL_DRAW_BUFFER13
    public static final int GL_DRAW_BUFFER14
    public static final int GL_DRAW_BUFFER15
    public static final int GL_DRAW_BUFFER2
    public static final int GL_DRAW_BUFFER3
    public static final int GL_DRAW_BUFFER4
    public static final int GL_DRAW_BUFFER5
    public static final int GL_DRAW_BUFFER6
    public static final int GL_DRAW_BUFFER7
    public static final int GL_DRAW_BUFFER8
    public static final int GL_DRAW_BUFFER9
    public static final int GL_DRAW_FRAMEBUFFER
    public static final int GL_DRAW_FRAMEBUFFER_BINDING
    public static final int GL_DYNAMIC_COPY
    public static final int GL_DYNAMIC_READ
    public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV
    public static final int GL_FLOAT_MAT2x3
    public static final int GL_FLOAT_MAT2x4
    public static final int GL_FLOAT_MAT3x2
    public static final int GL_FLOAT_MAT3x4
    public static final int GL_FLOAT_MAT4x2
    public static final int GL_FLOAT_MAT4x3
    public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT
    public static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
    public static final int GL_FRAMEBUFFER_DEFAULT
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
    public static final int GL_FRAMEBUFFER_UNDEFINED
    public static final int GL_GREEN
    public static final int GL_HALF_FLOAT
    public static final int GL_INTERLEAVED_ATTRIBS
    public static final int GL_INT_2_10_10_10_REV
    public static final int GL_INT_SAMPLER_2D
    public static final int GL_INT_SAMPLER_2D_ARRAY
    public static final int GL_INT_SAMPLER_3D
    public static final int GL_INT_SAMPLER_CUBE
    public static final int GL_INVALID_INDEX
    public static final int GL_MAJOR_VERSION
    public static final int GL_MAP_FLUSH_EXPLICIT_BIT
    public static final int GL_MAP_INVALIDATE_BUFFER_BIT
    public static final int GL_MAP_INVALIDATE_RANGE_BIT
    public static final int GL_MAP_READ_BIT
    public static final int GL_MAP_UNSYNCHRONIZED_BIT
    public static final int GL_MAP_WRITE_BIT
    public static final int GL_MAX
    public static final int GL_MAX_3D_TEXTURE_SIZE
    public static final int GL_MAX_ARRAY_TEXTURE_LAYERS
    public static final int GL_MAX_COLOR_ATTACHMENTS
    public static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
    public static final int GL_MAX_COMBINED_UNIFORM_BLOCKS
    public static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
    public static final int GL_MAX_DRAW_BUFFERS
    public static final int GL_MAX_ELEMENTS_INDICES
    public static final int GL_MAX_ELEMENTS_VERTICES
    public static final int GL_MAX_ELEMENT_INDEX
    public static final int GL_MAX_FRAGMENT_INPUT_COMPONENTS
    public static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS
    public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
    public static final int GL_MAX_PROGRAM_TEXEL_OFFSET
    public static final int GL_MAX_SAMPLES
    public static final int GL_MAX_SERVER_WAIT_TIMEOUT
    public static final int GL_MAX_TEXTURE_LOD_BIAS
    public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
    public static final int GL_MAX_UNIFORM_BLOCK_SIZE
    public static final int GL_MAX_UNIFORM_BUFFER_BINDINGS
    public static final int GL_MAX_VARYING_COMPONENTS
    public static final int GL_MAX_VERTEX_OUTPUT_COMPONENTS
    public static final int GL_MAX_VERTEX_UNIFORM_BLOCKS
    public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS
    public static final int GL_MIN
    public static final int GL_MINOR_VERSION
    public static final int GL_MIN_PROGRAM_TEXEL_OFFSET
    public static final int GL_NUM_EXTENSIONS
    public static final int GL_NUM_PROGRAM_BINARY_FORMATS
    public static final int GL_NUM_SAMPLE_COUNTS
    public static final int GL_OBJECT_TYPE
    public static final int GL_PACK_ROW_LENGTH
    public static final int GL_PACK_SKIP_PIXELS
    public static final int GL_PACK_SKIP_ROWS
    public static final int GL_PIXEL_PACK_BUFFER
    public static final int GL_PIXEL_PACK_BUFFER_BINDING
    public static final int GL_PIXEL_UNPACK_BUFFER
    public static final int GL_PIXEL_UNPACK_BUFFER_BINDING
    public static final int GL_PRIMITIVE_RESTART_FIXED_INDEX
    public static final int GL_PROGRAM_BINARY_FORMATS
    public static final int GL_PROGRAM_BINARY_LENGTH
    public static final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT
    public static final int GL_QUERY_RESULT
    public static final int GL_QUERY_RESULT_AVAILABLE
    public static final int GL_R11F_G11F_B10F
    public static final int GL_R16F
    public static final int GL_R16I
    public static final int GL_R16UI
    public static final int GL_R32F
    public static final int GL_R32I
    public static final int GL_R32UI
    public static final int GL_R8
    public static final int GL_R8I
    public static final int GL_R8UI
    public static final int GL_R8_SNORM
    public static final int GL_RASTERIZER_DISCARD
    public static final int GL_READ_BUFFER
    public static final int GL_READ_FRAMEBUFFER
    public static final int GL_READ_FRAMEBUFFER_BINDING
    public static final int GL_RED
    public static final int GL_RED_INTEGER
    public static final int GL_RENDERBUFFER_SAMPLES
    public static final int GL_RG
    public static final int GL_RG16F
    public static final int GL_RG16I
    public static final int GL_RG16UI
    public static final int GL_RG32F
    public static final int GL_RG32I
    public static final int GL_RG32UI
    public static final int GL_RG8
    public static final int GL_RG8I
    public static final int GL_RG8UI
    public static final int GL_RG8_SNORM
    public static final int GL_RGB10_A2
    public static final int GL_RGB10_A2UI
    public static final int GL_RGB16F
    public static final int GL_RGB16I
    public static final int GL_RGB16UI
    public static final int GL_RGB32F
    public static final int GL_RGB32I
    public static final int GL_RGB32UI
    public static final int GL_RGB8
    public static final int GL_RGB8I
    public static final int GL_RGB8UI
    public static final int GL_RGB8_SNORM
    public static final int GL_RGB9_E5
    public static final int GL_RGBA16F
    public static final int GL_RGBA16I
    public static final int GL_RGBA16UI
    public static final int GL_RGBA32F
    public static final int GL_RGBA32I
    public static final int GL_RGBA32UI
    public static final int GL_RGBA8
    public static final int GL_RGBA8I
    public static final int GL_RGBA8UI
    public static final int GL_RGBA8_SNORM
    public static final int GL_RGBA_INTEGER
    public static final int GL_RGB_INTEGER
    public static final int GL_RG_INTEGER
    public static final int GL_SAMPLER_2D_ARRAY
    public static final int GL_SAMPLER_2D_ARRAY_SHADOW
    public static final int GL_SAMPLER_2D_SHADOW
    public static final int GL_SAMPLER_3D
    public static final int GL_SAMPLER_BINDING
    public static final int GL_SAMPLER_CUBE_SHADOW
    public static final int GL_SEPARATE_ATTRIBS
    public static final int GL_SIGNALED
    public static final int GL_SIGNED_NORMALIZED
    public static final int GL_SRGB
    public static final int GL_SRGB8
    public static final int GL_SRGB8_ALPHA8
    public static final int GL_STATIC_COPY
    public static final int GL_STATIC_READ
    public static final int GL_STENCIL
    public static final int GL_STREAM_COPY
    public static final int GL_STREAM_READ
    public static final int GL_SYNC_CONDITION
    public static final int GL_SYNC_FENCE
    public static final int GL_SYNC_FLAGS
    public static final int GL_SYNC_FLUSH_COMMANDS_BIT
    public static final int GL_SYNC_GPU_COMMANDS_COMPLETE
    public static final int GL_SYNC_STATUS
    public static final int GL_TEXTURE_2D_ARRAY
    public static final int GL_TEXTURE_3D
    public static final int GL_TEXTURE_BASE_LEVEL
    public static final int GL_TEXTURE_BINDING_2D_ARRAY
    public static final int GL_TEXTURE_BINDING_3D
    public static final int GL_TEXTURE_COMPARE_FUNC
    public static final int GL_TEXTURE_COMPARE_MODE
    public static final int GL_TEXTURE_IMMUTABLE_FORMAT
    public static final int GL_TEXTURE_IMMUTABLE_LEVELS
    public static final int GL_TEXTURE_MAX_LEVEL
    public static final int GL_TEXTURE_MAX_LOD
    public static final int GL_TEXTURE_MIN_LOD
    public static final int GL_TEXTURE_SWIZZLE_A
    public static final int GL_TEXTURE_SWIZZLE_B
    public static final int GL_TEXTURE_SWIZZLE_G
    public static final int GL_TEXTURE_SWIZZLE_R
    public static final int GL_TEXTURE_WRAP_R
    public static final int GL_TIMEOUT_EXPIRED
    public static final long GL_TIMEOUT_IGNORED
    public static final int GL_TRANSFORM_FEEDBACK
    public static final int GL_TRANSFORM_FEEDBACK_ACTIVE
    public static final int GL_TRANSFORM_FEEDBACK_BINDING
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START
    public static final int GL_TRANSFORM_FEEDBACK_PAUSED
    public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
    public static final int GL_TRANSFORM_FEEDBACK_VARYINGS
    public static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
    public static final int GL_UNIFORM_ARRAY_STRIDE
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
    public static final int GL_UNIFORM_BLOCK_BINDING
    public static final int GL_UNIFORM_BLOCK_DATA_SIZE
    public static final int GL_UNIFORM_BLOCK_INDEX
    public static final int GL_UNIFORM_BLOCK_NAME_LENGTH
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
    public static final int GL_UNIFORM_BUFFER
    public static final int GL_UNIFORM_BUFFER_BINDING
    public static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
    public static final int GL_UNIFORM_BUFFER_SIZE
    public static final int GL_UNIFORM_BUFFER_START
    public static final int GL_UNIFORM_IS_ROW_MAJOR
    public static final int GL_UNIFORM_MATRIX_STRIDE
    public static final int GL_UNIFORM_NAME_LENGTH
    public static final int GL_UNIFORM_OFFSET
    public static final int GL_UNIFORM_SIZE
    public static final int GL_UNIFORM_TYPE
    public static final int GL_UNPACK_IMAGE_HEIGHT
    public static final int GL_UNPACK_ROW_LENGTH
    public static final int GL_UNPACK_SKIP_IMAGES
    public static final int GL_UNPACK_SKIP_PIXELS
    public static final int GL_UNPACK_SKIP_ROWS
    public static final int GL_UNSIGNALED
    public static final int GL_UNSIGNED_INT_10F_11F_11F_REV
    public static final int GL_UNSIGNED_INT_24_8
    public static final int GL_UNSIGNED_INT_2_10_10_10_REV
    public static final int GL_UNSIGNED_INT_5_9_9_9_REV
    public static final int GL_UNSIGNED_INT_SAMPLER_2D
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
    public static final int GL_UNSIGNED_INT_SAMPLER_3D
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE
    public static final int GL_UNSIGNED_INT_VEC2
    public static final int GL_UNSIGNED_INT_VEC3
    public static final int GL_UNSIGNED_INT_VEC4
    public static final int GL_UNSIGNED_NORMALIZED
    public static final int GL_VERTEX_ARRAY_BINDING
    public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR
    public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER
    public static final int GL_WAIT_FAILED
    public abstract void glBeginQuery(int,int)
    public abstract void glBeginTransformFeedback(int)
    public abstract void glBindBufferBase(int,int,int)
    public abstract void glBindBufferRange(int,int,int,int,int)
    public abstract void glBindSampler(int,int)
    public abstract void glBindTransformFeedback(int,int)
    public abstract void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)
    public abstract void glClearBufferfi(int,int,float,int)
    public abstract void glClearBufferfv(int,int,java.nio.FloatBuffer)
    public abstract void glClearBufferiv(int,int,java.nio.IntBuffer)
    public abstract void glClearBufferuiv(int,int,java.nio.IntBuffer)
    public abstract void glCopyBufferSubData(int,int,int,int,int)
    public abstract void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)
    public abstract void glDeleteQueries(int,java.nio.IntBuffer)
    public abstract void glDeleteQueries(int,int[],int)
    public abstract void glDeleteSamplers(int,java.nio.IntBuffer)
    public abstract void glDeleteSamplers(int,int[],int)
    public abstract void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)
    public abstract void glDeleteTransformFeedbacks(int,int[],int)
    public abstract void glDeleteVertexArrays(int,int[],int)
    public abstract void glDrawRangeElements(int,int,int,int,int,int)
    public abstract void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)
    public abstract void glEndQuery(int)
    public abstract void glEndTransformFeedback()
    public abstract void glFlushMappedBufferRange(int,int,int)
    public abstract void glFramebufferTextureLayer(int,int,int,int,int)
    public abstract void glGenQueries(int,java.nio.IntBuffer)
    public abstract void glGenQueries(int,int[],int)
    public abstract void glGenSamplers(int,java.nio.IntBuffer)
    public abstract void glGenSamplers(int,int[],int)
    public abstract void glGenTransformFeedbacks(int,java.nio.IntBuffer)
    public abstract void glGenTransformFeedbacks(int,int[],int)
    public abstract void glGenVertexArrays(int,int[],int)
    public abstract java.lang.String glGetActiveUniformBlockName(int,int)
    public abstract void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)
    public abstract void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)
    public abstract void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)
    public abstract void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)
    public abstract java.nio.Buffer glGetBufferPointerv(int,int)
    public abstract int glGetFragDataLocation(int,java.lang.String)
    public abstract void glGetInteger64v(int,java.nio.LongBuffer)
    public abstract void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)
    public abstract void glGetQueryiv(int,int,java.nio.IntBuffer)
    public abstract void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)
    public abstract java.lang.String glGetStringi(int,int)
    public abstract int glGetUniformBlockIndex(int,java.lang.String)
    public abstract void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)
    public abstract void glGetUniformuiv(int,int,java.nio.IntBuffer)
    public abstract void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)
    public abstract void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)
    public abstract void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)
    public abstract void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)
    public abstract boolean glIsQuery(int)
    public abstract boolean glIsSampler(int)
    public abstract boolean glIsTransformFeedback(int)
    public abstract boolean glIsVertexArray(int)
    public abstract java.nio.Buffer glMapBufferRange(int,int,int,int)
    public abstract void glPauseTransformFeedback()
    public abstract void glProgramParameteri(int,int,int)
    public abstract void glReadBuffer(int)
    public abstract void glRenderbufferStorageMultisample(int,int,int,int,int)
    public abstract void glResumeTransformFeedback()
    public abstract void glSamplerParameterf(int,int,float)
    public abstract void glSamplerParameterfv(int,int,java.nio.FloatBuffer)
    public abstract void glSamplerParameteri(int,int,int)
    public abstract void glSamplerParameteriv(int,int,java.nio.IntBuffer)
    public abstract void glTexImage2D(int,int,int,int,int,int,int,int,int)
    public abstract void glTexImage3D(int,int,int,int,int,int,int,int,int,int)
    public abstract void glTexSubImage2D(int,int,int,int,int,int,int,int,int)
    public abstract void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)
    public abstract void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)
    public abstract void glTransformFeedbackVaryings(int,java.lang.String[],int)
    public abstract void glUniform1uiv(int,int,java.nio.IntBuffer)
    public abstract void glUniform3uiv(int,int,java.nio.IntBuffer)
    public abstract void glUniform4uiv(int,int,java.nio.IntBuffer)
    public abstract void glUniformBlockBinding(int,int,int)
    public abstract void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)
    public abstract boolean glUnmapBuffer(int)
    public abstract void glVertexAttribDivisor(int,int)
    public abstract void glVertexAttribI4i(int,int,int,int,int)
    public abstract void glVertexAttribI4ui(int,int,int,int,int)
    public abstract void glVertexAttribIPointer(int,int,int,int,int)
    public abstract void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.graphics.GL31
com.badlogic.gdx.graphics.GL32$DebugProc
com.badlogic.gdx.graphics.GL32
com.badlogic.gdx.graphics.GLTexture:
    public void <init>(int)
    public void bind(int)
    public float getAnisotropicFilter()
    public abstract int getDepth()
    public abstract int getHeight()
    public abstract int getWidth()
    public abstract boolean isManaged()
    protected abstract void reload()
    public float setAnisotropicFilter(float)
    public float unsafeSetAnisotropicFilter(float)
    public void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter)
    public void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap)
com.badlogic.gdx.graphics.Mesh:
    protected void <init>(com.badlogic.gdx.graphics.glutils.VertexData,com.badlogic.gdx.graphics.glutils.IndexData,boolean)
    public void <init>(boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes)
    public void <init>(boolean,boolean,int,int,com.badlogic.gdx.graphics.VertexAttributes)
    public com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox()
    public com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int)
    public com.badlogic.gdx.math.collision.BoundingBox calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int,com.badlogic.gdx.math.Matrix4)
    public void calculateBoundingBox(com.badlogic.gdx.math.collision.BoundingBox)
    public float calculateRadius(float,float,float)
    public float calculateRadius(float,float,float,int,int)
    public float calculateRadius(float,float,float,int,int,com.badlogic.gdx.math.Matrix4)
    public float calculateRadius(com.badlogic.gdx.math.Vector3)
    public float calculateRadius(com.badlogic.gdx.math.Vector3,int,int)
    public float calculateRadius(com.badlogic.gdx.math.Vector3,int,int,com.badlogic.gdx.math.Matrix4)
    public float calculateRadiusSquared(float,float,float,int,int,com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.graphics.Mesh copy(boolean)
    public com.badlogic.gdx.graphics.Mesh copy(boolean,boolean,int[])
    public com.badlogic.gdx.graphics.Mesh disableInstancedRendering()
    public varargs com.badlogic.gdx.graphics.Mesh enableInstancedRendering(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int)
    public com.badlogic.gdx.math.collision.BoundingBox extendBoundingBox(com.badlogic.gdx.math.collision.BoundingBox,int,int,com.badlogic.gdx.math.Matrix4)
    public void getIndices(int,int,short[],int)
    public void getIndices(int,short[],int)
    public void getIndices(short[])
    public void getIndices(short[],int)
    public java.nio.ShortBuffer getIndicesBuffer()
    public com.badlogic.gdx.graphics.VertexAttributes getInstancedAttributes()
    public int getMaxIndices()
    public int getMaxVertices()
    public int getVertexSize()
    public float[] getVertices(int,int,float[])
    public float[] getVertices(int,int,float[],int)
    public float[] getVertices(int,float[])
    public float[] getVertices(float[])
    public java.nio.FloatBuffer getVerticesBuffer()
    public java.nio.FloatBuffer getVerticesBuffer(boolean)
    public boolean isInstanced()
    public void scale(float,float,float)
    public void setAutoBind(boolean)
    public com.badlogic.gdx.graphics.Mesh setIndices(short[],int,int)
    public com.badlogic.gdx.graphics.Mesh setInstanceData(java.nio.FloatBuffer)
    public com.badlogic.gdx.graphics.Mesh setInstanceData(java.nio.FloatBuffer,int)
    public com.badlogic.gdx.graphics.Mesh setInstanceData(float[])
    public com.badlogic.gdx.graphics.Mesh setInstanceData(float[],int,int)
    public com.badlogic.gdx.graphics.Mesh setVertices(float[])
    public void transform(com.badlogic.gdx.math.Matrix4)
    public void transform(com.badlogic.gdx.math.Matrix4,int,int)
    public static void transform(com.badlogic.gdx.math.Matrix4,float[],int,int,int,int,int)
    public void transformUV(com.badlogic.gdx.math.Matrix3)
    protected void transformUV(com.badlogic.gdx.math.Matrix3,int,int)
    public static void transformUV(com.badlogic.gdx.math.Matrix3,float[],int,int,int,int)
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,java.nio.FloatBuffer)
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,java.nio.FloatBuffer,int,int)
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,float[])
    public com.badlogic.gdx.graphics.Mesh updateInstanceData(int,float[],int,int)
    public com.badlogic.gdx.graphics.Mesh updateVertices(int,float[])
    public com.badlogic.gdx.graphics.Mesh updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.OrthographicCamera:
    public void <init>(float,float)
    public void rotate(float)
    public void setToOrtho(boolean)
    public void setToOrtho(boolean,float,float)
    public void translate(float,float)
    public void translate(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.graphics.PerspectiveCamera
com.badlogic.gdx.graphics.Pixmap$1$1
com.badlogic.gdx.graphics.Pixmap$1
com.badlogic.gdx.graphics.Pixmap$DownloadPixmapResponseListener
com.badlogic.gdx.graphics.Pixmap$Format:
    public static int toGlFormat(com.badlogic.gdx.graphics.Pixmap$Format)
    public static int toGlType(com.badlogic.gdx.graphics.Pixmap$Format)
com.badlogic.gdx.graphics.Pixmap:
    public void <init>(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap)
    public void <init>(java.nio.ByteBuffer)
    public void <init>(java.nio.ByteBuffer,int,int)
    public void <init>(byte[],int,int)
    public static com.badlogic.gdx.graphics.Pixmap createFromFrameBuffer(int,int,int,int)
    public static void downloadFromUrl(java.lang.String,com.badlogic.gdx.graphics.Pixmap$DownloadPixmapResponseListener)
    public void drawCircle(int,int,int)
    public void drawLine(int,int,int,int)
    public void drawPixel(int,int)
    public void drawRectangle(int,int,int,int)
    public void fillTriangle(int,int,int,int,int,int)
    public com.badlogic.gdx.graphics.Pixmap$Blending getBlending()
    public com.badlogic.gdx.graphics.Pixmap$Filter getFilter()
    public boolean isDisposed()
    public void setPixels(java.nio.ByteBuffer)
com.badlogic.gdx.graphics.PixmapIO$CIM:
    private static final int BUFFER_SIZE
    private void <init>()
    public static void write(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
com.badlogic.gdx.graphics.PixmapIO$PNG$ChunkBuffer
com.badlogic.gdx.graphics.PixmapIO$PNG
com.badlogic.gdx.graphics.PixmapIO:
    public void <init>()
    public static void writeCIM(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
    public static void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap)
    public static void writePNG(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap,int,boolean)
com.badlogic.gdx.graphics.Texture$1:
    public void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class)
com.badlogic.gdx.graphics.Texture3D
com.badlogic.gdx.graphics.Texture3DData
com.badlogic.gdx.graphics.Texture:
    public void <init>(int,int,com.badlogic.gdx.graphics.Pixmap$Format)
    public void <init>(com.badlogic.gdx.files.FileHandle)
    public void <init>(com.badlogic.gdx.graphics.Pixmap)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean)
    public void <init>(com.badlogic.gdx.graphics.Pixmap,boolean)
    public void <init>(java.lang.String)
    public void draw(com.badlogic.gdx.graphics.Pixmap,int,int)
    public int getDepth()
    public static int getNumManagedTextures()
    public static void setAssetManager(com.badlogic.gdx.assets.AssetManager)
com.badlogic.gdx.graphics.TextureArray:
    public void <init>(com.badlogic.gdx.graphics.TextureArrayData)
    public varargs void <init>(boolean,com.badlogic.gdx.graphics.Pixmap$Format,com.badlogic.gdx.files.FileHandle[])
    public varargs void <init>(boolean,com.badlogic.gdx.files.FileHandle[])
    public varargs void <init>(com.badlogic.gdx.files.FileHandle[])
    public varargs void <init>(java.lang.String[])
    private static void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.TextureArray)
    public int getDepth()
    public int getHeight()
    private static varargs com.badlogic.gdx.files.FileHandle[] getInternalHandles(java.lang.String[])
    public static java.lang.String getManagedStatus()
    public static int getNumManagedTextureArrays()
    public int getWidth()
com.badlogic.gdx.graphics.TextureArrayData$Factory
com.badlogic.gdx.graphics.TextureData$Factory:
    public void <init>()
    public static com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,boolean)
com.badlogic.gdx.graphics.VertexAttribute:
    public void <init>(int,int,int,boolean,java.lang.String)
    public static com.badlogic.gdx.graphics.VertexAttribute Binormal()
    public static com.badlogic.gdx.graphics.VertexAttribute BoneWeight(int)
    public static com.badlogic.gdx.graphics.VertexAttribute ColorPacked()
    public static com.badlogic.gdx.graphics.VertexAttribute ColorUnpacked()
    public static com.badlogic.gdx.graphics.VertexAttribute Normal()
    public static com.badlogic.gdx.graphics.VertexAttribute Position()
    public static com.badlogic.gdx.graphics.VertexAttribute Tangent()
    public static com.badlogic.gdx.graphics.VertexAttribute TexCoords(int)
    public com.badlogic.gdx.graphics.VertexAttribute copy()
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator:
    public void reset()
com.badlogic.gdx.graphics.VertexAttributes$Usage
com.badlogic.gdx.graphics.VertexAttributes:
    public com.badlogic.gdx.graphics.VertexAttribute findByUsage(int)
    public int getBoneWeights()
    public long getMaskWithSizePacked()
    public int getOffset(int)
    public int getOffset(int,int)
    public int getTextureCoordinates()
com.badlogic.gdx.graphics.g2d.Animation$1
com.badlogic.gdx.graphics.g2d.Animation$PlayMode
com.badlogic.gdx.graphics.g2d.Animation
com.badlogic.gdx.graphics.g2d.Batch:
    public static final int C1
    public static final int C2
    public static final int C3
    public static final int C4
    public static final int U1
    public static final int U2
    public static final int U3
    public static final int U4
    public static final int V1
    public static final int V2
    public static final int V3
    public static final int V4
    public static final int X1
    public static final int X2
    public static final int X3
    public static final int X4
    public static final int Y1
    public static final int Y2
    public static final int Y3
    public static final int Y4
    public abstract void disableBlending()
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
    public abstract void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
    public abstract void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
    public abstract void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float)
    public abstract void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
    public abstract void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
    public abstract void enableBlending()
    public abstract int getBlendDstFunc()
    public abstract int getBlendDstFuncAlpha()
    public abstract int getBlendSrcFunc()
    public abstract int getBlendSrcFuncAlpha()
    public abstract com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
    public abstract com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
    public abstract boolean isBlendingEnabled()
    public abstract boolean isDrawing()
    public abstract void setBlendFunction(int,int)
    public abstract void setBlendFunctionSeparate(int,int,int,int)
    public abstract void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData:
    public com.badlogic.gdx.files.FileHandle getFontFile()
    public java.lang.String getImagePath(int)
    public java.lang.String[] getImagePaths()
    public void scale(float)
    public void setLineHeight(float)
com.badlogic.gdx.graphics.g2d.BitmapFont:
    private static final int LOG2_PAGE_SIZE
    private static final int PAGES
    private static final int PAGE_SIZE
    public void <init>(com.badlogic.gdx.files.FileHandle)
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureRegion)
    public void <init>(boolean)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,float,int,boolean)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float)
    public float getAscent()
    public com.badlogic.gdx.graphics.g2d.BitmapFontCache getCache()
    public com.badlogic.gdx.graphics.g2d.TextureRegion getRegion()
    public com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(int)
    public float getScaleX()
    public float getScaleY()
    public float getSpaceXadvance()
    public float getXHeight()
    static int indexOf(java.lang.CharSequence,char,int)
    public boolean ownsTexture()
    public void setColor(com.badlogic.gdx.graphics.Color)
    public void setFixedWidthGlyphs(java.lang.CharSequence)
com.badlogic.gdx.graphics.g2d.BitmapFontCache:
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,float,int,boolean)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,int,int)
    public com.badlogic.gdx.graphics.g2d.BitmapFont getFont()
    public com.badlogic.gdx.utils.Array getLayouts()
    public int getVertexCount(int)
    public float[] getVertices()
    public float[] getVertices(int)
    public float getX()
    public float getY()
    public void setAlphas(float)
    public void setColor(float,float,float,float)
    public void setColor(com.badlogic.gdx.graphics.Color)
    public void setColors(float)
    public void setColors(float,float,float,float)
    public void setColors(float,int,int)
    public void setColors(com.badlogic.gdx.graphics.Color)
    public void setColors(com.badlogic.gdx.graphics.Color,int,int)
    public void setPosition(float,float)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,float,int,boolean)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,int,int,float,int,boolean)
    public com.badlogic.gdx.graphics.g2d.GlyphLayout setText(java.lang.CharSequence,float,float,int,int,float,int,boolean,java.lang.String)
    public void setText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float)
    public void tint(com.badlogic.gdx.graphics.Color)
    public void translate(float,float)
    public boolean usesIntegerPositions()
com.badlogic.gdx.graphics.g2d.CpuSpriteBatch
com.badlogic.gdx.graphics.g2d.DistanceFieldFont$DistanceFieldFontCache
com.badlogic.gdx.graphics.g2d.DistanceFieldFont
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    public static final int GDX2D_BLEND_NONE
    public static final int GDX2D_BLEND_SRC_OVER
    public static final int GDX2D_FORMAT_ALPHA
    public static final int GDX2D_FORMAT_LUMINANCE_ALPHA
    public static final int GDX2D_FORMAT_RGB565
    public static final int GDX2D_FORMAT_RGB888
    public static final int GDX2D_FORMAT_RGBA4444
    public static final int GDX2D_FORMAT_RGBA8888
    public static final int GDX2D_SCALE_LINEAR
    public static final int GDX2D_SCALE_NEAREST
    public void <init>(java.io.InputStream,int)
    public void <init>(java.nio.ByteBuffer,int,int,int)
    public void <init>(java.nio.ByteBuffer,long[])
    public void drawCircle(int,int,int,int)
    private static native void drawCircle(long,int,int,int,int)
    public void drawLine(int,int,int,int,int)
    private static native void drawLine(long,int,int,int,int,int)
    public void drawRect(int,int,int,int,int)
    private static native void drawRect(long,int,int,int,int,int)
    public void fillTriangle(int,int,int,int,int,int,int)
    private static native void fillTriangle(long,int,int,int,int,int,int,int)
    public java.lang.String getFormatString()
    private static native java.nio.ByteBuffer loadByteBuffer(long[],java.nio.ByteBuffer,int,int)
    public static com.badlogic.gdx.graphics.g2d.Gdx2DPixmap newPixmap(int,int,int)
    public static com.badlogic.gdx.graphics.g2d.Gdx2DPixmap newPixmap(java.io.InputStream,int)
com.badlogic.gdx.graphics.g2d.GlyphLayout:
    private static final float epsilon
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String)
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean)
    public void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,com.badlogic.gdx.graphics.Color,float,int,boolean)
com.badlogic.gdx.graphics.g2d.NinePatch:
    public static final int BOTTOM_CENTER
    public static final int BOTTOM_LEFT
    public static final int BOTTOM_RIGHT
    public static final int MIDDLE_CENTER
    public static final int MIDDLE_LEFT
    public static final int MIDDLE_RIGHT
    public static final int TOP_CENTER
    public static final int TOP_LEFT
    public static final int TOP_RIGHT
    public void <init>(com.badlogic.gdx.graphics.Texture)
    public void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int)
    public void <init>(com.badlogic.gdx.graphics.Texture,com.badlogic.gdx.graphics.Color)
    public void <init>(com.badlogic.gdx.graphics.g2d.NinePatch)
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.graphics.Color)
    public varargs void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion[])
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.graphics.Color getColor()
    public float getMiddleHeight()
    public float getMiddleWidth()
    public com.badlogic.gdx.graphics.Texture getTexture()
    public void setBottomHeight(float)
    public void setColor(com.badlogic.gdx.graphics.Color)
    public void setLeftWidth(float)
    public void setMiddleHeight(float)
    public void setMiddleWidth(float)
    public void setPadBottom(float)
    public void setPadLeft(float)
    public void setPadRight(float)
    public void setPadTop(float)
    public void setRightWidth(float)
    public void setTopHeight(float)
com.badlogic.gdx.graphics.g2d.ParticleEffect
com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect
com.badlogic.gdx.graphics.g2d.ParticleEffectPool
com.badlogic.gdx.graphics.g2d.ParticleEmitter$1
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue
com.badlogic.gdx.graphics.g2d.ParticleEmitter$IndependentScaledNumericValue
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpriteMode
com.badlogic.gdx.graphics.g2d.ParticleEmitter
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy$1
com.badlogic.gdx.graphics.g2d.PixmapPacker$GuillotineStrategy:
    java.util.Comparator comparator
    public void sort(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g2d.PixmapPacker$PackStrategy:
    public abstract void sort(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page:
    public com.badlogic.gdx.graphics.Pixmap getPixmap()
    public com.badlogic.gdx.utils.OrderedMap getRects()
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy$1
com.badlogic.gdx.graphics.g2d.PixmapPacker$SkylineStrategy:
    java.util.Comparator comparator
    public void sort(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.graphics.g2d.PixmapPacker:
    public synchronized com.badlogic.gdx.graphics.g2d.TextureAtlas generateTextureAtlas(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean)
    public boolean getDuplicateBorder()
    public boolean getPackToTexture()
    public int getPadding()
    public synchronized com.badlogic.gdx.graphics.g2d.PixmapPacker$Page getPage(java.lang.String)
    public com.badlogic.gdx.graphics.Pixmap$Format getPageFormat()
    public int getPageHeight()
    public synchronized int getPageIndex(java.lang.String)
    public int getPageWidth()
    public void setDuplicateBorder(boolean)
    public void setPadding(int)
    public void setPageFormat(com.badlogic.gdx.graphics.Pixmap$Format)
    public void setPageHeight(int)
    public void setPageWidth(int)
    public void sort(com.badlogic.gdx.utils.Array)
    public synchronized void updateTextureAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean)
    public synchronized void updateTextureAtlas(com.badlogic.gdx.graphics.g2d.TextureAtlas,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean,boolean)
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$1
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$ImageFormat
com.badlogic.gdx.graphics.g2d.PixmapPackerIO$SaveParameters
com.badlogic.gdx.graphics.g2d.PixmapPackerIO
com.badlogic.gdx.graphics.g2d.PolygonBatch
com.badlogic.gdx.graphics.g2d.PolygonRegion
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader
com.badlogic.gdx.graphics.g2d.PolygonSprite
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch
com.badlogic.gdx.graphics.g2d.RepeatablePolygonSprite
com.badlogic.gdx.graphics.g2d.Sprite:
    static final int SPRITE_SIZE
    static final int VERTEX_SIZE
    private com.badlogic.gdx.math.Rectangle bounds
    public void <init>(com.badlogic.gdx.graphics.Texture)
    public void <init>(com.badlogic.gdx.graphics.Texture,int,int)
    public void <init>(com.badlogic.gdx.graphics.Texture,int,int,int,int)
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    public void flip(boolean,boolean)
    public com.badlogic.gdx.math.Rectangle getBoundingRectangle()
    public float getOriginX()
    public float getOriginY()
    public float getRotation()
    public float getScaleX()
    public float getScaleY()
    public void rotate(float)
    public void scale(float)
    public void scroll(float,float)
    public void setAlpha(float)
    public void setCenter(float,float)
    public void setCenterX(float)
    public void setCenterY(float)
    public void setFlip(boolean,boolean)
    public void setOriginBasedPosition(float,float)
    public void setOriginCenter()
    public void setPosition(float,float)
    public void setScale(float)
    public void setU(float)
    public void setU2(float)
    public void setV(float)
    public void setV2(float)
    public void setX(float)
    public void setY(float)
    public void translate(float,float)
    public void translateX(float)
    public void translateY(float)
com.badlogic.gdx.graphics.g2d.SpriteBatch:
    public void <init>(int)
    public void disableBlending()
    public void draw(com.badlogic.gdx.graphics.Texture,float,float)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
    public void enableBlending()
    public int getBlendDstFunc()
    public int getBlendDstFuncAlpha()
    public int getBlendSrcFunc()
    public int getBlendSrcFuncAlpha()
    public com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
    public com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
    public boolean isDrawing()
    public void setBlendFunction(int,int)
    public void setBlendFunctionSeparate(int,int,int,int)
    public void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache
com.badlogic.gdx.graphics.g2d.SpriteCache
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion:
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite:
    public void flip(boolean,boolean)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion getAtlasRegion()
    public float getHeightRatio()
    public float getOriginX()
    public float getOriginY()
    public float getWidthRatio()
    public void rotate90(boolean)
    public void setOriginCenter()
    public void setPosition(float,float)
    public void setX(float)
    public void setY(float)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region:
    public int[] findValue(java.lang.String)
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData:
    public void <init>()
    public com.badlogic.gdx.utils.Array getPages()
    public com.badlogic.gdx.utils.Array getRegions()
com.badlogic.gdx.graphics.g2d.TextureAtlas:
    public void <init>()
    public void <init>(com.badlogic.gdx.files.FileHandle,boolean)
    public void <init>(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion addRegion(java.lang.String,com.badlogic.gdx.graphics.Texture,int,int,int,int)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion addRegion(java.lang.String,com.badlogic.gdx.graphics.g2d.TextureRegion)
    public com.badlogic.gdx.graphics.g2d.NinePatch createPatch(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String,int)
    public com.badlogic.gdx.utils.Array createSprites()
    public com.badlogic.gdx.utils.Array createSprites(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String,int)
    public com.badlogic.gdx.utils.Array findRegions(java.lang.String)
    public com.badlogic.gdx.utils.ObjectSet getTextures()
    private com.badlogic.gdx.graphics.g2d.Sprite newSprite(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion)
com.badlogic.gdx.graphics.g2d.TextureRegion:
    public void <init>(com.badlogic.gdx.graphics.Texture,float,float,float,float)
    public void <init>(com.badlogic.gdx.graphics.Texture,int,int)
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion)
    public boolean isFlipX()
    public boolean isFlipY()
    public void scroll(float,float)
    public void setRegion(com.badlogic.gdx.graphics.Texture)
    public void setRegionHeight(int)
    public void setRegionWidth(int)
    public void setRegionX(int)
    public void setRegionY(int)
    public void setTexture(com.badlogic.gdx.graphics.Texture)
    public void setU(float)
    public void setU2(float)
    public void setV(float)
    public void setV2(float)
    public com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(int,int)
    public static com.badlogic.gdx.graphics.g2d.TextureRegion[][] split(com.badlogic.gdx.graphics.Texture,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap:
    public int getNumGray()
    private static native int getNumGray(long)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face:
    public int getAscender()
    private static native int getAscender(long)
    public int getDescender()
    private static native int getDescender(long)
    public int getHeight()
    private static native int getHeight(long)
    public int getMaxAdvanceHeight()
    private static native int getMaxAdvanceHeight(long)
    public int getStyleFlags()
    private static native int getStyleFlags(long)
    public int getUnderlinePosition()
    private static native int getUnderlinePosition(long)
    public int getUnderlineThickness()
    private static native int getUnderlineThickness(long)
    public boolean loadGlyph(int,int)
    private static native boolean loadGlyph(long,int,int)
    public boolean selectSize(int)
    private static native boolean selectSize(long,int)
    public boolean setCharSize(int,int,int,int)
    private static native boolean setCharSize(long,int,int,int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphMetrics:
    public int getHoriBearingX()
    private static native int getHoriBearingX(long)
    public int getHoriBearingY()
    private static native int getHoriBearingY(long)
    public int getVertAdvance()
    private static native int getVertAdvance(long)
    public int getVertBearingX()
    private static native int getVertBearingX(long)
    public int getVertBearingY()
    private static native int getVertBearingY(long)
    public int getWidth()
    private static native int getWidth(long)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$GlyphSlot:
    public int getAdvanceX()
    private static native int getAdvanceX(long)
    public int getAdvanceY()
    private static native int getAdvanceY(long)
    private static native long getBitmap(long)
    public com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap getBitmap()
    public int getBitmapLeft()
    private static native int getBitmapLeft(long)
    public int getBitmapTop()
    private static native int getBitmapTop(long)
    public int getLinearHoriAdvance()
    private static native int getLinearHoriAdvance(long)
    public int getLinearVertAdvance()
    private static native int getLinearVertAdvance(long)
    public boolean renderGlyph(int)
    private static native boolean renderGlyph(long,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library:
    public com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face newMemoryFace(byte[],int,int)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$SizeMetrics:
    public int getMaxAdvance()
    private static native int getMaxAdvance(long)
    public int getXScale()
    public int getXppem()
    private static native int getXppem(long)
    private static native int getXscale(long)
    public int getYppem()
    private static native int getYppem(long)
    public int getYscale()
    private static native int getYscale(long)
com.badlogic.gdx.graphics.g2d.freetype.FreeType:
    public void <init>()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator:
    public static final java.lang.String DEFAULT_CHARS
    public static final int NO_MAXIMUM
    public com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData generateData(int)
    public com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData generateData(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter)
    public com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$GlyphAndBitmap generateGlyphAndBitmap(int,int,boolean)
    public static int getMaxTextureSize()
    public boolean hasGlyph(int)
    public int scaleForPixelHeight(int)
    public int scaleForPixelWidth(int,int)
    public int scaleToFitSquare(int,int,int)
    public static void setMaxTextureSize(int)
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader$FreeTypeFontGeneratorParameters
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader$FreeTypeFontLoaderParameter
com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader
com.badlogic.gdx.graphics.g3d.Attribute
com.badlogic.gdx.graphics.g3d.Attributes
com.badlogic.gdx.graphics.g3d.Environment
com.badlogic.gdx.graphics.g3d.Material
com.badlogic.gdx.graphics.g3d.Model
com.badlogic.gdx.graphics.g3d.ModelBatch$RenderablePool
com.badlogic.gdx.graphics.g3d.ModelBatch
com.badlogic.gdx.graphics.g3d.ModelCache$1
com.badlogic.gdx.graphics.g3d.ModelCache$2
com.badlogic.gdx.graphics.g3d.ModelCache$MeshPool
com.badlogic.gdx.graphics.g3d.ModelCache$SimpleMeshPool
com.badlogic.gdx.graphics.g3d.ModelCache$Sorter
com.badlogic.gdx.graphics.g3d.ModelCache$TightMeshPool
com.badlogic.gdx.graphics.g3d.ModelCache
com.badlogic.gdx.graphics.g3d.ModelInstance
com.badlogic.gdx.graphics.g3d.Renderable
com.badlogic.gdx.graphics.g3d.RenderableProvider
com.badlogic.gdx.graphics.g3d.Shader
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute
com.badlogic.gdx.graphics.g3d.attributes.CubemapAttribute
com.badlogic.gdx.graphics.g3d.attributes.DepthTestAttribute
com.badlogic.gdx.graphics.g3d.attributes.DirectionalLightsAttribute
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute
com.badlogic.gdx.graphics.g3d.attributes.IntAttribute
com.badlogic.gdx.graphics.g3d.attributes.PointLightsAttribute
com.badlogic.gdx.graphics.g3d.attributes.SpotLightsAttribute
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy
com.badlogic.gdx.graphics.g3d.decals.Decal
com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1
com.badlogic.gdx.graphics.g3d.decals.DecalBatch
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial
com.badlogic.gdx.graphics.g3d.decals.GroupPlug
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy
com.badlogic.gdx.graphics.g3d.environment.AmbientCubemap
com.badlogic.gdx.graphics.g3d.environment.BaseLight
com.badlogic.gdx.graphics.g3d.environment.DirectionalLight
com.badlogic.gdx.graphics.g3d.environment.DirectionalShadowLight
com.badlogic.gdx.graphics.g3d.environment.PointLight
com.badlogic.gdx.graphics.g3d.environment.ShadowMap
com.badlogic.gdx.graphics.g3d.environment.SphericalHarmonics
com.badlogic.gdx.graphics.g3d.environment.SpotLight
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader
com.badlogic.gdx.graphics.g3d.loader.MtlLoader$ObjMaterial
com.badlogic.gdx.graphics.g3d.loader.MtlLoader
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters
com.badlogic.gdx.graphics.g3d.loader.ObjLoader
com.badlogic.gdx.graphics.g3d.model.Animation
com.badlogic.gdx.graphics.g3d.model.MeshPart
com.badlogic.gdx.graphics.g3d.model.Node
com.badlogic.gdx.graphics.g3d.model.NodeAnimation
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe
com.badlogic.gdx.graphics.g3d.model.NodePart
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation
com.badlogic.gdx.graphics.g3d.model.data.ModelData
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart
com.badlogic.gdx.graphics.g3d.model.data.ModelNode
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$Channel
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelDescriptor
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ChannelInitializer
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$FloatChannel
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$IntChannel
com.badlogic.gdx.graphics.g3d.particles.ParallelArray$ObjectChannel
com.badlogic.gdx.graphics.g3d.particles.ParallelArray
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ColorInitializer
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation2dInitializer
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$Rotation3dInitializer
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$ScaleInitializer
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels$TextureRegionInitializer
com.badlogic.gdx.graphics.g3d.particles.ParticleChannels
com.badlogic.gdx.graphics.g3d.particles.ParticleController
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectSaveParameter
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Config
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Inputs
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$ParticleType
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$1
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$2
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$3
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$4
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$5
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters$6
com.badlogic.gdx.graphics.g3d.particles.ParticleShader$Setters
com.badlogic.gdx.graphics.g3d.particles.ParticleShader
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$Distance
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter$None
com.badlogic.gdx.graphics.g3d.particles.ParticleSorter
com.badlogic.gdx.graphics.g3d.particles.ParticleSystem
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData
com.badlogic.gdx.graphics.g3d.particles.ResourceData$Configurable
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData
com.badlogic.gdx.graphics.g3d.particles.ResourceData
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$RenderablePool
com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch
com.badlogic.gdx.graphics.g3d.particles.batches.BufferedParticleBatch
com.badlogic.gdx.graphics.g3d.particles.batches.ModelInstanceParticleBatch
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch
com.badlogic.gdx.graphics.g3d.particles.batches.PointSpriteParticleBatch
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter$EmissionMode
com.badlogic.gdx.graphics.g3d.particles.emitters.RegularEmitter
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Random
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer$Single
com.badlogic.gdx.graphics.g3d.particles.influencers.ColorInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Angular
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$BrownianAcceleration
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$CentripetalAcceleration
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$FaceDirection
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$PolarAcceleration
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational2D
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Rotational3D
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$Strength
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier$TangentialAcceleration
com.badlogic.gdx.graphics.g3d.particles.influencers.DynamicsModifier
com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random$ModelInstancePool
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Random
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer$Single
com.badlogic.gdx.graphics.g3d.particles.influencers.ModelInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerFinalizerInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random$ParticleControllerPool
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Random
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer$Single
com.badlogic.gdx.graphics.g3d.particles.influencers.ParticleControllerInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$AspectTextureRegion
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Random
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Single
com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.ScaleInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.SimpleInfluencer
com.badlogic.gdx.graphics.g3d.particles.influencers.SpawnInfluencer
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData
com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardRenderer
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceControllerRenderData
com.badlogic.gdx.graphics.g3d.particles.renderers.ModelInstanceRenderer
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerControllerRenderer
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderData
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteControllerRenderData
com.badlogic.gdx.graphics.g3d.particles.renderers.PointSpriteRenderer
com.badlogic.gdx.graphics.g3d.particles.values.CylinderSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.EllipseSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.GradientColorValue
com.badlogic.gdx.graphics.g3d.particles.values.LineSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue$Triangle
com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.NumericValue
com.badlogic.gdx.graphics.g3d.particles.values.ParticleValue
com.badlogic.gdx.graphics.g3d.particles.values.PointSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue$SpawnSide
com.badlogic.gdx.graphics.g3d.particles.values.PrimitiveSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.RangedNumericValue
com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.ScaledNumericValue
com.badlogic.gdx.graphics.g3d.particles.values.SpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.UnweightedMeshSpawnShapeValue
com.badlogic.gdx.graphics.g3d.particles.values.WeightMeshSpawnShapeValue
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$GlobalSetter
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$LocalSetter
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Setter
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Uniform
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Validator
com.badlogic.gdx.graphics.g3d.shaders.BaseShader
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Config
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Inputs
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$10
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$11
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$12
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$13
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$14
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$15
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$16
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$17
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$18
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$19
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$1
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$20
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$21
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$22
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$23
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$24
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$25
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$26
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$27
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$28
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$29
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$2
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$3
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$4
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$5
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$6
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$7
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$8
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$9
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$ACubemap
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters$Bones
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader$Setters
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader
com.badlogic.gdx.graphics.g3d.shaders.DepthShader$Config
com.badlogic.gdx.graphics.g3d.shaders.DepthShader
com.badlogic.gdx.graphics.g3d.utils.AnimationController$1
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener
com.badlogic.gdx.graphics.g3d.utils.AnimationController
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider
com.badlogic.gdx.graphics.g3d.utils.CameraInputController$CameraGestureListener
com.badlogic.gdx.graphics.g3d.utils.CameraInputController
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder
com.badlogic.gdx.graphics.g3d.utils.DepthShaderProvider
com.badlogic.gdx.graphics.g3d.utils.FirstPersonCameraController
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder
com.badlogic.gdx.graphics.g3d.utils.RenderContext
com.badlogic.gdx.graphics.g3d.utils.RenderableSorter
com.badlogic.gdx.graphics.g3d.utils.ShaderProvider
com.badlogic.gdx.graphics.g3d.utils.ShapeCache
com.badlogic.gdx.graphics.g3d.utils.TextureBinder
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider
com.badlogic.gdx.graphics.g3d.utils.TextureProvider
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ArrowShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$1
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder$2
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BaseShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.BoxShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CapsuleShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.ConeShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.CylinderShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.EllipseShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.FrustumShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.PatchShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder$RenderablePool
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.RenderableShapeBuilder
com.badlogic.gdx.graphics.g3d.utils.shapebuilders.SphereShapeBuilder
com.badlogic.gdx.graphics.glutils.CustomTexture3DData
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data:
    public void write(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.graphics.glutils.ETC1:
    public void <init>()
    public static com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data encodeImage(com.badlogic.gdx.graphics.Pixmap)
    private static native java.nio.ByteBuffer encodeImage(java.nio.ByteBuffer,int,int,int,int)
    public static com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data encodeImagePKM(com.badlogic.gdx.graphics.Pixmap)
    private static native java.nio.ByteBuffer encodeImagePKM(java.nio.ByteBuffer,int,int,int,int)
    public static native void formatHeader(java.nio.ByteBuffer,int,int,int)
    public static native int getCompressedDataSize(int,int)
com.badlogic.gdx.graphics.glutils.ETC1TextureData:
    public void <init>(com.badlogic.gdx.files.FileHandle)
    public void <init>(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,boolean)
com.badlogic.gdx.graphics.glutils.FacedCubemapData
com.badlogic.gdx.graphics.glutils.FileTextureArrayData
com.badlogic.gdx.graphics.glutils.FileTextureData:
    public com.badlogic.gdx.files.FileHandle getFileHandle()
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer
com.badlogic.gdx.graphics.glutils.FloatTextureData
com.badlogic.gdx.graphics.glutils.FrameBuffer:
    void <init>()
    public void <init>(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean)
    public void <init>(com.badlogic.gdx.graphics.Pixmap$Format,int,int,boolean,boolean)
    protected void <init>(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder)
    protected synthetic bridge void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.GLTexture)
    protected void attachFrameBufferColorTexture(com.badlogic.gdx.graphics.Texture)
    protected synthetic bridge com.badlogic.gdx.graphics.GLTexture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
    protected com.badlogic.gdx.graphics.Texture createTexture(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec)
    protected synthetic bridge void disposeColorTexture(com.badlogic.gdx.graphics.GLTexture)
    protected void disposeColorTexture(com.badlogic.gdx.graphics.Texture)
    public static void unbind()
com.badlogic.gdx.graphics.glutils.FrameBufferCubemap
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FloatFrameBufferBuilder
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferBuilder
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferCubemapBuilder
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec:
    public void <init>(int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec:
    int format
    int internalFormat
    boolean isGpuOnly
    int type
    public void <init>(int,int,int)
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder:
    public void <init>(int,int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicColorTextureAttachment(com.badlogic.gdx.graphics.Pixmap$Format)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicDepthRenderBuffer()
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilDepthPackedRenderBuffer()
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addBasicStencilRenderBuffer()
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addColorTextureAttachment(int,int,int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthRenderBuffer(int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addDepthTextureAttachment(int,int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addFloatAttachment(int,int,int,boolean)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilDepthPackedRenderBuffer(int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilRenderBuffer(int)
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder addStencilTextureAttachment(int,int)
    public abstract com.badlogic.gdx.graphics.glutils.GLFrameBuffer build()
com.badlogic.gdx.graphics.glutils.GLFrameBuffer:
    protected static final int GL_DEPTH24_STENCIL8_OES
    protected void <init>(com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder)
    public void begin()
    public void bind()
    public void end()
    public void end(int,int,int,int)
    public com.badlogic.gdx.graphics.GLTexture getColorBufferTexture()
    public int getDepthBufferHandle()
    protected int getDepthStencilPackedBuffer()
    public int getFramebufferHandle()
    public int getHeight()
    public int getStencilBufferHandle()
    public com.badlogic.gdx.utils.Array getTextureAttachments()
    public int getWidth()
    protected void setFrameBufferViewport()
    public static void unbind()
com.badlogic.gdx.graphics.glutils.GLOnlyTextureData
com.badlogic.gdx.graphics.glutils.GLVersion:
    public java.lang.String getDebugVersionString()
    public int getMinorVersion()
    public int getReleaseVersion()
    public java.lang.String getRendererString()
    public com.badlogic.gdx.graphics.glutils.GLVersion$Type getType()
    public java.lang.String getVendorString()
    public boolean isVersionEqualToOrHigher(int,int)
com.badlogic.gdx.graphics.glutils.HdpiUtils:
    public void <init>()
    public static void setMode(com.badlogic.gdx.graphics.glutils.HdpiMode)
    public static int toLogicalX(int)
    public static int toLogicalY(int)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20:
    public void <init>(boolean,boolean,int)
    public void color(com.badlogic.gdx.graphics.Color)
    public com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
    public void normal(float,float,float)
    public void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void texCoord(float,float)
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer:
    public abstract void color(com.badlogic.gdx.graphics.Color)
    public abstract void flush()
    public abstract void normal(float,float,float)
    public abstract void texCoord(float,float)
com.badlogic.gdx.graphics.glutils.IndexArray:
    public java.nio.ShortBuffer getBuffer()
    public void setIndices(java.nio.ShortBuffer)
    public void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.glutils.IndexBufferObject:
    public void <init>(int)
    public void <init>(boolean,java.nio.ByteBuffer)
    public java.nio.ShortBuffer getBuffer()
    public void setIndices(java.nio.ShortBuffer)
    public void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData:
    public void <init>(int)
    public java.nio.ShortBuffer getBuffer()
    public void setIndices(java.nio.ShortBuffer)
    public void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.glutils.IndexData:
    public abstract java.nio.ShortBuffer getBuffer()
    public abstract void setIndices(java.nio.ShortBuffer)
    public abstract void updateIndices(int,short[],int,int)
com.badlogic.gdx.graphics.glutils.InstanceBufferObject
com.badlogic.gdx.graphics.glutils.InstanceBufferObjectSubData
com.badlogic.gdx.graphics.glutils.InstanceData:
    public abstract void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract com.badlogic.gdx.graphics.VertexAttributes getAttributes()
    public abstract java.nio.FloatBuffer getBuffer()
    public abstract java.nio.FloatBuffer getBuffer(boolean)
    public abstract int getNumMaxInstances()
    public abstract void invalidate()
    public abstract void setInstanceData(java.nio.FloatBuffer,int)
    public abstract void setInstanceData(float[],int,int)
    public abstract void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract void updateInstanceData(int,java.nio.FloatBuffer,int,int)
    public abstract void updateInstanceData(int,float[],int,int)
com.badlogic.gdx.graphics.glutils.KTXTextureData:
    private static final int GL_TEXTURE_1D
    private static final int GL_TEXTURE_1D_ARRAY_EXT
    private static final int GL_TEXTURE_2D_ARRAY_EXT
    private static final int GL_TEXTURE_3D
    public java.nio.ByteBuffer getData(int,int)
    public int getGlInternalFormat()
    public int getNumberOfFaces()
    public int getNumberOfMipMapLevels()
com.badlogic.gdx.graphics.glutils.MipMapGenerator:
    private void <init>()
    public static void generateMipMap(com.badlogic.gdx.graphics.Pixmap,int,int)
    public static void setUseHardwareMipMap(boolean)
com.badlogic.gdx.graphics.glutils.MipMapTextureData
com.badlogic.gdx.graphics.glutils.PixmapTextureData:
    public void <init>(com.badlogic.gdx.graphics.Pixmap,com.badlogic.gdx.graphics.Pixmap$Format,boolean,boolean)
com.badlogic.gdx.graphics.glutils.ShaderProgram:
    public static final java.lang.String BINORMAL_ATTRIBUTE
    public static final java.lang.String BONEWEIGHT_ATTRIBUTE
    public static final java.lang.String COLOR_ATTRIBUTE
    public static final java.lang.String NORMAL_ATTRIBUTE
    public static final java.lang.String POSITION_ATTRIBUTE
    public static final java.lang.String TANGENT_ATTRIBUTE
    public static final java.lang.String TEXCOORD_ATTRIBUTE
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle)
    public void begin()
    public void enableVertexAttribute(java.lang.String)
    public void end()
    public int getAttributeSize(java.lang.String)
    public int getAttributeType(java.lang.String)
    public java.lang.String[] getAttributes()
    public java.lang.String getFragmentShaderSource()
    public int getHandle()
    public static int getNumManagedShaderPrograms()
    public int getUniformLocation(java.lang.String)
    public int getUniformSize(java.lang.String)
    public int getUniformType(java.lang.String)
    public java.lang.String[] getUniforms()
    public java.lang.String getVertexShaderSource()
    public boolean hasAttribute(java.lang.String)
    public boolean hasUniform(java.lang.String)
    public void setAttributef(java.lang.String,float,float,float,float)
    public void setUniform1fv(int,float[],int,int)
    public void setUniform1fv(java.lang.String,float[],int,int)
    public void setUniform2fv(int,float[],int,int)
    public void setUniform2fv(java.lang.String,float[],int,int)
    public void setUniform3fv(int,float[],int,int)
    public void setUniform3fv(java.lang.String,float[],int,int)
    public void setUniform4fv(int,float[],int,int)
    public void setUniform4fv(java.lang.String,float[],int,int)
    public void setUniformMatrix(int,com.badlogic.gdx.math.Matrix3)
    public void setUniformMatrix(int,com.badlogic.gdx.math.Matrix3,boolean)
    public void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4)
    public void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix3)
    public void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix3,boolean)
    public void setUniformMatrix3fv(java.lang.String,java.nio.FloatBuffer,int,boolean)
    public void setUniformMatrix4fv(int,float[],int,int)
    public void setUniformMatrix4fv(java.lang.String,java.nio.FloatBuffer,int,boolean)
    public void setUniformMatrix4fv(java.lang.String,float[],int,int)
    public void setUniformf(int,float)
    public void setUniformf(int,float,float)
    public void setUniformf(int,float,float,float)
    public void setUniformf(int,float,float,float,float)
    public void setUniformf(int,com.badlogic.gdx.graphics.Color)
    public void setUniformf(int,com.badlogic.gdx.math.Vector2)
    public void setUniformf(int,com.badlogic.gdx.math.Vector3)
    public void setUniformf(int,com.badlogic.gdx.math.Vector4)
    public void setUniformf(java.lang.String,float)
    public void setUniformf(java.lang.String,float,float)
    public void setUniformf(java.lang.String,float,float,float)
    public void setUniformf(java.lang.String,float,float,float,float)
    public void setUniformf(java.lang.String,com.badlogic.gdx.graphics.Color)
    public void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector2)
    public void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector3)
    public void setUniformf(java.lang.String,com.badlogic.gdx.math.Vector4)
    public void setUniformi(int,int)
    public void setUniformi(int,int,int)
    public void setUniformi(int,int,int,int)
    public void setUniformi(int,int,int,int,int)
    public void setUniformi(java.lang.String,int,int)
    public void setUniformi(java.lang.String,int,int,int)
    public void setUniformi(java.lang.String,int,int,int,int)
    public void setVertexAttribute(java.lang.String,int,int,boolean,int,int)
    public void setVertexAttribute(java.lang.String,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.graphics.glutils.ShapeRenderer:
    public void arc(float,float,float,float,float)
    public void arc(float,float,float,float,float,int)
    public void box(float,float,float,float,float,float)
    public void circle(float,float,float)
    public void circle(float,float,float,int)
    public void cone(float,float,float,float,float)
    public void cone(float,float,float,float,float,int)
    public void curve(float,float,float,float,float,float,float,float,int)
    public void ellipse(float,float,float,float)
    public void ellipse(float,float,float,float,float)
    public void ellipse(float,float,float,float,float,int)
    public void ellipse(float,float,float,float,int)
    public com.badlogic.gdx.graphics.Color getColor()
    public com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType getCurrentType()
    public com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
    public com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer getRenderer()
    public void identity()
    public final void line(float,float,float,float)
    public final void line(float,float,float,float,float,float)
    public void line(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public final void line(float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public final void line(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public final void line(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public void point(float,float,float)
    public void polygon(float[])
    public void polygon(float[],int,int)
    public void polyline(float[])
    public void polyline(float[],int,int)
    public void rect(float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void rectLine(float,float,float,float,float)
    public void rectLine(float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void rectLine(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,float)
    public void rotate(float,float,float,float)
    public void scale(float,float,float)
    public void setColor(float,float,float,float)
    public void translate(float,float,float)
    public void triangle(float,float,float,float,float,float)
    public void triangle(float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color)
    public void updateMatrices()
    public void x(float,float,float)
    public void x(com.badlogic.gdx.math.Vector2,float)
com.badlogic.gdx.graphics.glutils.VertexArray:
    public varargs void <init>(int,com.badlogic.gdx.graphics.VertexAttribute[])
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public java.nio.FloatBuffer getBuffer()
    public java.nio.FloatBuffer getBuffer(boolean)
    public int getNumMaxVertices()
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObject:
    protected void <init>(int,java.nio.ByteBuffer,boolean,com.badlogic.gdx.graphics.VertexAttributes)
    public varargs void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public java.nio.FloatBuffer getBuffer()
    public java.nio.FloatBuffer getBuffer(boolean)
    public int getNumMaxVertices()
    protected int getUsage()
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData:
    public varargs void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public java.nio.FloatBuffer getBuffer()
    public java.nio.FloatBuffer getBuffer(boolean)
    public int getBufferHandle()
    public int getNumMaxVertices()
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO:
    public varargs void <init>(boolean,int,com.badlogic.gdx.graphics.VertexAttribute[])
    public void <init>(boolean,java.nio.ByteBuffer,com.badlogic.gdx.graphics.VertexAttributes)
    public void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public java.nio.FloatBuffer getBuffer()
    public java.nio.FloatBuffer getBuffer(boolean)
    public int getNumMaxVertices()
    public void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.glutils.VertexData:
    public abstract void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract java.nio.FloatBuffer getBuffer()
    public abstract java.nio.FloatBuffer getBuffer(boolean)
    public abstract int getNumMaxVertices()
    public abstract void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram)
    public abstract void updateVertices(int,float[],int,int)
com.badlogic.gdx.graphics.profiling.GL20Interceptor
com.badlogic.gdx.graphics.profiling.GL30Interceptor
com.badlogic.gdx.graphics.profiling.GL31Interceptor
com.badlogic.gdx.graphics.profiling.GL32Interceptor
com.badlogic.gdx.graphics.profiling.GLErrorListener$1
com.badlogic.gdx.graphics.profiling.GLErrorListener$2
com.badlogic.gdx.graphics.profiling.GLErrorListener
com.badlogic.gdx.graphics.profiling.GLInterceptor
com.badlogic.gdx.graphics.profiling.GLProfiler
com.badlogic.gdx.input.GestureDetector$1
com.badlogic.gdx.input.GestureDetector$GestureAdapter
com.badlogic.gdx.input.GestureDetector$GestureListener
com.badlogic.gdx.input.GestureDetector$VelocityTracker
com.badlogic.gdx.input.GestureDetector
com.badlogic.gdx.input.RemoteInput$EventTrigger
com.badlogic.gdx.input.RemoteInput$KeyEvent
com.badlogic.gdx.input.RemoteInput$RemoteInputListener
com.badlogic.gdx.input.RemoteInput$TouchEvent
com.badlogic.gdx.input.RemoteInput
com.badlogic.gdx.input.RemoteSender
com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver
com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver
com.badlogic.gdx.maps.ImageResolver
com.badlogic.gdx.maps.Map
com.badlogic.gdx.maps.MapGroupLayer
com.badlogic.gdx.maps.MapLayer
com.badlogic.gdx.maps.MapLayers
com.badlogic.gdx.maps.MapObject
com.badlogic.gdx.maps.MapObjects
com.badlogic.gdx.maps.MapProperties
com.badlogic.gdx.maps.MapRenderer
com.badlogic.gdx.maps.objects.CircleMapObject
com.badlogic.gdx.maps.objects.EllipseMapObject
com.badlogic.gdx.maps.objects.PolygonMapObject
com.badlogic.gdx.maps.objects.PolylineMapObject
com.badlogic.gdx.maps.objects.RectangleMapObject
com.badlogic.gdx.maps.objects.TextureMapObject
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$1
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader
com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters
com.badlogic.gdx.maps.tiled.TideMapLoader
com.badlogic.gdx.maps.tiled.TiledMap
com.badlogic.gdx.maps.tiled.TiledMapImageLayer
com.badlogic.gdx.maps.tiled.TiledMapRenderer
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode
com.badlogic.gdx.maps.tiled.TiledMapTile
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell
com.badlogic.gdx.maps.tiled.TiledMapTileLayer
com.badlogic.gdx.maps.tiled.TiledMapTileSet
com.badlogic.gdx.maps.tiled.TiledMapTileSets
com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters
com.badlogic.gdx.maps.tiled.TmxMapLoader
com.badlogic.gdx.maps.tiled.objects.TiledMapTileMapObject
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer
com.badlogic.gdx.maps.tiled.renderers.IsometricStaggeredTiledMapRenderer
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer
com.badlogic.gdx.maps.tiled.renderers.OrthoCachedTiledMapRenderer
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile
com.badlogic.gdx.math.Affine2:
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Affine2)
    public void applyTo(com.badlogic.gdx.math.Vector2)
    public float det()
    public com.badlogic.gdx.math.Vector2 getTranslation(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 idt()
    public com.badlogic.gdx.math.Affine2 inv()
    public boolean isIdt()
    public boolean isTranslation()
    public com.badlogic.gdx.math.Affine2 mul(com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Affine2 preRotate(float)
    public com.badlogic.gdx.math.Affine2 preRotateRad(float)
    public com.badlogic.gdx.math.Affine2 preScale(float,float)
    public com.badlogic.gdx.math.Affine2 preScale(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 preShear(float,float)
    public com.badlogic.gdx.math.Affine2 preShear(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 preTranslate(float,float)
    public com.badlogic.gdx.math.Affine2 preTranslate(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 rotate(float)
    public com.badlogic.gdx.math.Affine2 rotateRad(float)
    public com.badlogic.gdx.math.Affine2 scale(float,float)
    public com.badlogic.gdx.math.Affine2 scale(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Affine2 set(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Affine2 setToProduct(com.badlogic.gdx.math.Affine2,com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Affine2 setToRotation(float)
    public com.badlogic.gdx.math.Affine2 setToRotation(float,float)
    public com.badlogic.gdx.math.Affine2 setToRotationRad(float)
    public com.badlogic.gdx.math.Affine2 setToScaling(float,float)
    public com.badlogic.gdx.math.Affine2 setToScaling(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToShearing(float,float)
    public com.badlogic.gdx.math.Affine2 setToShearing(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTranslation(float,float)
    public com.badlogic.gdx.math.Affine2 setToTranslation(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTrnRotRadScl(float,float,float,float,float)
    public com.badlogic.gdx.math.Affine2 setToTrnRotRadScl(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTrnRotScl(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 setToTrnScl(float,float,float,float)
    public com.badlogic.gdx.math.Affine2 setToTrnScl(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 shear(float,float)
    public com.badlogic.gdx.math.Affine2 shear(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Affine2 translate(com.badlogic.gdx.math.Vector2)
com.badlogic.gdx.math.BSpline
com.badlogic.gdx.math.Bezier
com.badlogic.gdx.math.Bresenham2$1
com.badlogic.gdx.math.Bresenham2
com.badlogic.gdx.math.CatmullRomSpline
com.badlogic.gdx.math.Circle
com.badlogic.gdx.math.ConvexHull
com.badlogic.gdx.math.CumulativeDistribution$CumulativeValue
com.badlogic.gdx.math.CumulativeDistribution
com.badlogic.gdx.math.DelaunayTriangulator
com.badlogic.gdx.math.EarClippingTriangulator
com.badlogic.gdx.math.Ellipse
com.badlogic.gdx.math.FloatCounter
com.badlogic.gdx.math.Frustum:
    public boolean boundsInFrustum(float,float,float,float,float,float)
    public boolean boundsInFrustum(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public boolean boundsInFrustum(com.badlogic.gdx.math.collision.BoundingBox)
    public boolean boundsInFrustum(com.badlogic.gdx.math.collision.OrientedBoundingBox)
    public boolean pointInFrustum(float,float,float)
    public boolean pointInFrustum(com.badlogic.gdx.math.Vector3)
    public boolean sphereInFrustum(float,float,float,float)
    public boolean sphereInFrustum(com.badlogic.gdx.math.Vector3,float)
    public boolean sphereInFrustumWithoutNearFar(float,float,float,float)
    public boolean sphereInFrustumWithoutNearFar(com.badlogic.gdx.math.Vector3,float)
com.badlogic.gdx.math.GeometryUtils
com.badlogic.gdx.math.GridPoint2
com.badlogic.gdx.math.GridPoint3
com.badlogic.gdx.math.Interpolation$10
com.badlogic.gdx.math.Interpolation$11
com.badlogic.gdx.math.Interpolation$12
com.badlogic.gdx.math.Interpolation$13
com.badlogic.gdx.math.Interpolation$14
com.badlogic.gdx.math.Interpolation$1
com.badlogic.gdx.math.Interpolation$2
com.badlogic.gdx.math.Interpolation$3
com.badlogic.gdx.math.Interpolation$4
com.badlogic.gdx.math.Interpolation$5
com.badlogic.gdx.math.Interpolation$6
com.badlogic.gdx.math.Interpolation$7
com.badlogic.gdx.math.Interpolation$8
com.badlogic.gdx.math.Interpolation$9
com.badlogic.gdx.math.Interpolation$Bounce
com.badlogic.gdx.math.Interpolation$BounceIn
com.badlogic.gdx.math.Interpolation$BounceOut
com.badlogic.gdx.math.Interpolation$Elastic
com.badlogic.gdx.math.Interpolation$ElasticIn
com.badlogic.gdx.math.Interpolation$ElasticOut
com.badlogic.gdx.math.Interpolation$Exp
com.badlogic.gdx.math.Interpolation$ExpIn
com.badlogic.gdx.math.Interpolation$ExpOut
com.badlogic.gdx.math.Interpolation$Pow
com.badlogic.gdx.math.Interpolation$PowIn
com.badlogic.gdx.math.Interpolation$PowOut
com.badlogic.gdx.math.Interpolation$Swing
com.badlogic.gdx.math.Interpolation$SwingIn
com.badlogic.gdx.math.Interpolation$SwingOut
com.badlogic.gdx.math.Interpolation
com.badlogic.gdx.math.Intersector$MinimumTranslationVector
com.badlogic.gdx.math.Intersector$SplitTriangle
com.badlogic.gdx.math.Intersector
com.badlogic.gdx.math.MathUtils$Sin:
    private void <init>()
com.badlogic.gdx.math.MathUtils:
    private static final double BIG_ENOUGH_CEIL
    private static final double BIG_ENOUGH_FLOOR
    private static final int BIG_ENOUGH_INT
    private static final double BIG_ENOUGH_ROUND
    private static final double CEIL
    public static final float E
    public static final float FLOAT_ROUNDING_ERROR
    public static final float HALF_PI
    public static final float PI
    public static final float PI2
    private static final int SIN_BITS
    private static final int SIN_COUNT
    private static final int SIN_MASK
    private static final float degFull
    public static final float degRad
    private static final float degToIndex
    public static final float degreesToRadians
    public static final float nanoToSec
    public static final float radDeg
    private static final float radFull
    private static final float radToIndex
    public static final float radiansToDegrees
    private void <init>()
    public static float acos(float)
    public static float acosDeg(float)
    public static float asin(float)
    public static float asinDeg(float)
    public static float atan(float)
    public static float atan2(float,float)
    public static float atan2Deg(float,float)
    public static float atan2Deg360(float,float)
    public static float atanDeg(float)
    public static float atanUnchecked(double)
    public static double atanUncheckedDeg(double)
    public static int ceilPositive(float)
    public static double clamp(double,double,double)
    public static float clamp(float,float,float)
    public static long clamp(long,long,long)
    public static short clamp(short,short,short)
    public static float cos(float)
    public static int floor(float)
    public static int floorPositive(float)
    public static boolean isEqual(float,float)
    public static boolean isZero(float)
    public static boolean isZero(float,float)
    public static float lerp(float,float,float)
    public static float lerpAngle(float,float,float)
    public static float lerpAngleDeg(float,float,float)
    public static float log(float,float)
    public static float log2(float)
    public static float map(float,float,float,float,float)
    public static float norm(float,float,float)
    public static float random()
    public static float random(float)
    public static float random(float,float)
    public static int random(int)
    public static int random(int,int)
    public static long random(long)
    public static long random(long,long)
    public static boolean randomBoolean()
    public static boolean randomBoolean(float)
    public static int randomSign()
    public static float randomTriangular()
    public static float randomTriangular(float)
    public static float randomTriangular(float,float)
    public static float randomTriangular(float,float,float)
    public static int round(float)
    public static float sin(float)
    public static float tan(float)
    public static float tanDeg(float)
com.badlogic.gdx.math.Matrix3
com.badlogic.gdx.math.Matrix4:
    public static final int M00
    public static final int M01
    public static final int M02
    public static final int M03
    public static final int M10
    public static final int M11
    public static final int M12
    public static final int M13
    public static final int M20
    public static final int M21
    public static final int M22
    public static final int M23
    public static final int M30
    public static final int M31
    public static final int M32
    public static final int M33
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Matrix4)
    public void <init>(com.badlogic.gdx.math.Quaternion)
    public void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3)
    public void <init>(float[])
    public com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4,float)
    public com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4[])
    public com.badlogic.gdx.math.Matrix4 avg(com.badlogic.gdx.math.Matrix4[],float[])
    public com.badlogic.gdx.math.Matrix4 cpy()
    public float det()
    public float det3x3()
    public void extract4x3Matrix(float[])
    public com.badlogic.gdx.math.Quaternion getRotation(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion getRotation(com.badlogic.gdx.math.Quaternion,boolean)
    public com.badlogic.gdx.math.Vector3 getScale(com.badlogic.gdx.math.Vector3)
    public float getScaleX()
    public float getScaleXSquared()
    public float getScaleY()
    public float getScaleYSquared()
    public float getScaleZ()
    public float getScaleZSquared()
    public com.badlogic.gdx.math.Vector3 getTranslation(com.badlogic.gdx.math.Vector3)
    public float[] getValues()
    public boolean hasRotationOrScaling()
    public com.badlogic.gdx.math.Matrix4 inv()
    public com.badlogic.gdx.math.Matrix4 lerp(com.badlogic.gdx.math.Matrix4,float)
    public com.badlogic.gdx.math.Matrix4 mulLeft(com.badlogic.gdx.math.Matrix4)
    public static void mulVec(float[],float[])
    public static native void mulVec(float[],float[],int,int,int)
    public static void prj(float[],float[])
    public static void rot(float[],float[])
    public static native void rot(float[],float[],int,int,int)
    public com.badlogic.gdx.math.Matrix4 rotate(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 rotateRad(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 rotateRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 rotateTowardDirection(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 rotateTowardTarget(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 scale(float,float,float)
    public com.badlogic.gdx.math.Matrix4 scl(float)
    public com.badlogic.gdx.math.Matrix4 scl(float,float,float)
    public com.badlogic.gdx.math.Matrix4 scl(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 set(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setAsAffine(com.badlogic.gdx.math.Affine2)
    public com.badlogic.gdx.math.Matrix4 setAsAffine(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Matrix4 setFromEulerAngles(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setFromEulerAnglesRad(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToProjection(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToRotationRad(float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToRotationRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Matrix4 setToScaling(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToScaling(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToTranslation(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToTranslationAndScaling(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Matrix4 setToTranslationAndScaling(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setToWorld(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 setTranslation(float,float,float)
    public com.badlogic.gdx.math.Matrix4 setTranslation(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 toNormalMatrix()
    public com.badlogic.gdx.math.Matrix4 tra()
    public com.badlogic.gdx.math.Matrix4 translate(float,float,float)
    public com.badlogic.gdx.math.Matrix4 translate(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Matrix4 trn(float,float,float)
    public com.badlogic.gdx.math.Matrix4 trn(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.Octree$1
com.badlogic.gdx.math.Octree$Collider
com.badlogic.gdx.math.Octree$OctreeNode
com.badlogic.gdx.math.Octree$RayCastResult
com.badlogic.gdx.math.Octree
com.badlogic.gdx.math.Path
com.badlogic.gdx.math.Plane$PlaneSide
com.badlogic.gdx.math.Plane:
    private static final long serialVersionUID
    public void <init>()
    public void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public void <init>(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public float distance(com.badlogic.gdx.math.Vector3)
    public float getD()
    public com.badlogic.gdx.math.Vector3 getNormal()
    public boolean isFrontFacing(com.badlogic.gdx.math.Vector3)
    public void set(float,float,float,float)
    public void set(float,float,float,float,float,float)
    public void set(com.badlogic.gdx.math.Plane)
    public void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Plane$PlaneSide testPoint(float,float,float)
    public com.badlogic.gdx.math.Plane$PlaneSide testPoint(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.Polygon
com.badlogic.gdx.math.Polyline
com.badlogic.gdx.math.Quaternion:
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Quaternion)
    public void <init>(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion add(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion add(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion conjugate()
    public com.badlogic.gdx.math.Quaternion cpy()
    public float dot(float,float,float,float)
    public static final float dot(float,float,float,float,float,float,float,float)
    public float dot(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion exp(float)
    public float getAngle()
    public float getAngleAround(float,float,float)
    public float getAngleAround(com.badlogic.gdx.math.Vector3)
    public float getAngleAroundRad(float,float,float)
    public float getAngleAroundRad(com.badlogic.gdx.math.Vector3)
    public float getAngleRad()
    public float getAxisAngle(com.badlogic.gdx.math.Vector3)
    public float getAxisAngleRad(com.badlogic.gdx.math.Vector3)
    public int getGimbalPole()
    public float getPitch()
    public float getPitchRad()
    public float getRoll()
    public float getRollRad()
    public void getSwingTwist(float,float,float,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Quaternion)
    public void getSwingTwist(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Quaternion)
    public float getYaw()
    public float getYawRad()
    public boolean isIdentity()
    public boolean isIdentity(float)
    public float len()
    public static final float len(float,float,float,float)
    public float len2()
    public static final float len2(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion mul(float)
    public com.badlogic.gdx.math.Quaternion mul(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion mul(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion mulLeft(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion mulLeft(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion nor()
    public com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion setEulerAngles(float,float,float)
    public com.badlogic.gdx.math.Quaternion setEulerAnglesRad(float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxes(float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxes(boolean,float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxis(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxis(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion setFromAxisRad(float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromAxisRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Quaternion setFromCross(float,float,float,float,float,float)
    public com.badlogic.gdx.math.Quaternion setFromCross(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(boolean,com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Quaternion setFromMatrix(boolean,com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion,float)
    public com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion[])
    public com.badlogic.gdx.math.Quaternion slerp(com.badlogic.gdx.math.Quaternion[],float[])
    public void toMatrix(float[])
    public com.badlogic.gdx.math.Vector3 transform(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.RandomXS128:
    private static final double NORM_DOUBLE
    private static final double NORM_FLOAT
    public void <init>(long)
    public void <init>(long,long)
    public long getState(int)
com.badlogic.gdx.math.Rectangle:
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Rectangle)
    public float area()
    public boolean contains(float,float)
    public boolean contains(com.badlogic.gdx.math.Circle)
    public boolean contains(com.badlogic.gdx.math.Rectangle)
    public boolean contains(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Rectangle fitInside(com.badlogic.gdx.math.Rectangle)
    public com.badlogic.gdx.math.Rectangle fitOutside(com.badlogic.gdx.math.Rectangle)
    public com.badlogic.gdx.math.Rectangle fromString(java.lang.String)
    public float getAspectRatio()
    public com.badlogic.gdx.math.Vector2 getCenter(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 getPosition(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 getSize(com.badlogic.gdx.math.Vector2)
    public float getX()
    public float getY()
    public com.badlogic.gdx.math.Rectangle merge(float,float)
    public com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Rectangle)
    public com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Rectangle merge(com.badlogic.gdx.math.Vector2[])
    public boolean overlaps(com.badlogic.gdx.math.Rectangle)
    public float perimeter()
    public com.badlogic.gdx.math.Rectangle set(com.badlogic.gdx.math.Rectangle)
    public com.badlogic.gdx.math.Rectangle setCenter(float,float)
    public com.badlogic.gdx.math.Rectangle setCenter(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Rectangle setHeight(float)
    public com.badlogic.gdx.math.Rectangle setPosition(float,float)
    public com.badlogic.gdx.math.Rectangle setPosition(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Rectangle setSize(float)
    public com.badlogic.gdx.math.Rectangle setSize(float,float)
    public com.badlogic.gdx.math.Rectangle setWidth(float)
    public com.badlogic.gdx.math.Rectangle setX(float)
    public com.badlogic.gdx.math.Rectangle setY(float)
com.badlogic.gdx.math.Shape2D
com.badlogic.gdx.math.Vector2:
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 add(float,float)
    public com.badlogic.gdx.math.Vector2 add(com.badlogic.gdx.math.Vector2)
    public synthetic bridge com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector)
    public float angle()
    public float angle(com.badlogic.gdx.math.Vector2)
    public float angleDeg()
    public float angleDeg(com.badlogic.gdx.math.Vector2)
    public float angleRad()
    public float angleRad(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 clamp(float,float)
    public synthetic bridge com.badlogic.gdx.math.Vector clamp(float,float)
    public com.badlogic.gdx.math.Vector2 cpy()
    public synthetic bridge com.badlogic.gdx.math.Vector cpy()
    public float crs(float,float)
    public float crs(com.badlogic.gdx.math.Vector2)
    public float dot(float,float)
    public static float dot(float,float,float,float)
    public float dot(com.badlogic.gdx.math.Vector2)
    public synthetic bridge float dot(com.badlogic.gdx.math.Vector)
    public float dst(float,float)
    public static float dst(float,float,float,float)
    public float dst(com.badlogic.gdx.math.Vector2)
    public synthetic bridge float dst(com.badlogic.gdx.math.Vector)
    public float dst2(float,float)
    public static float dst2(float,float,float,float)
    public float dst2(com.badlogic.gdx.math.Vector2)
    public synthetic bridge float dst2(com.badlogic.gdx.math.Vector)
    public boolean epsilonEquals(float,float)
    public boolean epsilonEquals(float,float,float)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector2)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge boolean epsilonEquals(com.badlogic.gdx.math.Vector,float)
    public com.badlogic.gdx.math.Vector2 fromString(java.lang.String)
    public boolean hasOppositeDirection(com.badlogic.gdx.math.Vector2)
    public synthetic bridge boolean hasOppositeDirection(com.badlogic.gdx.math.Vector)
    public boolean hasSameDirection(com.badlogic.gdx.math.Vector2)
    public synthetic bridge boolean hasSameDirection(com.badlogic.gdx.math.Vector)
    public boolean idt(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 interpolate(com.badlogic.gdx.math.Vector2,float,com.badlogic.gdx.math.Interpolation)
    public synthetic bridge com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation)
    public boolean isCollinear(com.badlogic.gdx.math.Vector2)
    public boolean isCollinear(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector,float)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector2)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float)
    public boolean isOnLine(com.badlogic.gdx.math.Vector2)
    public boolean isOnLine(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector,float)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector2)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector,float)
    public boolean isUnit()
    public boolean isUnit(float)
    public boolean isZero()
    public boolean isZero(float)
    public float len()
    public static float len(float,float)
    public float len2()
    public static float len2(float,float)
    public com.badlogic.gdx.math.Vector2 lerp(com.badlogic.gdx.math.Vector2,float)
    public synthetic bridge com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float)
    public com.badlogic.gdx.math.Vector2 limit(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit(float)
    public com.badlogic.gdx.math.Vector2 limit2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit2(float)
    public com.badlogic.gdx.math.Vector2 mul(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Vector2 mulAdd(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 mulAdd(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2)
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector2 nor()
    public synthetic bridge com.badlogic.gdx.math.Vector nor()
    public com.badlogic.gdx.math.Vector2 rotate(float)
    public com.badlogic.gdx.math.Vector2 rotate90(int)
    public com.badlogic.gdx.math.Vector2 rotateAround(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 rotateAroundDeg(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 rotateAroundRad(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector2 rotateDeg(float)
    public com.badlogic.gdx.math.Vector2 rotateRad(float)
    public com.badlogic.gdx.math.Vector2 scl(float)
    public com.badlogic.gdx.math.Vector2 scl(float,float)
    public com.badlogic.gdx.math.Vector2 scl(com.badlogic.gdx.math.Vector2)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(float)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector2 setAngle(float)
    public com.badlogic.gdx.math.Vector2 setAngleDeg(float)
    public com.badlogic.gdx.math.Vector2 setAngleRad(float)
    public com.badlogic.gdx.math.Vector2 setLength(float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength(float)
    public com.badlogic.gdx.math.Vector2 setLength2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength2(float)
    public com.badlogic.gdx.math.Vector2 setToRandomDirection()
    public synthetic bridge com.badlogic.gdx.math.Vector setToRandomDirection()
    public com.badlogic.gdx.math.Vector2 setZero()
    public synthetic bridge com.badlogic.gdx.math.Vector setZero()
    public com.badlogic.gdx.math.Vector2 sub(float,float)
    public com.badlogic.gdx.math.Vector2 sub(com.badlogic.gdx.math.Vector2)
    public synthetic bridge com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector)
com.badlogic.gdx.math.Vector3:
    private static final long serialVersionUID
    public void <init>(com.badlogic.gdx.math.Vector2,float)
    public void <init>(com.badlogic.gdx.math.Vector3)
    public void <init>(float[])
    public com.badlogic.gdx.math.Vector3 add(float)
    public synthetic bridge com.badlogic.gdx.math.Vector add(com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector3 clamp(float,float)
    public synthetic bridge com.badlogic.gdx.math.Vector clamp(float,float)
    public com.badlogic.gdx.math.Vector3 cpy()
    public synthetic bridge com.badlogic.gdx.math.Vector cpy()
    public float dot(float,float,float)
    public static float dot(float,float,float,float,float,float)
    public synthetic bridge float dot(com.badlogic.gdx.math.Vector)
    public float dst(float,float,float)
    public static float dst(float,float,float,float,float,float)
    public float dst(com.badlogic.gdx.math.Vector3)
    public synthetic bridge float dst(com.badlogic.gdx.math.Vector)
    public float dst2(float,float,float)
    public static float dst2(float,float,float,float,float,float)
    public float dst2(com.badlogic.gdx.math.Vector3)
    public synthetic bridge float dst2(com.badlogic.gdx.math.Vector)
    public boolean epsilonEquals(float,float,float)
    public boolean epsilonEquals(float,float,float,float)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector3)
    public boolean epsilonEquals(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge boolean epsilonEquals(com.badlogic.gdx.math.Vector,float)
    public com.badlogic.gdx.math.Vector3 fromString(java.lang.String)
    public boolean hasOppositeDirection(com.badlogic.gdx.math.Vector3)
    public synthetic bridge boolean hasOppositeDirection(com.badlogic.gdx.math.Vector)
    public boolean hasSameDirection(com.badlogic.gdx.math.Vector3)
    public synthetic bridge boolean hasSameDirection(com.badlogic.gdx.math.Vector)
    public boolean idt(com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.Vector3 interpolate(com.badlogic.gdx.math.Vector3,float,com.badlogic.gdx.math.Interpolation)
    public synthetic bridge com.badlogic.gdx.math.Vector interpolate(com.badlogic.gdx.math.Vector,float,com.badlogic.gdx.math.Interpolation)
    public boolean isCollinear(com.badlogic.gdx.math.Vector3)
    public boolean isCollinear(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinear(com.badlogic.gdx.math.Vector,float)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector3)
    public boolean isCollinearOpposite(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isCollinearOpposite(com.badlogic.gdx.math.Vector,float)
    public boolean isOnLine(com.badlogic.gdx.math.Vector3)
    public boolean isOnLine(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isOnLine(com.badlogic.gdx.math.Vector,float)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector3)
    public boolean isPerpendicular(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector)
    public synthetic bridge boolean isPerpendicular(com.badlogic.gdx.math.Vector,float)
    public boolean isUnit()
    public boolean isUnit(float)
    public boolean isZero()
    public boolean isZero(float)
    public float len()
    public static float len(float,float,float)
    public static float len2(float,float,float)
    public com.badlogic.gdx.math.Vector3 lerp(com.badlogic.gdx.math.Vector3,float)
    public synthetic bridge com.badlogic.gdx.math.Vector lerp(com.badlogic.gdx.math.Vector,float)
    public com.badlogic.gdx.math.Vector3 limit(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit(float)
    public com.badlogic.gdx.math.Vector3 limit2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector limit2(float)
    public com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Quaternion)
    public com.badlogic.gdx.math.Vector3 mul4x3(float[])
    public com.badlogic.gdx.math.Vector3 mulAdd(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 mulAdd(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,float)
    public synthetic bridge com.badlogic.gdx.math.Vector mulAdd(com.badlogic.gdx.math.Vector,com.badlogic.gdx.math.Vector)
    public synthetic bridge com.badlogic.gdx.math.Vector nor()
    public com.badlogic.gdx.math.Vector3 rot(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 rotate(float,float,float,float)
    public com.badlogic.gdx.math.Vector3 rotate(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 rotateRad(float,float,float,float)
    public com.badlogic.gdx.math.Vector3 rotateRad(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 scl(float,float,float)
    public com.badlogic.gdx.math.Vector3 scl(com.badlogic.gdx.math.Vector3)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(float)
    public synthetic bridge com.badlogic.gdx.math.Vector scl(com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector2,float)
    public com.badlogic.gdx.math.Vector3 set(float[])
    public synthetic bridge com.badlogic.gdx.math.Vector set(com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector3 setFromSpherical(float,float)
    public com.badlogic.gdx.math.Vector3 setLength(float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength(float)
    public com.badlogic.gdx.math.Vector3 setLength2(float)
    public synthetic bridge com.badlogic.gdx.math.Vector setLength2(float)
    public com.badlogic.gdx.math.Vector3 setToRandomDirection()
    public synthetic bridge com.badlogic.gdx.math.Vector setToRandomDirection()
    public com.badlogic.gdx.math.Vector3 setZero()
    public synthetic bridge com.badlogic.gdx.math.Vector setZero()
    public com.badlogic.gdx.math.Vector3 slerp(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.Vector3 sub(float)
    public synthetic bridge com.badlogic.gdx.math.Vector sub(com.badlogic.gdx.math.Vector)
    public com.badlogic.gdx.math.Vector3 traMul(com.badlogic.gdx.math.Matrix3)
    public com.badlogic.gdx.math.Vector3 traMul(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 unrotate(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 untransform(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.math.Vector4
com.badlogic.gdx.math.Vector
com.badlogic.gdx.math.WindowedMean
com.badlogic.gdx.math.collision.BoundingBox
com.badlogic.gdx.math.collision.OrientedBoundingBox
com.badlogic.gdx.math.collision.Ray:
    private static final long serialVersionUID
    public com.badlogic.gdx.math.collision.Ray cpy()
    public com.badlogic.gdx.math.Vector3 getEndPoint(com.badlogic.gdx.math.Vector3,float)
    public com.badlogic.gdx.math.collision.Ray mul(com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.collision.Ray set(float,float,float,float,float,float)
    public com.badlogic.gdx.math.collision.Ray set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3)
    public com.badlogic.gdx.math.collision.Ray set(com.badlogic.gdx.math.collision.Ray)
com.badlogic.gdx.math.collision.Segment
com.badlogic.gdx.math.collision.Sphere
com.badlogic.gdx.net.HttpParametersUtils
com.badlogic.gdx.net.HttpRequestBuilder
com.badlogic.gdx.net.HttpRequestHeader
com.badlogic.gdx.net.HttpResponseHeader
com.badlogic.gdx.net.HttpStatus:
    public static final int SC_ACCEPTED
    public static final int SC_BAD_GATEWAY
    public static final int SC_BAD_REQUEST
    public static final int SC_CONFLICT
    public static final int SC_CONTINUE
    public static final int SC_CREATED
    public static final int SC_EXPECTATION_FAILED
    public static final int SC_FAILED_DEPENDENCY
    public static final int SC_FORBIDDEN
    public static final int SC_GATEWAY_TIMEOUT
    public static final int SC_GONE
    public static final int SC_HTTP_VERSION_NOT_SUPPORTED
    public static final int SC_INSUFFICIENT_SPACE_ON_RESOURCE
    public static final int SC_INSUFFICIENT_STORAGE
    public static final int SC_INTERNAL_SERVER_ERROR
    public static final int SC_LENGTH_REQUIRED
    public static final int SC_LOCKED
    public static final int SC_METHOD_FAILURE
    public static final int SC_METHOD_NOT_ALLOWED
    public static final int SC_MOVED_PERMANENTLY
    public static final int SC_MOVED_TEMPORARILY
    public static final int SC_MULTIPLE_CHOICES
    public static final int SC_MULTI_STATUS
    public static final int SC_NON_AUTHORITATIVE_INFORMATION
    public static final int SC_NOT_ACCEPTABLE
    public static final int SC_NOT_FOUND
    public static final int SC_NOT_IMPLEMENTED
    public static final int SC_NOT_MODIFIED
    public static final int SC_NO_CONTENT
    public static final int SC_OK
    public static final int SC_PARTIAL_CONTENT
    public static final int SC_PAYMENT_REQUIRED
    public static final int SC_PRECONDITION_FAILED
    public static final int SC_PROCESSING
    public static final int SC_PROXY_AUTHENTICATION_REQUIRED
    public static final int SC_REQUESTED_RANGE_NOT_SATISFIABLE
    public static final int SC_REQUEST_TIMEOUT
    public static final int SC_REQUEST_TOO_LONG
    public static final int SC_REQUEST_URI_TOO_LONG
    public static final int SC_RESET_CONTENT
    public static final int SC_SEE_OTHER
    public static final int SC_SERVICE_UNAVAILABLE
    public static final int SC_SWITCHING_PROTOCOLS
    public static final int SC_TEMPORARY_REDIRECT
    public static final int SC_UNAUTHORIZED
    public static final int SC_UNPROCESSABLE_ENTITY
    public static final int SC_UNSUPPORTED_MEDIA_TYPE
    public static final int SC_USE_PROXY
    public int getStatusCode()
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse:
    public java.lang.String getHeader(java.lang.String)
    public java.util.Map getHeaders()
    public byte[] getResult()
    public java.lang.String getResultAsString()
    public com.badlogic.gdx.net.HttpStatus getStatus()
com.badlogic.gdx.net.NetJavaImpl:
    public void <init>()
    public void cancelHttpRequest(com.badlogic.gdx.Net$HttpRequest)
    private void cancelTask(com.badlogic.gdx.Net$HttpRequest)
com.badlogic.gdx.net.NetJavaServerSocketImpl
com.badlogic.gdx.net.NetJavaSocketImpl
com.badlogic.gdx.net.ServerSocket
com.badlogic.gdx.net.ServerSocketHints
com.badlogic.gdx.net.Socket
com.badlogic.gdx.net.SocketHints
com.badlogic.gdx.scenes.scene2d.Action:
    public com.badlogic.gdx.scenes.scene2d.Actor getActor()
    public com.badlogic.gdx.utils.Pool getPool()
    public com.badlogic.gdx.scenes.scene2d.Actor getTarget()
    public void setPool(com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.scenes.scene2d.Actor:
    private java.lang.Object userObject
    public void addAction(com.badlogic.gdx.scenes.scene2d.Action)
    public boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)
    public boolean ancestorsVisible()
    public boolean clipBegin()
    public com.badlogic.gdx.scenes.scene2d.Actor debug()
    public com.badlogic.gdx.scenes.scene2d.Actor firstAscendant(java.lang.Class)
    public com.badlogic.gdx.utils.Array getActions()
    public com.badlogic.gdx.utils.DelayedRemovalArray getCaptureListeners()
    public com.badlogic.gdx.utils.DelayedRemovalArray getListeners()
    public java.lang.String getName()
    public float getOriginX()
    public float getOriginY()
    public float getRight()
    public float getRotation()
    public float getScaleX()
    public float getScaleY()
    public float getTop()
    public java.lang.Object getUserObject()
    public float getX(int)
    public float getY(int)
    public int getZIndex()
    public boolean hasActions()
    public boolean hasParent()
    public boolean hasScrollFocus()
    public boolean isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor)
    public boolean isTouchFocusListener()
    public boolean isTouchFocusTarget()
    public boolean isTouchable()
    public com.badlogic.gdx.math.Vector2 localToActorCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 localToScreenCoordinates(com.badlogic.gdx.math.Vector2)
    public void moveBy(float,float)
    public void removeAction(com.badlogic.gdx.scenes.scene2d.Action)
    public boolean removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)
    public boolean removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)
    public void rotateBy(float)
    protected void rotationChanged()
    public void scaleBy(float)
    public void scaleBy(float,float)
    protected void scaleChanged()
    public com.badlogic.gdx.math.Vector2 screenToLocalCoordinates(com.badlogic.gdx.math.Vector2)
    public void setColor(float,float,float,float)
    public void setColor(com.badlogic.gdx.graphics.Color)
    public void setHeight(float)
    public void setName(java.lang.String)
    public void setOrigin(float,float)
    public void setOrigin(int)
    public void setOriginX(float)
    public void setOriginY(float)
    public void setPosition(float,float,int)
    public void setRotation(float)
    public void setScale(float)
    public void setScale(float,float)
    public void setScaleX(float)
    public void setScaleY(float)
    public void setUserObject(java.lang.Object)
    public void setVisible(boolean)
    public void setWidth(float)
    public void setX(float)
    public void setX(float,int)
    public void setY(float)
    public void setY(float,int)
    public boolean setZIndex(int)
    public void sizeBy(float)
    public void sizeBy(float,float)
    public void toBack()
    public void toFront()
com.badlogic.gdx.scenes.scene2d.Event:
    public void cancel()
    public boolean isCapture()
    public void setBubbles(boolean)
    public void stop()
com.badlogic.gdx.scenes.scene2d.Group:
    public void addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
    public void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)
    public void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
    public void clear(boolean)
    public void clearChildren()
    public com.badlogic.gdx.scenes.scene2d.Actor findActor(java.lang.String)
    public com.badlogic.gdx.scenes.scene2d.Actor getChild(int)
    public com.badlogic.gdx.math.Rectangle getCullingArea()
    public boolean hasChildren()
    public com.badlogic.gdx.math.Vector2 localToDescendantCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2)
    public void setCullingArea(com.badlogic.gdx.math.Rectangle)
    public boolean swapActor(int,int)
    public boolean swapActor(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.scenes.scene2d.InputEvent:
    public float getStageX()
    public float getStageY()
    public boolean isTouchFocusCancel()
    public void setTouchFocus(boolean)
com.badlogic.gdx.scenes.scene2d.Stage:
    private boolean debugInvisible
    public void <init>()
    public void act()
    public void addAction(com.badlogic.gdx.scenes.scene2d.Action)
    public boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)
    public boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener)
    public com.badlogic.gdx.graphics.g2d.Batch getBatch()
    public com.badlogic.gdx.graphics.Camera getCamera()
    public com.badlogic.gdx.scenes.scene2d.Actor getScrollFocus()
    public com.badlogic.gdx.utils.viewport.Viewport getViewport()
    public boolean isDebugAll()
    public boolean removeCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener)
    public boolean removeListener(com.badlogic.gdx.scenes.scene2d.EventListener)
    public void removeTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int)
    public void setActionsRequestRendering(boolean)
    public void setDebugAll(boolean)
    public void setDebugInvisible(boolean)
    public void setDebugParentUnderMouse(boolean)
    public void setDebugTableUnderMouse(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug)
    public void setDebugTableUnderMouse(boolean)
    public void setDebugUnderMouse(boolean)
    public void setRoot(com.badlogic.gdx.scenes.scene2d.Group)
    public void setViewport(com.badlogic.gdx.utils.viewport.Viewport)
    public com.badlogic.gdx.math.Vector2 stageToScreenCoordinates(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.scenes.scene2d.actions.Actions
com.badlogic.gdx.scenes.scene2d.actions.AddAction
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction
com.badlogic.gdx.scenes.scene2d.actions.AfterAction
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction
com.badlogic.gdx.scenes.scene2d.actions.ColorAction
com.badlogic.gdx.scenes.scene2d.actions.CountdownEventAction
com.badlogic.gdx.scenes.scene2d.actions.DelayAction
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction
com.badlogic.gdx.scenes.scene2d.actions.EventAction$1
com.badlogic.gdx.scenes.scene2d.actions.EventAction
com.badlogic.gdx.scenes.scene2d.actions.FloatAction
com.badlogic.gdx.scenes.scene2d.actions.IntAction
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction
com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction
com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction
com.badlogic.gdx.scenes.scene2d.actions.TouchableAction
com.badlogic.gdx.scenes.scene2d.actions.VisibleAction
com.badlogic.gdx.scenes.scene2d.ui.Button$1
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable checked
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable checkedDown
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable checkedFocused
    public float checkedOffsetX
    public float checkedOffsetY
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable checkedOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable disabled
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable down
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable focused
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable over
    public float pressedOffsetX
    public float pressedOffsetY
    public float unpressedOffsetX
    public float unpressedOffsetY
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable up
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.Button
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup
com.badlogic.gdx.scenes.scene2d.ui.Cell:
    public com.badlogic.gdx.scenes.scene2d.ui.Cell align(int)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell bottom()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell center()
    void clear()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell clearActor()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell colspan(int)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell expand()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell expand(int,int)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell expand(boolean,boolean)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell expandX()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell expandY()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell fill()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell fill(float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell fill(boolean)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell fill(boolean,boolean)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell fillX()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell fillY()
    public com.badlogic.gdx.scenes.scene2d.Actor getActor()
    public float getActorHeight()
    public float getActorWidth()
    public float getActorX()
    public float getActorY()
    public java.lang.Integer getAlign()
    public java.lang.Integer getColspan()
    public int getColumn()
    public float getComputedPadBottom()
    public float getComputedPadLeft()
    public float getComputedPadRight()
    public float getComputedPadTop()
    public java.lang.Integer getExpandX()
    public java.lang.Integer getExpandY()
    public java.lang.Float getFillX()
    public java.lang.Float getFillY()
    public float getMaxHeight()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getMaxHeightValue()
    public float getMaxWidth()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getMaxWidthValue()
    public float getMinHeight()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getMinHeightValue()
    public float getMinWidth()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getMinWidthValue()
    public float getPadBottom()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadBottomValue()
    public float getPadLeft()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadLeftValue()
    public float getPadRight()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadRightValue()
    public float getPadTop()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadTopValue()
    public float getPadX()
    public float getPadY()
    public float getPrefHeight()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPrefHeightValue()
    public float getPrefWidth()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPrefWidthValue()
    public int getRow()
    public float getSpaceBottom()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceBottomValue()
    public float getSpaceLeft()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceLeftValue()
    public float getSpaceRight()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceRightValue()
    public float getSpaceTop()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getSpaceTopValue()
    public com.badlogic.gdx.scenes.scene2d.ui.Table getTable()
    public java.lang.Boolean getUniformX()
    public java.lang.Boolean getUniformY()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell grow()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell growX()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell growY()
    public boolean hasActor()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell height(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell height(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public boolean isEndRow()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell left()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell maxHeight(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell maxHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell maxWidth(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell maxWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
    void merge(com.badlogic.gdx.scenes.scene2d.ui.Cell)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell minHeight(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell minHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell minSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell minWidth(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell minWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell pad(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell pad(float,float,float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell pad(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell padBottom(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell padLeft(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell padRight(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell padTop(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell prefHeight(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell prefHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell prefWidth(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell prefWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell right()
    public void row()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell setActor(com.badlogic.gdx.scenes.scene2d.Actor)
    public void setActorBounds(float,float,float,float)
    public void setActorHeight(float)
    public void setActorWidth(float)
    public void setActorX(float)
    public void setActorY(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell size(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell size(float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell size(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell size(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell space(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell space(float,float,float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell space(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell space(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell spaceBottom(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell spaceBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell spaceLeft(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell spaceLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell spaceRight(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell spaceRight(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell spaceTop(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell spaceTop(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell top()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell uniform()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell uniform(boolean)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell uniform(boolean,boolean)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell uniformX()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell uniformY()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell width(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell width(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOff
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOffDisabled
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOn
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOnDisabled
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOnOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable checkboxOver
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.scenes.scene2d.ui.CheckBox
com.badlogic.gdx.scenes.scene2d.ui.Container:
    public void <init>(com.badlogic.gdx.scenes.scene2d.Actor)
    public void addActorAfter(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
    public void addActorAt(int,com.badlogic.gdx.scenes.scene2d.Actor)
    public void addActorBefore(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor)
    public com.badlogic.gdx.scenes.scene2d.ui.Container background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
    public com.badlogic.gdx.scenes.scene2d.ui.Container bottom()
    public com.badlogic.gdx.scenes.scene2d.ui.Container center()
    public com.badlogic.gdx.scenes.scene2d.ui.Container clip()
    public com.badlogic.gdx.scenes.scene2d.ui.Container clip(boolean)
    public com.badlogic.gdx.scenes.scene2d.ui.Container fill()
    public com.badlogic.gdx.scenes.scene2d.ui.Container fill(float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container fill(boolean)
    public com.badlogic.gdx.scenes.scene2d.ui.Container fill(boolean,boolean)
    public com.badlogic.gdx.scenes.scene2d.ui.Container fillX()
    public com.badlogic.gdx.scenes.scene2d.ui.Container fillY()
    public com.badlogic.gdx.scenes.scene2d.Actor getActor()
    public int getAlign()
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable getBackground()
    public boolean getClip()
    public float getFillX()
    public float getFillY()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getMaxHeightValue()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getMaxWidthValue()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getMinHeightValue()
    public float getPadBottom()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadBottomValue()
    public float getPadLeft()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadLeftValue()
    public float getPadRight()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadRightValue()
    public float getPadTop()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadTopValue()
    public float getPadX()
    public float getPadY()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPrefHeightValue()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPrefWidthValue()
    public com.badlogic.gdx.scenes.scene2d.ui.Container height(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container height(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container left()
    public com.badlogic.gdx.scenes.scene2d.ui.Container maxHeight(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container maxHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container maxSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container maxWidth(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container maxWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container minHeight(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container minHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container minSize(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container minSize(float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container minSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container minSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container minWidth(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container minWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container pad(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container pad(float,float,float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container pad(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container padBottom(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container padLeft(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container padRight(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container padTop(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container prefHeight(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container prefHeight(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container prefSize(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container prefWidth(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container prefWidth(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor)
    public com.badlogic.gdx.scenes.scene2d.ui.Container right()
    public void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
    public void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable,boolean)
    public void setClip(boolean)
    public void setCullingArea(com.badlogic.gdx.math.Rectangle)
    public void setRound(boolean)
    public com.badlogic.gdx.scenes.scene2d.ui.Container size(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container size(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Container top()
    public com.badlogic.gdx.scenes.scene2d.ui.Container width(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Container width(com.badlogic.gdx.scenes.scene2d.ui.Value)
com.badlogic.gdx.scenes.scene2d.ui.Dialog$1
com.badlogic.gdx.scenes.scene2d.ui.Dialog$2
com.badlogic.gdx.scenes.scene2d.ui.Dialog$3
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4$1
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4
com.badlogic.gdx.scenes.scene2d.ui.Dialog
com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup
com.badlogic.gdx.scenes.scene2d.ui.Image
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageChecked
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageCheckedDown
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageCheckedOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDisabled
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDown
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageUp
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.ImageButton
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageChecked
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageCheckedDown
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageCheckedOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDisabled
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageDown
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable imageUp
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont)
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public com.badlogic.gdx.graphics.g2d.BitmapFont font
    public com.badlogic.gdx.graphics.Color fontColor
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color)
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle)
com.badlogic.gdx.scenes.scene2d.ui.Label
com.badlogic.gdx.scenes.scene2d.ui.List$1
com.badlogic.gdx.scenes.scene2d.ui.List$2
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable down
    public com.badlogic.gdx.graphics.g2d.BitmapFont font
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable over
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable selection
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle)
com.badlogic.gdx.scenes.scene2d.ui.List
com.badlogic.gdx.scenes.scene2d.ui.ParticleEffectActor
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledBackground
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledKnob
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledKnobAfter
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable disabledKnobBefore
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable knob
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable knobAfter
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable knobBefore
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.ProgressBar$ProgressBarStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.ProgressBar
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable corner
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable hScroll
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable hScrollKnob
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable vScroll
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable vScrollKnob
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$2
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$1
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$2
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$3
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane$4
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxScrollPane
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundDisabled
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundOpen
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundOver
    public com.badlogic.gdx.graphics.Color disabledFontColor
    public com.badlogic.gdx.graphics.g2d.BitmapFont font
    public com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle listStyle
    public com.badlogic.gdx.graphics.Color overFontColor
    public com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle scrollStyle
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle,com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle)
com.badlogic.gdx.scenes.scene2d.ui.SelectBox
com.badlogic.gdx.scenes.scene2d.ui.Skin$1:
    private static final java.lang.String parentFieldName
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable:
    public com.badlogic.gdx.graphics.Color color
    public java.lang.String name
com.badlogic.gdx.scenes.scene2d.ui.Skin:
    public void <init>(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas)
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureAtlas)
    public void add(java.lang.String,java.lang.Object)
    public java.lang.String find(java.lang.Object)
    private static com.badlogic.gdx.utils.reflect.Method findMethod(java.lang.Class,java.lang.String)
    public com.badlogic.gdx.utils.ObjectMap getAll(java.lang.Class)
    public com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas()
    public com.badlogic.gdx.graphics.Color getColor(java.lang.String)
    public com.badlogic.gdx.graphics.g2d.BitmapFont getFont(java.lang.String)
    public com.badlogic.gdx.utils.ObjectMap getJsonClassTags()
    public com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable getTiledDrawable(java.lang.String)
    public boolean has(java.lang.String,java.lang.Class)
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,float,float,float,float)
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String)
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,float,float,float,float)
    public void remove(java.lang.String,java.lang.Class)
    public void setEnabled(com.badlogic.gdx.scenes.scene2d.Actor,boolean)
    public void setScale(float)
com.badlogic.gdx.scenes.scene2d.ui.Slider$1
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundDown
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable backgroundOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable knobAfterDown
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable knobAfterOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable knobBeforeDown
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable knobBeforeOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable knobDown
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable knobOver
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.Slider
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable handle
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.SplitPane
com.badlogic.gdx.scenes.scene2d.ui.Stack
com.badlogic.gdx.scenes.scene2d.ui.Table:
    public com.badlogic.gdx.scenes.scene2d.ui.Cell add()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell add(com.badlogic.gdx.scenes.scene2d.Actor)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence,java.lang.String)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence,java.lang.String,com.badlogic.gdx.graphics.Color)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell add(java.lang.CharSequence,java.lang.String,java.lang.String)
    public varargs com.badlogic.gdx.scenes.scene2d.ui.Table add(com.badlogic.gdx.scenes.scene2d.Actor[])
    public com.badlogic.gdx.scenes.scene2d.ui.Table align(int)
    public com.badlogic.gdx.scenes.scene2d.ui.Table background(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
    public com.badlogic.gdx.scenes.scene2d.ui.Table background(java.lang.String)
    public com.badlogic.gdx.scenes.scene2d.ui.Table bottom()
    public com.badlogic.gdx.scenes.scene2d.ui.Table center()
    public com.badlogic.gdx.scenes.scene2d.ui.Table clip()
    public com.badlogic.gdx.scenes.scene2d.ui.Table clip(boolean)
    public com.badlogic.gdx.scenes.scene2d.ui.Cell columnDefaults(int)
    public synthetic bridge com.badlogic.gdx.scenes.scene2d.Actor debug()
    public com.badlogic.gdx.scenes.scene2d.ui.Table debug()
    public com.badlogic.gdx.scenes.scene2d.ui.Table debugActor()
    public com.badlogic.gdx.scenes.scene2d.ui.Table debugCell()
    public com.badlogic.gdx.scenes.scene2d.ui.Table debugTable()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell defaults()
    public int getAlign()
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable getBackground()
    public com.badlogic.gdx.utils.Array getCells()
    public boolean getClip()
    public float getColumnMinWidth(int)
    public float getColumnPrefWidth(int)
    public float getColumnWidth(int)
    public int getColumns()
    public float getPadBottom()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadBottomValue()
    public float getPadLeft()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadLeftValue()
    public float getPadRight()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadRightValue()
    public float getPadTop()
    public com.badlogic.gdx.scenes.scene2d.ui.Value getPadTopValue()
    public float getPadX()
    public float getPadY()
    public int getRow(float)
    public float getRowHeight(int)
    public float getRowMinHeight(int)
    public float getRowPrefHeight(int)
    public int getRows()
    public com.badlogic.gdx.scenes.scene2d.ui.Skin getSkin()
    public com.badlogic.gdx.scenes.scene2d.ui.Table$Debug getTableDebug()
    public com.badlogic.gdx.scenes.scene2d.ui.Table left()
    public com.badlogic.gdx.scenes.scene2d.ui.Table pad(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Table pad(float,float,float,float)
    public com.badlogic.gdx.scenes.scene2d.ui.Table pad(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Table pad(com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value,com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Table padBottom(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Table padBottom(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Table padLeft(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Table padLeft(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Table padRight(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Table padRight(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public com.badlogic.gdx.scenes.scene2d.ui.Table padTop(float)
    public com.badlogic.gdx.scenes.scene2d.ui.Table padTop(com.badlogic.gdx.scenes.scene2d.ui.Value)
    public boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor)
    public void reset()
    public com.badlogic.gdx.scenes.scene2d.ui.Table right()
    public com.badlogic.gdx.scenes.scene2d.ui.Cell row()
    public void setBackground(com.badlogic.gdx.scenes.scene2d.utils.Drawable)
    public void setBackground(java.lang.String)
    public void setClip(boolean)
    public void setRound(boolean)
    public void setSkin(com.badlogic.gdx.scenes.scene2d.ui.Skin)
    public varargs com.badlogic.gdx.scenes.scene2d.ui.Cell stack(com.badlogic.gdx.scenes.scene2d.Actor[])
    public com.badlogic.gdx.scenes.scene2d.ui.Table top()
com.badlogic.gdx.scenes.scene2d.ui.TextArea:
    public void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)
    public void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
    public int getCursorLine()
    public int getFirstLineShowing()
    public int getLinesShowing()
    public void setPrefRows(float)
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle:
    public com.badlogic.gdx.graphics.Color checkedDownFontColor
    public com.badlogic.gdx.graphics.Color checkedFocusedFontColor
    public com.badlogic.gdx.graphics.Color checkedFontColor
    public com.badlogic.gdx.graphics.Color checkedOverFontColor
    public com.badlogic.gdx.graphics.Color disabledFontColor
    public com.badlogic.gdx.graphics.Color downFontColor
    public com.badlogic.gdx.graphics.Color focusedFontColor
    public com.badlogic.gdx.graphics.g2d.BitmapFont font
    public com.badlogic.gdx.graphics.Color fontColor
    public com.badlogic.gdx.graphics.Color overFontColor
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.g2d.BitmapFont)
com.badlogic.gdx.scenes.scene2d.ui.TextButton
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter
com.badlogic.gdx.scenes.scene2d.ui.TextField:
    protected static final char BACKSPACE
    protected static final char BULLET
    protected static final char CARRIAGE_RETURN
    protected static final char DELETE
    protected static final char NEWLINE
    protected static final char TAB
    public void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin)
    public void <init>(java.lang.String,com.badlogic.gdx.scenes.scene2d.ui.Skin,java.lang.String)
    public void appendText(java.lang.String)
    public int getAlignment()
    public com.badlogic.gdx.scenes.scene2d.InputListener getDefaultInputListener()
    public boolean getFocusTraversal()
    public int getMaxLength()
    public java.lang.String getMessageText()
    public com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard getOnscreenKeyboard()
    public boolean getProgrammaticChangeEvents()
    public int getSelectionStart()
    public com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter getTextFieldFilter()
    public boolean isPasswordMode()
    public void setBlinkTime(float)
    public void setClipboard(com.badlogic.gdx.utils.Clipboard)
    public void setDisabled(boolean)
    public void setFocusTraversal(boolean)
    public void setMessageText(java.lang.String)
    public void setOnlyFontChars(boolean)
    public void setPasswordCharacter(char)
    public void setPasswordMode(boolean)
    public void setTextFieldFilter(com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle label
    public float wrapWidth
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.TextTooltip$TextTooltipStyle)
com.badlogic.gdx.scenes.scene2d.ui.TextTooltip
com.badlogic.gdx.scenes.scene2d.ui.Tooltip$1
com.badlogic.gdx.scenes.scene2d.ui.Tooltip
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$1
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$2
com.badlogic.gdx.scenes.scene2d.ui.TooltipManager
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable knob
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.Touchpad
com.badlogic.gdx.scenes.scene2d.ui.Tree$1
com.badlogic.gdx.scenes.scene2d.ui.Tree$2
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable minus
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable minusOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable over
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable plus
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable plusOver
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable selection
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle)
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
com.badlogic.gdx.scenes.scene2d.ui.Tree
com.badlogic.gdx.scenes.scene2d.ui.Value$10
com.badlogic.gdx.scenes.scene2d.ui.Value$7
com.badlogic.gdx.scenes.scene2d.ui.Value$8
com.badlogic.gdx.scenes.scene2d.ui.Value$9
com.badlogic.gdx.scenes.scene2d.ui.Value:
    public float get()
    public static com.badlogic.gdx.scenes.scene2d.ui.Value percentHeight(float)
    public static com.badlogic.gdx.scenes.scene2d.ui.Value percentHeight(float,com.badlogic.gdx.scenes.scene2d.Actor)
    public static com.badlogic.gdx.scenes.scene2d.ui.Value percentWidth(float)
    public static com.badlogic.gdx.scenes.scene2d.ui.Value percentWidth(float,com.badlogic.gdx.scenes.scene2d.Actor)
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup
com.badlogic.gdx.scenes.scene2d.ui.Widget:
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float)
    public boolean needsLayout()
    public void pack()
    public void setFillParent(boolean)
    public void setLayoutEnabled(boolean)
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup:
    public varargs void <init>(com.badlogic.gdx.scenes.scene2d.Actor[])
    public float getMinHeight()
    public float getMinWidth()
    public float getPrefHeight()
    public float getPrefWidth()
    public boolean needsLayout()
    public void pack()
    public void setFillParent(boolean)
    private void setLayoutEnabled(com.badlogic.gdx.scenes.scene2d.Group,boolean)
    public void setLayoutEnabled(boolean)
com.badlogic.gdx.scenes.scene2d.ui.Window$1
com.badlogic.gdx.scenes.scene2d.ui.Window$2
com.badlogic.gdx.scenes.scene2d.ui.Window$3
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable stageBackground
    public com.badlogic.gdx.graphics.g2d.BitmapFont titleFont
    public void <init>(com.badlogic.gdx.graphics.g2d.BitmapFont,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.scenes.scene2d.utils.Drawable)
    public void <init>(com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle)
com.badlogic.gdx.scenes.scene2d.ui.Window
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$2
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener
com.badlogic.gdx.scenes.scene2d.utils.ArraySelection
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable:
    public void setMinSize(float,float)
    public void setPadding(float,float,float,float)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener:
    public void <init>(int)
    public void cancel()
    public int getButton()
    public int getPressedButton()
    public int getPressedPointer()
    public float getTapSquareSize()
    public float getTouchDownX()
    public float getTouchDownY()
    public boolean inTapSquare()
    public boolean isOver()
    public boolean isPressed()
    public boolean isVisualPressed()
    public void setButton(int)
    public void setTapCount(int)
    public void setTapCountInterval(float)
    public void setTapSquareSize(float)
com.badlogic.gdx.scenes.scene2d.utils.Cullable
com.badlogic.gdx.scenes.scene2d.utils.Disableable
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop
com.badlogic.gdx.scenes.scene2d.utils.DragListener
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$1
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent:
    public com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor()
    public com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type getType()
    public boolean isFocused()
com.badlogic.gdx.scenes.scene2d.utils.FocusListener
com.badlogic.gdx.scenes.scene2d.utils.Layout:
    public abstract void invalidate()
    public abstract void layout()
    public abstract void pack()
    public abstract void setFillParent(boolean)
    public abstract void setLayoutEnabled(boolean)
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable:
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack:
    public void <init>()
    public static void calculateScissors(com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle)
    public static com.badlogic.gdx.math.Rectangle getViewport()
    public static com.badlogic.gdx.math.Rectangle peekScissors()
com.badlogic.gdx.scenes.scene2d.utils.Selection
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable:
    public void <init>(com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
    public com.badlogic.gdx.graphics.g2d.Sprite getSprite()
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable:
    public void <init>(com.badlogic.gdx.graphics.Texture)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable:
    public void <init>(com.badlogic.gdx.graphics.g2d.TextureRegion)
    public void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float)
    public int getAlign()
    public com.badlogic.gdx.graphics.Color getColor()
    public float getScale()
    public void setAlign(int)
    public void setScale(float)
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable
com.badlogic.gdx.scenes.scene2d.utils.UIUtils:
    private void <init>()
    public static boolean alt()
    public static boolean alt(int)
    public static boolean ctrl(int)
    public static boolean left()
    public static boolean left(int)
    public static boolean middle()
    public static boolean middle(int)
    public static boolean right()
    public static boolean right(int)
    public static boolean shift(int)
com.badlogic.gdx.utils.Align:
    public static final int bottom
    public static final int bottomLeft
    public static final int bottomRight
    public static final int center
    public static final int left
    public static final int right
    public static final int top
    public static final int topLeft
    public static final int topRight
    public void <init>()
    public static java.lang.String toString(int)
com.badlogic.gdx.utils.Array$ArrayIterator:
    public void <init>(com.badlogic.gdx.utils.Array)
    public void reset()
com.badlogic.gdx.utils.Array:
    private com.badlogic.gdx.utils.Predicate$PredicateIterable predicateIterable
    public void add(java.lang.Object,java.lang.Object)
    public void add(java.lang.Object,java.lang.Object,java.lang.Object)
    public void add(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
    public varargs void addAll(java.lang.Object[])
    public boolean containsAll(com.badlogic.gdx.utils.Array,boolean)
    public boolean containsAny(com.badlogic.gdx.utils.Array,boolean)
    public boolean equalsIdentity(java.lang.Object)
    public void insertRange(int,int)
    public int lastIndexOf(java.lang.Object,boolean)
    public boolean notEmpty()
    public static com.badlogic.gdx.utils.Array of(java.lang.Class)
    public static com.badlogic.gdx.utils.Array of(boolean,int,java.lang.Class)
    public java.lang.Object random()
    public boolean removeAll(com.badlogic.gdx.utils.Array,boolean)
    public void reverse()
    public java.lang.Iterable select(com.badlogic.gdx.utils.Predicate)
    public java.lang.Object selectRanked(java.util.Comparator,int)
    public int selectRankedIndex(java.util.Comparator,int)
    public void set(int,java.lang.Object)
    public java.lang.Object[] setSize(int)
    public java.lang.Object[] shrink()
    public void shuffle()
    public void swap(int,int)
    public java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.ArrayMap$Entries:
    public void reset()
com.badlogic.gdx.utils.ArrayMap$Keys
com.badlogic.gdx.utils.ArrayMap$Values
com.badlogic.gdx.utils.ArrayMap:
    private transient com.badlogic.gdx.utils.ArrayMap$Keys keys1
    private transient com.badlogic.gdx.utils.ArrayMap$Keys keys2
    private transient com.badlogic.gdx.utils.ArrayMap$Values values1
    private transient com.badlogic.gdx.utils.ArrayMap$Values values2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.ArrayMap)
    public void <init>(java.lang.Class,java.lang.Class)
    public void <init>(boolean,int,java.lang.Class,java.lang.Class)
    public void clear()
    public void clear(int)
    public boolean containsKey(java.lang.Object)
    public boolean containsValue(java.lang.Object,boolean)
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public java.lang.Object firstKey()
    public java.lang.Object firstValue()
    public java.lang.Object getKey(java.lang.Object,boolean)
    public java.lang.Object getKeyAt(int)
    public java.lang.Object getValueAt(int)
    public int indexOfValue(java.lang.Object,boolean)
    public void insert(int,java.lang.Object,java.lang.Object)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.ArrayMap$Keys keys()
    public boolean notEmpty()
    public java.lang.Object peekKey()
    public java.lang.Object peekValue()
    public int put(java.lang.Object,java.lang.Object,int)
    public void putAll(com.badlogic.gdx.utils.ArrayMap)
    public void putAll(com.badlogic.gdx.utils.ArrayMap,int,int)
    public java.lang.Object removeKey(java.lang.Object)
    public boolean removeValue(java.lang.Object,boolean)
    public void reverse()
    public void setKey(int,java.lang.Object)
    public void setValue(int,java.lang.Object)
    public void shrink()
    public void shuffle()
    public void truncate(int)
    public com.badlogic.gdx.utils.ArrayMap$Values values()
com.badlogic.gdx.utils.AtomicQueue
com.badlogic.gdx.utils.Base64Coder$CharMap
com.badlogic.gdx.utils.Base64Coder
com.badlogic.gdx.utils.BaseJsonReader
com.badlogic.gdx.utils.BinaryHeap$Node
com.badlogic.gdx.utils.BinaryHeap
com.badlogic.gdx.utils.Bits
com.badlogic.gdx.utils.BooleanArray
com.badlogic.gdx.utils.BufferUtils:
    private void <init>()
    public static native void clear(java.nio.ByteBuffer,int)
    public static void copy(char[],int,int,java.nio.Buffer)
    public static void copy(char[],int,java.nio.Buffer,int)
    public static void copy(double[],int,int,java.nio.Buffer)
    public static void copy(double[],int,java.nio.Buffer,int)
    public static void copy(float[],int,int,java.nio.Buffer)
    public static void copy(float[],int,java.nio.Buffer,int)
    public static void copy(int[],int,int,java.nio.Buffer)
    public static void copy(int[],int,java.nio.Buffer,int)
    public static void copy(long[],int,int,java.nio.Buffer)
    public static void copy(long[],int,java.nio.Buffer,int)
    public static void copy(short[],int,java.nio.Buffer,int)
    private static native void copyJni(char[],int,java.nio.Buffer,int,int)
    private static native void copyJni(double[],int,java.nio.Buffer,int,int)
    private static native void copyJni(float[],int,java.nio.Buffer,int,int)
    private static native void copyJni(int[],int,java.nio.Buffer,int,int)
    private static native void copyJni(long[],int,java.nio.Buffer,int,int)
    private static native void copyJni(short[],int,java.nio.Buffer,int,int)
    private static native long find(java.nio.Buffer,int,int,java.nio.Buffer,int,int)
    private static native long find(java.nio.Buffer,int,int,java.nio.Buffer,int,int,float)
    private static native long find(java.nio.Buffer,int,int,float[],int,int)
    private static native long find(java.nio.Buffer,int,int,float[],int,int,float)
    private static native long find(float[],int,int,java.nio.Buffer,int,int)
    private static native long find(float[],int,int,java.nio.Buffer,int,int,float)
    private static native long find(float[],int,int,float[],int,int)
    private static native long find(float[],int,int,float[],int,int,float)
    public static long findFloats(java.nio.Buffer,int,java.nio.Buffer,int)
    public static long findFloats(java.nio.Buffer,int,java.nio.Buffer,int,float)
    public static long findFloats(java.nio.Buffer,int,float[],int)
    public static long findFloats(java.nio.Buffer,int,float[],int,float)
    public static long findFloats(float[],int,java.nio.Buffer,int)
    public static long findFloats(float[],int,java.nio.Buffer,int,float)
    public static long findFloats(float[],int,float[],int)
    public static long findFloats(float[],int,float[],int,float)
    public static int getAllocatedBytesUnsafe()
    private static native long getBufferAddress(java.nio.Buffer)
    public static long getUnsafeBufferAddress(java.nio.Buffer)
    public static java.nio.CharBuffer newCharBuffer(int)
    public static java.nio.DoubleBuffer newDoubleBuffer(int)
    public static java.nio.LongBuffer newLongBuffer(int)
    public static java.nio.ShortBuffer newShortBuffer(int)
    public static java.nio.ByteBuffer newUnsafeByteBuffer(java.nio.ByteBuffer)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix3)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix3,int)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix4)
    public static void transform(java.nio.Buffer,int,int,int,com.badlogic.gdx.math.Matrix4,int)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix3)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix3,int)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix4)
    public static void transform(float[],int,int,int,com.badlogic.gdx.math.Matrix4,int)
    private static native void transformV2M3Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV2M3Jni(float[],int,int,float[],int)
    private static native void transformV2M4Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV2M4Jni(float[],int,int,float[],int)
    private static native void transformV3M3Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV3M3Jni(float[],int,int,float[],int)
    private static native void transformV3M4Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV3M4Jni(float[],int,int,float[],int)
    private static native void transformV4M4Jni(java.nio.Buffer,int,int,float[],int)
    private static native void transformV4M4Jni(float[],int,int,float[],int)
com.badlogic.gdx.utils.ByteArray
com.badlogic.gdx.utils.CharArray
com.badlogic.gdx.utils.Collections:
    public void <init>()
com.badlogic.gdx.utils.ComparableTimSort:
    private static final boolean DEBUG
    private static final int INITIAL_TMP_STORAGE_LENGTH
    private static final int MIN_GALLOP
    private static final int MIN_MERGE
    private void <init>(java.lang.Object[])
    static void sort(java.lang.Object[])
    static void sort(java.lang.Object[],int,int)
com.badlogic.gdx.utils.DataBuffer
com.badlogic.gdx.utils.DataInput
com.badlogic.gdx.utils.DataOutput
com.badlogic.gdx.utils.DelayedRemovalArray:
    public void <init>()
    public void <init>(com.badlogic.gdx.utils.Array)
    public void <init>(java.lang.Class)
    public void <init>(boolean,int)
    public void <init>(boolean,int,java.lang.Class)
    public void <init>(boolean,java.lang.Object[],int,int)
    public void <init>(java.lang.Object[])
    public void insert(int,java.lang.Object)
    public void insertRange(int,int)
    public void reverse()
    public void set(int,java.lang.Object)
    public java.lang.Object[] setSize(int)
    public void shuffle()
    public void swap(int,int)
    public static varargs com.badlogic.gdx.utils.DelayedRemovalArray with(java.lang.Object[])
com.badlogic.gdx.utils.FloatArray:
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.FloatArray)
    public void <init>(boolean,float[],int,int)
    public void <init>(float[])
    public void add(float,float)
    public void add(float,float,float)
    public void add(float,float,float,float)
    public varargs void addAll(float[])
    public boolean contains(float)
    public boolean equals(java.lang.Object,float)
    public void incr(float)
    public void incr(int,float)
    public int indexOf(float)
    public void insert(int,float)
    public void insertRange(int,int)
    public boolean isEmpty()
    public int lastIndexOf(float)
    public void mul(float)
    public void mul(int,float)
    public float peek()
    public float pop()
    public float random()
    public boolean removeAll(com.badlogic.gdx.utils.FloatArray)
    public float removeIndex(int)
    public boolean removeValue(float)
    public void reverse()
    public void set(int,float)
    public float[] setSize(int)
    public float[] shrink()
    public void shuffle()
    public void sort()
    public void swap(int,int)
    public float[] toArray()
    public java.lang.String toString(java.lang.String)
    public static varargs com.badlogic.gdx.utils.FloatArray with(float[])
com.badlogic.gdx.utils.FlushablePool
com.badlogic.gdx.utils.GdxNativesLoader:
    public void <init>()
com.badlogic.gdx.utils.GdxRuntimeException:
    private static final long serialVersionUID
com.badlogic.gdx.utils.I18NBundle:
    private static final java.lang.String DEFAULT_ENCODING
    public static com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle)
    public static com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.lang.String)
    public static com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.util.Locale,java.lang.String)
    public void debug(java.lang.String)
    public varargs java.lang.String format(java.lang.String,java.lang.Object[])
    public static boolean getExceptionOnMissingKey()
    public static boolean getSimpleFormatter()
    public java.util.Set keys()
    public static void setSimpleFormatter(boolean)
com.badlogic.gdx.utils.IdentityMap
com.badlogic.gdx.utils.IntArray:
    public void <init>(com.badlogic.gdx.utils.IntArray)
    public void <init>(boolean,int[],int,int)
    public void <init>(int[])
    public void add(int,int,int)
    public void add(int,int,int,int)
    public void addAll(com.badlogic.gdx.utils.IntArray)
    public void addAll(com.badlogic.gdx.utils.IntArray,int,int)
    public varargs void addAll(int[])
    public void addAll(int[],int,int)
    public boolean contains(int)
    public int first()
    public void incr(int)
    public void incr(int,int)
    public int indexOf(int)
    public void insertRange(int,int)
    public boolean isEmpty()
    public int lastIndexOf(int)
    public void mul(int)
    public void mul(int,int)
    public boolean notEmpty()
    public int random()
    public boolean removeAll(com.badlogic.gdx.utils.IntArray)
    public int removeIndex(int)
    public void removeRange(int,int)
    public boolean removeValue(int)
    public void reverse()
    public int[] setSize(int)
    public int[] shrink()
    public void shuffle()
    public void sort()
    public void swap(int,int)
    public java.lang.String toString(java.lang.String)
    public void truncate(int)
    public static varargs com.badlogic.gdx.utils.IntArray with(int[])
com.badlogic.gdx.utils.IntFloatMap$Entries
com.badlogic.gdx.utils.IntFloatMap$Entry
com.badlogic.gdx.utils.IntFloatMap$Keys
com.badlogic.gdx.utils.IntFloatMap$MapIterator
com.badlogic.gdx.utils.IntFloatMap$Values
com.badlogic.gdx.utils.IntFloatMap
com.badlogic.gdx.utils.IntIntMap$Keys
com.badlogic.gdx.utils.IntIntMap$MapIterator:
    private static final int INDEX_ILLEGAL
    static final int INDEX_ZERO
com.badlogic.gdx.utils.IntIntMap$Values
com.badlogic.gdx.utils.IntIntMap:
    private transient com.badlogic.gdx.utils.IntIntMap$Keys keys1
    private transient com.badlogic.gdx.utils.IntIntMap$Keys keys2
    private transient com.badlogic.gdx.utils.IntIntMap$Values values1
    private transient com.badlogic.gdx.utils.IntIntMap$Values values2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.IntIntMap)
    public void clear()
    public void clear(int)
    public boolean containsValue(int)
    public void ensureCapacity(int)
    public int findKey(int,int)
    public int getAndIncrement(int,int,int)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.IntIntMap$Keys keys()
    public boolean notEmpty()
    public int put(int,int,int)
    public void putAll(com.badlogic.gdx.utils.IntIntMap)
    public void shrink(int)
    public com.badlogic.gdx.utils.IntIntMap$Values values()
com.badlogic.gdx.utils.IntMap$Keys:
    public synthetic bridge void remove()
    public com.badlogic.gdx.utils.IntArray toArray(com.badlogic.gdx.utils.IntArray)
com.badlogic.gdx.utils.IntMap$MapIterator:
    private static final int INDEX_ILLEGAL
    static final int INDEX_ZERO
com.badlogic.gdx.utils.IntMap:
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.IntMap)
    public void clear(int)
    public boolean containsValue(java.lang.Object,boolean)
    public boolean equalsIdentity(java.lang.Object)
    public int findKey(java.lang.Object,boolean,int)
    public boolean isEmpty()
    public boolean notEmpty()
    public void shrink(int)
com.badlogic.gdx.utils.IntSet$IntSetIterator
com.badlogic.gdx.utils.IntSet:
    private transient com.badlogic.gdx.utils.IntSet$IntSetIterator iterator1
    private transient com.badlogic.gdx.utils.IntSet$IntSetIterator iterator2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.IntSet)
    public void addAll(com.badlogic.gdx.utils.IntArray)
    public void addAll(com.badlogic.gdx.utils.IntArray,int,int)
    public void addAll(com.badlogic.gdx.utils.IntSet)
    public varargs void addAll(int[])
    public void addAll(int[],int,int)
    public void clear()
    public void clear(int)
    public void ensureCapacity(int)
    public int first()
    public boolean isEmpty()
    public com.badlogic.gdx.utils.IntSet$IntSetIterator iterator()
    public boolean notEmpty()
    public void shrink(int)
    public static varargs com.badlogic.gdx.utils.IntSet with(int[])
com.badlogic.gdx.utils.Json$ReadOnlySerializer:
    public abstract java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class)
    public void write(com.badlogic.gdx.utils.Json,java.lang.Object,java.lang.Class)
com.badlogic.gdx.utils.Json$Serializable:
    public abstract void write(com.badlogic.gdx.utils.Json)
com.badlogic.gdx.utils.Json$Serializer:
    public abstract void write(com.badlogic.gdx.utils.Json,java.lang.Object,java.lang.Class)
com.badlogic.gdx.utils.Json:
    private static final boolean debug
    private boolean quoteLongValues
    private com.badlogic.gdx.utils.JsonWriter writer
    public void <init>(com.badlogic.gdx.utils.JsonWriter$OutputType)
    private java.lang.String convertToString(java.lang.Object)
    public java.lang.Object fromJson(java.lang.Class,java.io.InputStream)
    public java.lang.Object fromJson(java.lang.Class,java.io.Reader)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,com.badlogic.gdx.files.FileHandle)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.InputStream)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.io.Reader)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,java.lang.String)
    public java.lang.Object fromJson(java.lang.Class,java.lang.Class,char[],int,int)
    public java.lang.Object fromJson(java.lang.Class,java.lang.String)
    public java.lang.Object fromJson(java.lang.Class,char[],int,int)
    private java.lang.Object[] getDefaultValues(java.lang.Class)
    public boolean getIgnoreUnknownFields()
    public com.badlogic.gdx.utils.Json$Serializer getSerializer(java.lang.Class)
    public java.lang.String getTag(java.lang.Class)
    public com.badlogic.gdx.utils.JsonWriter getWriter()
    public java.lang.String prettyPrint(java.lang.Object)
    public java.lang.String prettyPrint(java.lang.Object,int)
    public java.lang.String prettyPrint(java.lang.Object,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
    public java.lang.String prettyPrint(java.lang.String)
    public java.lang.String prettyPrint(java.lang.String,int)
    public java.lang.String prettyPrint(java.lang.String,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
    public void readField(java.lang.Object,com.badlogic.gdx.utils.reflect.Field,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,java.lang.String,com.badlogic.gdx.utils.JsonValue)
    public void readField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public java.lang.Object readValue(java.lang.Class,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue)
    public java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue)
    public void setDefaultSerializer(com.badlogic.gdx.utils.Json$Serializer)
    public void setDeprecated(java.lang.Class,java.lang.String,boolean)
    public void setElementType(java.lang.Class,java.lang.String,java.lang.Class)
    public void setEnumNames(boolean)
    public void setIgnoreDeprecated(boolean)
    public void setIgnoreUnknownFields(boolean)
    public void setOutputType(com.badlogic.gdx.utils.JsonWriter$OutputType)
    public void setQuoteLongValues(boolean)
    public void setReadDeprecated(boolean)
    public void setSortFields(boolean)
    public void setWriter(java.io.Writer)
    public java.lang.String toJson(java.lang.Object)
    public java.lang.String toJson(java.lang.Object,java.lang.Class)
    public java.lang.String toJson(java.lang.Object,java.lang.Class,java.lang.Class)
    public void toJson(java.lang.Object,com.badlogic.gdx.files.FileHandle)
    public void toJson(java.lang.Object,java.io.Writer)
    public void toJson(java.lang.Object,java.lang.Class,com.badlogic.gdx.files.FileHandle)
    public void toJson(java.lang.Object,java.lang.Class,java.io.Writer)
    public void toJson(java.lang.Object,java.lang.Class,java.lang.Class,com.badlogic.gdx.files.FileHandle)
    public void toJson(java.lang.Object,java.lang.Class,java.lang.Class,java.io.Writer)
    public void writeArrayEnd()
    public void writeArrayStart()
    public void writeArrayStart(java.lang.String)
    public void writeField(java.lang.Object,java.lang.String)
    public void writeField(java.lang.Object,java.lang.String,java.lang.Class)
    public void writeField(java.lang.Object,java.lang.String,java.lang.String)
    public void writeField(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class)
    public void writeFields(java.lang.Object)
    public void writeObjectEnd()
    public void writeObjectStart()
    public void writeObjectStart(java.lang.Class,java.lang.Class)
    public void writeObjectStart(java.lang.String)
    public void writeObjectStart(java.lang.String,java.lang.Class,java.lang.Class)
    public void writeType(java.lang.Class)
    public void writeValue(java.lang.Object)
    public void writeValue(java.lang.Object,java.lang.Class)
    public void writeValue(java.lang.Object,java.lang.Class,java.lang.Class)
    public void writeValue(java.lang.String,java.lang.Object)
    public void writeValue(java.lang.String,java.lang.Object,java.lang.Class)
    public void writeValue(java.lang.String,java.lang.Object,java.lang.Class,java.lang.Class)
com.badlogic.gdx.utils.JsonReader:
    static final int json_en_array
    static final int json_en_main
    static final int json_en_object
    static final int json_error
    static final int json_first_final
    static final int json_start
    public boolean isStopped()
    public com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream)
    public void stop()
com.badlogic.gdx.utils.JsonValue:
    public void <init>(double)
    public void <init>(long)
    public void addChild(com.badlogic.gdx.utils.JsonValue)
    public void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue)
    public boolean[] asBooleanArray()
    public byte[] asByteArray()
    public char asChar()
    public char[] asCharArray()
    public double[] asDoubleArray()
    public float[] asFloatArray()
    public int[] asIntArray()
    public long[] asLongArray()
    public short[] asShortArray()
    public java.lang.String[] asStringArray()
    public com.badlogic.gdx.utils.JsonValue child()
    public com.badlogic.gdx.utils.JsonValue get(int)
    public boolean getBoolean(int)
    public boolean getBoolean(java.lang.String)
    public boolean getBoolean(java.lang.String,boolean)
    public byte getByte(int)
    public byte getByte(java.lang.String)
    public byte getByte(java.lang.String,byte)
    public char getChar(int)
    public char getChar(java.lang.String)
    public char getChar(java.lang.String,char)
    public double getDouble(int)
    public double getDouble(java.lang.String)
    public double getDouble(java.lang.String,double)
    public float getFloat(int)
    public float getFloat(java.lang.String)
    public float getFloat(java.lang.String,float)
    public int getInt(int)
    public int getInt(java.lang.String)
    public int getInt(java.lang.String,int)
    public long getLong(int)
    public long getLong(java.lang.String)
    public long getLong(java.lang.String,long)
    public short getShort(int)
    public short getShort(java.lang.String)
    public short getShort(java.lang.String,short)
    public java.lang.String getString(int)
    public java.lang.String getString(java.lang.String)
    public boolean hasChild(java.lang.String)
    private static void indent(int,java.io.Writer)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.JsonValue$JsonIterator iterator(java.lang.String)
    private void json(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,com.badlogic.gdx.utils.JsonWriter$OutputType)
    public com.badlogic.gdx.utils.JsonValue next()
    public boolean notEmpty()
    public com.badlogic.gdx.utils.JsonValue parent()
    private void prettyPrint(com.badlogic.gdx.utils.JsonValue,java.io.Writer,int,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings)
    public void prettyPrint(com.badlogic.gdx.utils.JsonWriter$OutputType,java.io.Writer)
    public com.badlogic.gdx.utils.JsonValue prev()
    public com.badlogic.gdx.utils.JsonValue remove(int)
    public com.badlogic.gdx.utils.JsonValue remove(java.lang.String)
    public void remove()
    public com.badlogic.gdx.utils.JsonValue require(int)
    public com.badlogic.gdx.utils.JsonValue require(java.lang.String)
    public void setNext(com.badlogic.gdx.utils.JsonValue)
    public void setPrev(com.badlogic.gdx.utils.JsonValue)
    public void setType(com.badlogic.gdx.utils.JsonValue$ValueType)
    public int size()
    public java.lang.String toJson(com.badlogic.gdx.utils.JsonWriter$OutputType)
    public com.badlogic.gdx.utils.JsonValue$ValueType type()
com.badlogic.gdx.utils.JsonWriter$JsonObject
com.badlogic.gdx.utils.JsonWriter
com.badlogic.gdx.utils.LittleEndianInputStream
com.badlogic.gdx.utils.Logger
com.badlogic.gdx.utils.LongArray
com.badlogic.gdx.utils.LongMap$Keys
com.badlogic.gdx.utils.LongMap$MapIterator:
    private static final int INDEX_ILLEGAL
    static final int INDEX_ZERO
com.badlogic.gdx.utils.LongMap$Values:
    public com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.utils.LongMap:
    private transient com.badlogic.gdx.utils.LongMap$Keys keys1
    private transient com.badlogic.gdx.utils.LongMap$Keys keys2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.LongMap)
    public void clear()
    public void clear(int)
    public boolean containsKey(long)
    public boolean containsValue(java.lang.Object,boolean)
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public long findKey(java.lang.Object,boolean,long)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.LongMap$Keys keys()
    public boolean notEmpty()
    public void putAll(com.badlogic.gdx.utils.LongMap)
    public void shrink(int)
com.badlogic.gdx.utils.LongQueue
com.badlogic.gdx.utils.Null
com.badlogic.gdx.utils.NumberUtils:
    public void <init>()
    public static long doubleToLongBits(double)
    public static float intBitsToFloat(int)
    public static double longBitsToDouble(long)
com.badlogic.gdx.utils.ObjectFloatMap$Keys
com.badlogic.gdx.utils.ObjectFloatMap$Values
com.badlogic.gdx.utils.ObjectFloatMap:
    transient com.badlogic.gdx.utils.ObjectFloatMap$Keys keys1
    transient com.badlogic.gdx.utils.ObjectFloatMap$Keys keys2
    transient com.badlogic.gdx.utils.ObjectFloatMap$Values values1
    transient com.badlogic.gdx.utils.ObjectFloatMap$Values values2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.ObjectFloatMap)
    public void clear()
    public void clear(int)
    public boolean containsValue(float)
    public boolean containsValue(float,float)
    public void ensureCapacity(int)
    public java.lang.Object findKey(float)
    public java.lang.Object findKey(float,float)
    public float getAndIncrement(java.lang.Object,float,float)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.ObjectFloatMap$Keys keys()
    public boolean notEmpty()
    public float put(java.lang.Object,float,float)
    public void putAll(com.badlogic.gdx.utils.ObjectFloatMap)
    public float remove(java.lang.Object,float)
    public void shrink(int)
    public java.lang.String toString(java.lang.String)
    public com.badlogic.gdx.utils.ObjectFloatMap$Values values()
com.badlogic.gdx.utils.ObjectIntMap$Keys
com.badlogic.gdx.utils.ObjectIntMap$Values
com.badlogic.gdx.utils.ObjectIntMap:
    transient com.badlogic.gdx.utils.ObjectIntMap$Keys keys1
    transient com.badlogic.gdx.utils.ObjectIntMap$Keys keys2
    transient com.badlogic.gdx.utils.ObjectIntMap$Values values1
    transient com.badlogic.gdx.utils.ObjectIntMap$Values values2
    public void <init>(int)
    public void <init>(com.badlogic.gdx.utils.ObjectIntMap)
    public void clear()
    public void clear(int)
    public boolean containsValue(int)
    public void ensureCapacity(int)
    public java.lang.Object findKey(int)
    public int getAndIncrement(java.lang.Object,int,int)
    public boolean isEmpty()
    public com.badlogic.gdx.utils.ObjectIntMap$Keys keys()
    public boolean notEmpty()
    public int put(java.lang.Object,int,int)
    public void putAll(com.badlogic.gdx.utils.ObjectIntMap)
    public int remove(java.lang.Object,int)
    public void shrink(int)
    public java.lang.String toString(java.lang.String)
    public com.badlogic.gdx.utils.ObjectIntMap$Values values()
com.badlogic.gdx.utils.ObjectLongMap$Entries
com.badlogic.gdx.utils.ObjectLongMap$Entry
com.badlogic.gdx.utils.ObjectLongMap$Keys
com.badlogic.gdx.utils.ObjectLongMap$MapIterator
com.badlogic.gdx.utils.ObjectLongMap$Values
com.badlogic.gdx.utils.ObjectLongMap
com.badlogic.gdx.utils.ObjectMap$Keys:
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.ObjectMap$Values:
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.ObjectMap:
    public void <init>(com.badlogic.gdx.utils.ObjectMap)
    public void clear(int)
    public boolean containsValue(java.lang.Object,boolean)
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public java.lang.Object findKey(java.lang.Object,boolean)
    public boolean isEmpty()
    public boolean notEmpty()
    public void putAll(com.badlogic.gdx.utils.ObjectMap)
    public void shrink(int)
    public java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator:
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.ObjectSet:
    public void <init>(com.badlogic.gdx.utils.ObjectSet)
    public void addAll(com.badlogic.gdx.utils.Array)
    public void addAll(com.badlogic.gdx.utils.Array,int,int)
    public void addAll(com.badlogic.gdx.utils.ObjectSet)
    public varargs boolean addAll(java.lang.Object[])
    public boolean addAll(java.lang.Object[],int,int)
    public java.lang.Object first()
    public java.lang.Object get(java.lang.Object)
    public boolean isEmpty()
    public boolean notEmpty()
    public boolean remove(java.lang.Object)
    public void shrink(int)
    public static varargs com.badlogic.gdx.utils.ObjectSet with(java.lang.Object[])
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys:
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues:
    public com.badlogic.gdx.utils.Array toArray()
    public com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array)
com.badlogic.gdx.utils.OrderedMap:
    public void <init>(int,float)
    public void <init>(com.badlogic.gdx.utils.OrderedMap)
    public boolean alter(java.lang.Object,java.lang.Object)
    public boolean alterIndex(int,java.lang.Object)
    public void clear(int)
    public com.badlogic.gdx.utils.Array orderedKeys()
    public void putAll(com.badlogic.gdx.utils.OrderedMap)
com.badlogic.gdx.utils.OrderedSet$OrderedSetIterator
com.badlogic.gdx.utils.OrderedSet
com.badlogic.gdx.utils.PauseableThread
com.badlogic.gdx.utils.PerformanceCounter
com.badlogic.gdx.utils.PerformanceCounters
com.badlogic.gdx.utils.Pool:
    public void <init>(int)
    public void clear()
    public void fill(int)
    public int getFree()
com.badlogic.gdx.utils.PooledLinkedList$1
com.badlogic.gdx.utils.PooledLinkedList$Item
com.badlogic.gdx.utils.PooledLinkedList
com.badlogic.gdx.utils.Pools:
    private void <init>()
    public static void freeAll(com.badlogic.gdx.utils.Array)
    public static void set(java.lang.Class,com.badlogic.gdx.utils.Pool)
com.badlogic.gdx.utils.Predicate$PredicateIterable
com.badlogic.gdx.utils.Predicate$PredicateIterator
com.badlogic.gdx.utils.Predicate
com.badlogic.gdx.utils.PropertiesUtils:
    private static final int CONTINUE
    private static final int IGNORE
    private static final int KEY_DONE
    private static final java.lang.String LINE_SEPARATOR
    private static final int NONE
    private static final int SLASH
    private static final int UNICODE
    private void <init>()
    private static void dumpString(com.badlogic.gdx.utils.StringBuilder,java.lang.String,boolean,boolean)
    public static void store(com.badlogic.gdx.utils.ObjectMap,java.io.Writer,java.lang.String)
    private static void storeImpl(com.badlogic.gdx.utils.ObjectMap,java.io.Writer,java.lang.String,boolean)
    private static void writeComment(java.io.Writer,java.lang.String)
com.badlogic.gdx.utils.QuadTreeFloat$1
com.badlogic.gdx.utils.QuadTreeFloat
com.badlogic.gdx.utils.Queue$QueueIterator:
    public void <init>(com.badlogic.gdx.utils.Queue)
    public void reset()
com.badlogic.gdx.utils.Queue:
    public void <init>(int,java.lang.Class)
    public void addFirst(java.lang.Object)
    public void clear()
    public void ensureCapacity(int)
    public boolean equalsIdentity(java.lang.Object)
    public java.lang.Object first()
    public int indexOf(java.lang.Object,boolean)
    public boolean isEmpty()
    public java.lang.Object last()
    public boolean notEmpty()
    public java.lang.Object removeFirst()
    public java.lang.Object removeLast()
    public boolean removeValue(java.lang.Object,boolean)
    public java.lang.String toString(java.lang.String)
com.badlogic.gdx.utils.QuickSelect
com.badlogic.gdx.utils.ReflectionPool:
    public void <init>(java.lang.Class)
    public void <init>(java.lang.Class,int)
com.badlogic.gdx.utils.Scaling$1
com.badlogic.gdx.utils.Scaling$2
com.badlogic.gdx.utils.Scaling$3
com.badlogic.gdx.utils.Scaling$4
com.badlogic.gdx.utils.Scaling$5
com.badlogic.gdx.utils.Scaling$6
com.badlogic.gdx.utils.Scaling$7
com.badlogic.gdx.utils.Scaling$8
com.badlogic.gdx.utils.Scaling$9
com.badlogic.gdx.utils.Scaling
com.badlogic.gdx.utils.ScreenUtils
com.badlogic.gdx.utils.Select
com.badlogic.gdx.utils.SerializationException:
    public void <init>()
    public boolean causedBy(java.lang.Class)
    private boolean causedBy(java.lang.Throwable,java.lang.Class)
com.badlogic.gdx.utils.SharedLibraryLoadRuntimeException:
    private static final long serialVersionUID
com.badlogic.gdx.utils.SharedLibraryLoader:
    public void <init>(java.lang.String)
    private boolean canExecute(java.io.File)
    private boolean canWrite(java.io.File)
    public java.io.File extractFile(java.lang.String,java.lang.String)
    public void extractFileTo(java.lang.String,java.io.File)
    private java.io.File getExtractedFile(java.lang.String,java.lang.String)
    static java.lang.String randomUUID()
com.badlogic.gdx.utils.ShortArray
com.badlogic.gdx.utils.SnapshotArray:
    public void <init>()
    public void <init>(com.badlogic.gdx.utils.Array)
    public void <init>(boolean,int)
    public void <init>(boolean,java.lang.Object[],int,int)
    public void <init>(java.lang.Object[])
    public void insertRange(int,int)
    public boolean removeAll(com.badlogic.gdx.utils.Array,boolean)
    public void reverse()
    public void set(int,java.lang.Object)
    public java.lang.Object[] setSize(int)
    public void shuffle()
    public void swap(int,int)
    public static varargs com.badlogic.gdx.utils.SnapshotArray with(java.lang.Object[])
com.badlogic.gdx.utils.Sort:
    public void sort(com.badlogic.gdx.utils.Array)
    public void sort(com.badlogic.gdx.utils.Array,java.util.Comparator)
    public void sort(java.lang.Object[])
    public void sort(java.lang.Object[],java.util.Comparator)
com.badlogic.gdx.utils.SortedIntList$Iterator
com.badlogic.gdx.utils.SortedIntList$Node
com.badlogic.gdx.utils.SortedIntList$NodePool
com.badlogic.gdx.utils.SortedIntList
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream:
    public byte[] getBuffer()
com.badlogic.gdx.utils.StreamUtils:
    public static final int DEFAULT_BUFFER_SIZE
    public void <init>()
    public static void copyStream(java.io.InputStream,java.io.OutputStream,int)
    public static void copyStream(java.io.InputStream,java.nio.ByteBuffer,int)
    public static byte[] copyStreamToByteArray(java.io.InputStream)
    public static java.lang.String copyStreamToString(java.io.InputStream)
    public static java.lang.String copyStreamToString(java.io.InputStream,int)
    public static java.lang.String copyStreamToString(java.io.InputStream,int,java.lang.String)
com.badlogic.gdx.utils.StringBuilder:
    static final int INITIAL_CAPACITY
    public void <init>(com.badlogic.gdx.utils.StringBuilder)
    public void <init>(java.lang.CharSequence)
    public com.badlogic.gdx.utils.StringBuilder append(com.badlogic.gdx.utils.StringBuilder,int,int)
    public com.badlogic.gdx.utils.StringBuilder append(java.lang.String,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder appendCodePoint(int)
    public com.badlogic.gdx.utils.StringBuilder appendLine(java.lang.String)
    public int capacity()
    public void clear()
    public int codePointAt(int)
    public int codePointBefore(int)
    public int codePointCount(int,int)
    public boolean contains(java.lang.String)
    public boolean containsIgnoreCase(java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder delete(int,int)
    final void delete0(int,int)
    public com.badlogic.gdx.utils.StringBuilder deleteCharAt(int)
    final void deleteCharAt0(int)
    public void ensureCapacity(int)
    public boolean equalsIgnoreCase(com.badlogic.gdx.utils.StringBuilder)
    public boolean equalsIgnoreCase(java.lang.String)
    public void getChars(int,int,char[],int)
    final char[] getValue()
    public int indexOf(java.lang.String)
    public int indexOf(java.lang.String,int)
    public int indexOfIgnoreCase(java.lang.String,int)
    public com.badlogic.gdx.utils.StringBuilder insert(int,char)
    public com.badlogic.gdx.utils.StringBuilder insert(int,double)
    public com.badlogic.gdx.utils.StringBuilder insert(int,float)
    public com.badlogic.gdx.utils.StringBuilder insert(int,int)
    public com.badlogic.gdx.utils.StringBuilder insert(int,long)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.CharSequence)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.CharSequence,int,int)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.Object)
    public com.badlogic.gdx.utils.StringBuilder insert(int,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder insert(int,boolean)
    public com.badlogic.gdx.utils.StringBuilder insert(int,char[])
    public com.badlogic.gdx.utils.StringBuilder insert(int,char[],int,int)
    final void insert0(int,char)
    final void insert0(int,java.lang.CharSequence,int,int)
    final void insert0(int,char[])
    final void insert0(int,char[],int,int)
    public boolean isEmpty()
    public int lastIndexOf(java.lang.String)
    public int lastIndexOf(java.lang.String,int)
    public boolean notEmpty()
    public int offsetByCodePoints(int,int)
    public com.badlogic.gdx.utils.StringBuilder replace(int,int,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder replace(java.lang.String,java.lang.String)
    public com.badlogic.gdx.utils.StringBuilder reverse()
    final void reverse0()
    public void setCharAt(int,char)
    public java.lang.String substring(int)
    public java.lang.String toStringAndClear()
    public void trimToSize()
com.badlogic.gdx.utils.TextFormatter:
    public varargs java.lang.String format(java.lang.String,java.lang.Object[])
    private java.lang.String replaceEscapeChars(java.lang.String)
    private varargs java.lang.String simpleFormat(java.lang.String,java.lang.Object[])
com.badlogic.gdx.utils.TimSort:
    private static final boolean DEBUG
    private static final int INITIAL_TMP_STORAGE_LENGTH
    private static final int MIN_GALLOP
    private static final int MIN_MERGE
    private void <init>(java.lang.Object[],java.util.Comparator)
    static void sort(java.lang.Object[],int,int,java.util.Comparator)
    static void sort(java.lang.Object[],java.util.Comparator)
com.badlogic.gdx.utils.TimeUtils:
    private static final long nanosPerMilli
    public void <init>()
    public static long millisToNanos(long)
    public static long nanosToMillis(long)
    public static long timeSinceMillis(long)
    public static long timeSinceNanos(long)
com.badlogic.gdx.utils.Timer$Task:
    public synchronized long getExecuteTimeMillis()
    public abstract void run()
com.badlogic.gdx.utils.Timer:
    public synchronized void clear()
    public synchronized boolean isEmpty()
    public static com.badlogic.gdx.utils.Timer$Task post(com.badlogic.gdx.utils.Timer$Task)
    public com.badlogic.gdx.utils.Timer$Task postTask(com.badlogic.gdx.utils.Timer$Task)
    public static com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float)
    public static com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float,float,int)
    public com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float)
    public void stop()
com.badlogic.gdx.utils.UBJsonReader
com.badlogic.gdx.utils.UBJsonWriter$JsonObject
com.badlogic.gdx.utils.UBJsonWriter
com.badlogic.gdx.utils.XmlReader$Element:
    public java.lang.String getAttribute(java.lang.String,java.lang.String)
    public com.badlogic.gdx.utils.ObjectMap getAttributes()
    public boolean getBoolean(java.lang.String)
    public boolean getBoolean(java.lang.String,boolean)
    public boolean getBooleanAttribute(java.lang.String)
    public boolean getBooleanAttribute(java.lang.String,boolean)
    public com.badlogic.gdx.utils.XmlReader$Element getChild(int)
    public com.badlogic.gdx.utils.XmlReader$Element getChildByNameRecursive(java.lang.String)
    public int getChildCount()
    public com.badlogic.gdx.utils.Array getChildrenByNameRecursively(java.lang.String)
    private void getChildrenByNameRecursively(java.lang.String,com.badlogic.gdx.utils.Array)
    public float getFloat(java.lang.String)
    public float getFloat(java.lang.String,float)
    public float getFloatAttribute(java.lang.String)
    public float getFloatAttribute(java.lang.String,float)
    public int getInt(java.lang.String)
    public int getInt(java.lang.String,int)
    public int getIntAttribute(java.lang.String)
    public int getIntAttribute(java.lang.String,int)
    public com.badlogic.gdx.utils.XmlReader$Element getParent()
    public boolean hasAttribute(java.lang.String)
    public boolean hasChild(java.lang.String)
    public boolean hasChildRecursive(java.lang.String)
    public void remove()
    public void removeChild(int)
    public void removeChild(com.badlogic.gdx.utils.XmlReader$Element)
com.badlogic.gdx.utils.XmlReader:
    static final int xml_en_elementBody
    static final int xml_en_main
    static final int xml_error
    static final int xml_first_final
    static final int xml_start
    public com.badlogic.gdx.utils.XmlReader$Element parse(com.badlogic.gdx.files.FileHandle)
    public com.badlogic.gdx.utils.XmlReader$Element parse(java.lang.String)
com.badlogic.gdx.utils.XmlWriter
com.badlogic.gdx.utils.async.AsyncExecutor$1
com.badlogic.gdx.utils.async.AsyncExecutor$2
com.badlogic.gdx.utils.async.AsyncExecutor
com.badlogic.gdx.utils.async.AsyncResult
com.badlogic.gdx.utils.async.AsyncTask
com.badlogic.gdx.utils.async.ThreadUtils
com.badlogic.gdx.utils.compression.CRC
com.badlogic.gdx.utils.compression.ICodeProgress
com.badlogic.gdx.utils.compression.Lzma$CommandLine
com.badlogic.gdx.utils.compression.Lzma
com.badlogic.gdx.utils.compression.lz.BinTree
com.badlogic.gdx.utils.compression.lz.InWindow
com.badlogic.gdx.utils.compression.lz.OutWindow
com.badlogic.gdx.utils.compression.lzma.Base
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder
com.badlogic.gdx.utils.compression.lzma.Decoder
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal
com.badlogic.gdx.utils.compression.lzma.Encoder
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder
com.badlogic.gdx.utils.compression.rangecoder.Decoder
com.badlogic.gdx.utils.compression.rangecoder.Encoder
com.badlogic.gdx.utils.reflect.Annotation
com.badlogic.gdx.utils.reflect.ArrayReflection:
    public void <init>()
    public static java.lang.Object get(java.lang.Object,int)
    public static int getLength(java.lang.Object)
com.badlogic.gdx.utils.reflect.ClassReflection:
    public void <init>()
    public static com.badlogic.gdx.utils.reflect.Annotation getAnnotation(java.lang.Class,java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Annotation[] getAnnotations(java.lang.Class)
    public static java.lang.Class getComponentType(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Constructor[] getConstructors(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class,java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)
    public static varargs com.badlogic.gdx.utils.reflect.Method getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])
    public static com.badlogic.gdx.utils.reflect.Method[] getDeclaredMethods(java.lang.Class)
    public static java.lang.Object[] getEnumConstants(java.lang.Class)
    public static com.badlogic.gdx.utils.reflect.Field getField(java.lang.Class,java.lang.String)
    public static com.badlogic.gdx.utils.reflect.Field[] getFields(java.lang.Class)
    public static java.lang.Class[] getInterfaces(java.lang.Class)
    public static varargs com.badlogic.gdx.utils.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])
    public static com.badlogic.gdx.utils.reflect.Method[] getMethods(java.lang.Class)
    public static boolean isAbstract(java.lang.Class)
    public static boolean isAnnotation(java.lang.Class)
    public static boolean isAnnotationPresent(java.lang.Class,java.lang.Class)
    public static boolean isArray(java.lang.Class)
    public static boolean isEnum(java.lang.Class)
    public static boolean isInstance(java.lang.Class,java.lang.Object)
    public static boolean isInterface(java.lang.Class)
    public static boolean isPrimitive(java.lang.Class)
com.badlogic.gdx.utils.reflect.Constructor:
    public java.lang.Class[] getParameterTypes()
    public boolean isAccessible()
com.badlogic.gdx.utils.reflect.Field:
    public com.badlogic.gdx.utils.reflect.Annotation getDeclaredAnnotation(java.lang.Class)
    public com.badlogic.gdx.utils.reflect.Annotation[] getDeclaredAnnotations()
    public boolean isDefaultAccess()
    public boolean isFinal()
    public boolean isPrivate()
    public boolean isProtected()
    public boolean isPublic()
    public boolean isVolatile()
com.badlogic.gdx.utils.reflect.Method
com.badlogic.gdx.utils.reflect.ReflectionException:
    public void <init>()
    public void <init>(java.lang.String)
    public void <init>(java.lang.Throwable)
com.badlogic.gdx.utils.viewport.ExtendViewport
com.badlogic.gdx.utils.viewport.FillViewport
com.badlogic.gdx.utils.viewport.FitViewport
com.badlogic.gdx.utils.viewport.ScalingViewport
com.badlogic.gdx.utils.viewport.ScreenViewport
com.badlogic.gdx.utils.viewport.StretchViewport
com.badlogic.gdx.utils.viewport.Viewport:
    public void apply()
    public int getBottomGutterHeight()
    public int getLeftGutterWidth()
    public com.badlogic.gdx.math.collision.Ray getPickRay(float,float)
    public int getRightGutterWidth()
    public int getRightGutterX()
    public int getTopGutterHeight()
    public int getTopGutterY()
    public com.badlogic.gdx.math.Vector2 project(com.badlogic.gdx.math.Vector2)
    public com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3)
    public void setScreenHeight(int)
    public void setScreenPosition(int,int)
    public void setScreenSize(int,int)
    public void setScreenWidth(int)
    public void setScreenX(int)
    public void setScreenY(int)
    public void setWorldHeight(float)
    public void setWorldWidth(float)
    public com.badlogic.gdx.math.Vector2 toScreenCoordinates(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3)
    public final void update(int,int)
com.badlogicgames.gdx.controllers.BuildConfig
com.badlogicgames.gdx.controllers.R
com.shatteredpixel.shatteredpixeldungeon.Assets$Effects
com.shatteredpixel.shatteredpixeldungeon.Assets$Environment
com.shatteredpixel.shatteredpixeldungeon.Assets$Fonts
com.shatteredpixel.shatteredpixeldungeon.Assets$Interfaces
com.shatteredpixel.shatteredpixeldungeon.Assets$Messages
com.shatteredpixel.shatteredpixeldungeon.Assets$Music
com.shatteredpixel.shatteredpixeldungeon.Assets$Sounds:
    public static final java.lang.String ALERT
    public static final java.lang.String ATK_CROSSBOW
    public static final java.lang.String ATK_SPIRITBOW
    public static final java.lang.String BADGE
    public static final java.lang.String BEACON
    public static final java.lang.String BEE
    public static final java.lang.String BLAST
    public static final java.lang.String BONES
    public static final java.lang.String BOSS
    public static final java.lang.String BURNING
    public static final java.lang.String CHAINS
    public static final java.lang.String CHALLENGE
    public static final java.lang.String CHARGEUP
    public static final java.lang.String CHARMS
    public static final java.lang.String CLICK
    public static final java.lang.String CURSED
    public static final java.lang.String DEATH
    public static final java.lang.String DEBUFF
    public static final java.lang.String DEGRADE
    public static final java.lang.String DESCEND
    public static final java.lang.String DEWDROP
    public static final java.lang.String DRINK
    public static final java.lang.String EAT
    public static final java.lang.String EVOKE
    public static final java.lang.String FALLING
    public static final java.lang.String GAS
    public static final java.lang.String GHOST
    public static final java.lang.String GOLD
    public static final java.lang.String GRASS
    public static final java.lang.String HEALTH_CRITICAL
    public static final java.lang.String HEALTH_WARN
    public static final java.lang.String HIT
    public static final java.lang.String HIT_ARROW
    public static final java.lang.String HIT_CRUSH
    public static final java.lang.String HIT_MAGIC
    public static final java.lang.String HIT_PARRY
    public static final java.lang.String HIT_SLASH
    public static final java.lang.String HIT_STAB
    public static final java.lang.String HIT_STRONG
    public static final java.lang.String ITEM
    public static final java.lang.String LEVELUP
    public static final java.lang.String LIGHTNING
    public static final java.lang.String LULLABY
    public static final java.lang.String MASTERY
    public static final java.lang.String MELD
    public static final java.lang.String MIMIC
    public static final java.lang.String MINE
    public static final java.lang.String MISS
    public static final java.lang.String OPEN
    public static final java.lang.String PLANT
    public static final java.lang.String PUFF
    public static final java.lang.String RAY
    public static final java.lang.String READ
    public static final java.lang.String ROCKS
    public static final java.lang.String SCAN
    public static final java.lang.String SECRET
    public static final java.lang.String SHATTER
    public static final java.lang.String SHEEP
    public static final java.lang.String STEP
    public static final java.lang.String STURDY
    public static final java.lang.String TELEPORT
    public static final java.lang.String TOMB
    public static final java.lang.String TRAMPLE
    public static final java.lang.String TRAP
    public static final java.lang.String UNLOCK
    public static final java.lang.String WATER
    public static final java.lang.String ZAP
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.Assets$Splashes
com.shatteredpixel.shatteredpixeldungeon.Assets$Sprites
com.shatteredpixel.shatteredpixeldungeon.Assets
com.shatteredpixel.shatteredpixeldungeon.Badges$Badge:
    public boolean meta
com.shatteredpixel.shatteredpixeldungeon.Badges:
    private static final java.lang.String BADGES
    public static final java.lang.String BADGES_FILE
    public static java.util.HashSet allUnlocked()
    public static void disown(com.shatteredpixel.shatteredpixeldungeon.Badges$Badge)
    public static int totalUnlocked(boolean)
com.shatteredpixel.shatteredpixeldungeon.Bones:
    private static final java.lang.String BONES_FILE
    private static final java.lang.String BRANCH
    private static final java.lang.String HERO_CLASS
    private static final java.lang.String ITEM
    private static final java.lang.String LEVEL
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.Challenges:
    public static final int CHAMPION_ENEMIES
    public static final int DARKNESS
    public static final int MAX_VALUE
    public static final int NO_ARMOR
    public static final int NO_FOOD
    public static final int NO_HEALING
    public static final int NO_HERBALISM
    public static final int NO_SCROLLS
    public static final int STRONGER_BOSSES
    public static final int SWARM_INTELLIGENCE
com.shatteredpixel.shatteredpixeldungeon.Chrome:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.Dungeon:
    private static final java.lang.String BADGES
    private static final java.lang.String BRANCH
    private static final java.lang.String CHALLENGES
    private static final java.lang.String CHAPTERS
    private static final java.lang.String CUSTOM_SEED
    private static final java.lang.String DAILY
    private static final java.lang.String DAILY_REPLAY
    private static final java.lang.String DEPTH
    private static final java.lang.String DROPPED
    private static final java.lang.String ENERGY
    private static final java.lang.String GENERATED_LEVELS
    private static final java.lang.String GOLD
    private static final java.lang.String HERO
    private static final java.lang.String INIT_VER
    private static final java.lang.String LEVEL
    private static final java.lang.String LIMDROPS
    private static final java.lang.String MOBS_TO_CHAMPION
    private static final java.lang.String PORTED
    private static final java.lang.String QUESTS
    private static final java.lang.String SEED
    public static final java.lang.String VERSION
    public void <init>()
    public static void resetLevel()
com.shatteredpixel.shatteredpixeldungeon.GamesInProgress:
    private static final java.lang.String DEPTH_BRANCH_FILE
    private static final java.lang.String DEPTH_FILE
    private static final java.lang.String GAME_FILE
    private static final java.lang.String GAME_FOLDER
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.Rankings$Record:
    private static final java.lang.String ASCEND
    private static final java.lang.String CAUSE
    private static final java.lang.String CLASS
    private static final java.lang.String DAILY
    private static final java.lang.String DATA
    private static final java.lang.String DATE
    private static final java.lang.String DEPTH
    private static final java.lang.String ID
    private static final java.lang.String LEVEL
    private static final java.lang.String SCORE
    private static final java.lang.String SEED
    private static final java.lang.String TIER
    private static final java.lang.String VERSION
    private static final java.lang.String WIN
com.shatteredpixel.shatteredpixeldungeon.Rankings:
    public static final java.lang.String BADGES
    public static final java.lang.String CHALLENGES
    public static final java.lang.String CUSTOM_SEED
    public static final java.lang.String DAILY
    public static final java.lang.String DAILY_HISTORY_DATES
    public static final java.lang.String DAILY_HISTORY_SCORES
    public static final java.lang.String DAILY_REPLAY
    public static final java.lang.String GAME_VERSION
    public static final java.lang.String HANDLERS
    public static final java.lang.String HERO
    private static final java.lang.String LATEST
    public static final java.lang.String LATEST_DAILY
    public static final java.lang.String RANKINGS_FILE
    private static final java.lang.String RECORDS
    public static final java.lang.String SEED
    public static final java.lang.String STATS
    public static final int TABLE_SIZE
    private static final java.lang.String TOTAL
    private static final java.lang.String WON
    public int localTotal
    public int localWon
    private int score(boolean)
com.shatteredpixel.shatteredpixeldungeon.SPDAction:
    private static final java.lang.String BINDINGS_FILE
com.shatteredpixel.shatteredpixeldungeon.SPDSettings:
    public static final java.lang.String KEY_BARMODE
    public static final java.lang.String KEY_BETAS
    public static final java.lang.String KEY_BRIGHTNESS
    public static final java.lang.String KEY_CAMERA_FOLLOW
    public static final java.lang.String KEY_CHALLENGES
    public static final java.lang.String KEY_CONTROLLER_SENS
    public static final java.lang.String KEY_CUSTOM_SEED
    public static final java.lang.String KEY_FLIPTAGS
    public static final java.lang.String KEY_FLIPTOOLBAR
    public static final java.lang.String KEY_FULLSCREEN
    public static final java.lang.String KEY_FULLSCREEN_MONITOR
    public static final java.lang.String KEY_GRID
    public static final java.lang.String KEY_IGNORE_SILENT
    public static final java.lang.String KEY_INTRO
    public static final java.lang.String KEY_LANDSCAPE
    public static final java.lang.String KEY_LANG
    public static final java.lang.String KEY_LAST_CLASS
    public static final java.lang.String KEY_LAST_DAILY
    public static final java.lang.String KEY_MOVE_SENS
    public static final java.lang.String KEY_MUSIC
    public static final java.lang.String KEY_MUSIC_BG
    public static final java.lang.String KEY_MUSIC_VOL
    public static final java.lang.String KEY_NEWS
    public static final java.lang.String KEY_NEWS_LAST_READ
    public static final java.lang.String KEY_POWER_SAVER
    public static final java.lang.String KEY_QUICK_SWAP
    public static final java.lang.String KEY_SCALE
    public static final java.lang.String KEY_SCREEN_SHAKE
    public static final java.lang.String KEY_SFX_VOL
    public static final java.lang.String KEY_SLOTWATERSKIN
    public static final java.lang.String KEY_SOUND_FX
    public static final java.lang.String KEY_SUPPORT_NAGGED
    public static final java.lang.String KEY_SYSTEMFONT
    public static final java.lang.String KEY_UI_SIZE
    public static final java.lang.String KEY_UPDATES
    public static final java.lang.String KEY_VERSION
    public static final java.lang.String KEY_VIBRATION
    public static final java.lang.String KEY_VICTORY_NAGGED
    public static final java.lang.String KEY_WIFI
    public static final java.lang.String KEY_WINDOW_HEIGHT
    public static final java.lang.String KEY_WINDOW_MAXIMIZED
    public static final java.lang.String KEY_WINDOW_WIDTH
    public static final java.lang.String KEY_ZOOM
    public void <init>()
    public static int fulLScreenMonitor()
    public static void fulLScreenMonitor(int)
    public static int lastClass()
    public static void windowMaximized(boolean)
    public static boolean windowMaximized()
    public static com.watabou.utils.Point windowResolution()
    public static void windowResolution(com.watabou.utils.Point)
com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon:
    public static final int v1_2_3
    public static final int v1_4_3
    public static final int v2_0_2
    public static final int v2_1_4
    public static final int v2_2_1
    public static final int v2_3_2
    public static final int v2_4_2
    public static final int v2_5_0
com.shatteredpixel.shatteredpixeldungeon.Statistics:
    private static final java.lang.String ALCHEMY
    private static final java.lang.String AMULET
    private static final java.lang.String ANKHS
    private static final java.lang.String ASCENDED
    private static final java.lang.String BOSS_CHALLENGE_QUALIFIED
    private static final java.lang.String BOSS_REMAINS_QUALIFIED
    private static final java.lang.String BOSS_SCORES
    private static final java.lang.String CHAL_MULT
    private static final java.lang.String DEEPEST
    private static final java.lang.String DURATION
    private static final java.lang.String EXPL_SCORE
    private static final java.lang.String FLR_EXPL
    private static final java.lang.String FOOD
    private static final java.lang.String GOLD
    private static final java.lang.String HIGHEST
    private static final java.lang.String ITEM_VAL
    private static final java.lang.String NO_KILLING_QUALIFIED
    private static final java.lang.String PIRANHAS
    private static final java.lang.String PROG_SCORE
    private static final java.lang.String QUEST_SCORES
    private static final java.lang.String SLAIN
    private static final java.lang.String SNEAKS
    private static final java.lang.String SPAWNERS
    private static final java.lang.String THROWN
    private static final java.lang.String TOTAL_SCORE
    private static final java.lang.String TOT_BOSS
    private static final java.lang.String TOT_QUEST
    private static final java.lang.String TRES_SCORE
    private static final java.lang.String UPGRADES
    private static final java.lang.String WIN_MULT
    private static final java.lang.String WON
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.actors.Actor:
    protected static final int BLOB_PRIO
    protected static final int BUFF_PRIO
    private static final int DEFAULT
    protected static final int HERO_PRIO
    private static final java.lang.String ID
    protected static final int MOB_PRIO
    private static final java.lang.String NEXTID
    public static final float TICK
    private static final java.lang.String TIME
    protected static final int VFX_PRIO
com.shatteredpixel.shatteredpixeldungeon.actors.Char:
    protected static final java.lang.String BUFFS
    protected static final java.lang.String POS
    protected static final java.lang.String TAG_HP
    protected static final java.lang.String TAG_HT
    protected static final java.lang.String TAG_SHLD
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Alchemy:
    protected int pos
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob:
    private static final java.lang.String CUR
    private static final java.lang.String LENGTH
    private static final java.lang.String START
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.CorrosiveGas:
    private static final java.lang.String SOURCE
    private static final java.lang.String STRENGTH
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.GooWarn:
    protected int pos
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.SacrificialFire$Marked:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.SacrificialFire:
    private static final java.lang.String BONUS_SPAWNS
    private static final java.lang.String PRIZE
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Adrenaline:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AdrenalineSurge:
    private static final java.lang.String BOOST
    private static final java.lang.String INTERVAL
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ArcaneArmor:
    private static final java.lang.String INTERVAL
    private static final java.lang.String LEVEL
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ArtifactRecharge:
    public static final float DURATION
    private static final java.lang.String IGNORE_HORN
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AscensionChallenge:
    public static final java.lang.String DAMAGE
    public static final java.lang.String STACKS
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Awareness:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Barkskin:
    private static final java.lang.String INTERVAL
    private static final java.lang.String LEVEL
    public int level()
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Barrier:
    private static final java.lang.String PARTIAL_LOST_SHIELD
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Berserk:
    private static final java.lang.String LEVEL_RECOVERY
    private static final float LEVEL_RECOVER_START
    private static final java.lang.String POWER
    private static final java.lang.String POWER_BUFFER
    private static final java.lang.String STATE
    private static final java.lang.String TURN_RECOVERY
    private static final int TURN_RECOVERY_START
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Bleeding:
    private static final java.lang.String LEVEL
    private static final java.lang.String SOURCE
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Bless:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Blindness:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.BlobImmunity:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning:
    private static final java.lang.String ACTED
    private static final java.lang.String BURN
    private static final float DURATION
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Growing:
    private static final java.lang.String MULTIPLIER
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Charm:
    public static final float DURATION
    private static final java.lang.String IGNORE_ALLIES
    private static final java.lang.String OBJECT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Chill:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo:
    private static final java.lang.String CLOBBER_USED
    private static final java.lang.String COUNT
    private static final java.lang.String INITIAL_TIME
    private static final java.lang.String PARRY_USED
    private static final java.lang.String TIME
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corrosion:
    private static final java.lang.String DAMAGE
    private static final java.lang.String LEFT
    private static final java.lang.String SOURCE
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.CounterBuff:
    private static final java.lang.String COUNT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Cripple:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Daze:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Degrade:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Dread:
    public static final float DURATION
    private static final java.lang.String LEFT
    private static final java.lang.String OBJECT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Drowsy:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FireImbue:
    public static final float DURATION
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Foresight:
    public static final int DISTANCE
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Frost:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FrostImbue:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.GravityChaosTracker:
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Haste:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Healing:
    private static final java.lang.String FLAT
    private static final java.lang.String HEALING_LIMITED
    private static final java.lang.String LEFT
    private static final java.lang.String PERCENT
    public void increaseHeal(int)
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.HeroDisguise:
    private static final java.lang.String CLASS
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hex:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.HoldFast:
    private static final java.lang.String POS
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hunger:
    public static final float HUNGRY
    private static final java.lang.String LEVEL
    private static final java.lang.String PARTIALDAMAGE
    public static final float STARVING
    private static final float STEP
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invulnerability:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Levitation:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LifeLink:
    private static final java.lang.String OBJECT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Light:
    public static final int DISTANCE
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicImmune:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicalSight:
    public static final int DISTANCE
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicalSleep:
    private static final float STEP
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MindVision:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Momentum:
    private static final java.lang.String FREERUN_CD
    private static final java.lang.String FREERUN_TURNS
    private static final java.lang.String STACKS
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy:
    private static final float MAX_COOLDOWN
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Ooze:
    private static final java.lang.String ACTED
    public static final float DURATION
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis$ParalysisResist:
    private static final java.lang.String DAMAGE
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PhysicalEmpower:
    private static final java.lang.String BOOST
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PinCushion:
    private static final java.lang.String ITEMS
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Poison:
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Preparation:
    private static final java.lang.String TURNS
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PrismaticGuard:
    private static final java.lang.String HEALTH
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Recharging:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Regeneration:
    private static final float REGENERATION_DELAY
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.RevealedArea:
    private static final java.lang.String BRANCH
    private static final java.lang.String DEPTH
    private static final java.lang.String POS
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Roots:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ScrollEmpower:
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Shadows:
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ShieldBuff:
    private static final java.lang.String SHIELDING
    public void decShield()
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Sleep:
    public static final float SWS
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Slow:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.SnipersMark:
    public static final float DURATION
    private static final java.lang.String LEVEL
    private static final java.lang.String OBJECT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.SoulMark:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Speed:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Stamina:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.SuperNovaTracker:
    public static final java.lang.String BRANCH
    public static final java.lang.String DEPTH
    private static final int DIST
    public static final java.lang.String HARMS_ALLIES
    public static final java.lang.String LEFT
    public static final java.lang.String POS
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Terror:
    public static final float DURATION
    private static final java.lang.String OBJECT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ToxicImbue:
    public static final float DURATION
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Vertigo:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Vulnerable:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.WandEmpower:
    private static final java.lang.String BOOST
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Weakness:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.WellFed:
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings:
    private static final java.lang.String ARMOR
    private static final java.lang.String ARTIFACT
    private static final java.lang.String MISC
    private static final java.lang.String RING
    private static final java.lang.String SECOND_WEP
    private static final java.lang.String WEAPON
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero:
    private static final java.lang.String ABILITY
    private static final java.lang.String ATTACK
    private static final java.lang.String CLASS
    private static final java.lang.String DEFENSE
    private static final java.lang.String EXPERIENCE
    private static final java.lang.String HTBOOST
    private static final float HUNGER_FOR_SEARCH
    private static final java.lang.String LEVEL
    public static final int MAX_LEVEL
    public static final int STARTING_STR
    private static final java.lang.String STRENGTH
    private static final java.lang.String SUBCLASS
    private static final float TIME_TO_REST
    private static final float TIME_TO_SEARCH
    public float awareness
    public java.util.ArrayList getVisibleEnemies()
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass:
    public com.shatteredpixel.shatteredpixeldungeon.Badges$Badge masteryBadge()
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent$CombinedEnergyAbilityTracker:
    private static final java.lang.String MONK_ABIL_USED
    private static final java.lang.String WEP_ABIL_USED
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent$DeadlyFollowupTracker:
    private static final java.lang.String OBJECT
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent$FollowupStrikeTracker:
    private static final java.lang.String OBJECT
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent$LiquidAgilACCTracker:
    private static final java.lang.String USES
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent$PatientStrikeTracker:
    private static final java.lang.String POS
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent$ProtectiveShadowsTracker:
    private static final java.lang.String BARRIER_INC
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent$SwiftEquipCooldown:
    private static final java.lang.String SECOND_USE
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent$VariedChargeTracker:
    private static final java.lang.String WEAPON
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent:
    public static final int MAX_TALENT_TIERS
    private static final java.lang.String TALENT_TIER
    public final java.lang.String desc()
    public static void onUpgradeScrollUsed(com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero)
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify$TransmogRat:
    private static final java.lang.String ALLIED
    private static final java.lang.String ORIGINAL
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$DuelParticipant:
    private static final java.lang.String LEFT
    private static final java.lang.String TAKEN_DMG
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.NaturesPower$naturesPowerTracker:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk$HawkAlly:
    private static final java.lang.String DODGES_USED
    private static final java.lang.String TIME_REMAINING
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WarpBeacon$WarpBeaconTracker:
    public static final java.lang.String BRANCH
    public static final java.lang.String DEPTH
    public static final java.lang.String POS
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone$ShadowAlly:
    private static final java.lang.String DEF_SKILL
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ArmoredStatue:
    private static final java.lang.String ARMOR
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bandit:
    public com.shatteredpixel.shatteredpixeldungeon.items.Item item
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bee:
    private static final java.lang.String ALIGMNENT
    private static final java.lang.String LEVEL
    private static final java.lang.String POTHOLDER
    private static final java.lang.String POTPOS
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Brute:
    private static final java.lang.String HAS_RAGED
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalGuardian:
    public static final java.lang.String RECOVERING
    public static final java.lang.String SPRITE
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalSpire:
    private static final int ABILITY_CD
    public static final java.lang.String ABILITY_COOLDOWN
    public static final java.lang.String HITS
    public static final java.lang.String SPRITE
    public static final java.lang.String TARGETED_CELLS
    private java.util.ArrayList spreadAOE(java.util.ArrayList)
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalWisp:
    public static final java.lang.String SPRITE
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM100:
    private static final float TIME_TO_ZAP
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM200:
    private static final java.lang.String VENT_COOLDOWN
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM300:
    private static final java.lang.String ABILITY_COOLDOWN
    private static final java.lang.String CHARGE_ANNOUNCED
    private static final int GAS
    private static final java.lang.String LAST_ABILITY
    private static final int NONE
    private static final java.lang.String PYLONS_ACTIVATED
    private static final int ROCKS
    private static final java.lang.String SUPERCHARGED
    private static final java.lang.String TURNS_SINCE_LAST_ABILITY
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DelayedRockFall:
    private static final java.lang.String POSITIONS
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DemonSpawner:
    public static final java.lang.String SPAWN_COOLDOWN
    public static final java.lang.String SPAWN_RECORDED
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$Summoning:
    private static final java.lang.String DELAY
    private static final java.lang.String POS
    private static final java.lang.String SUMMON
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing:
    private static final java.lang.String ABILITY_CD
    private static final java.lang.String LAST_ABILITY
    private static final int LINK
    private static final int NONE
    private static final java.lang.String PHASE
    private static final java.lang.String SUMMONS_MADE
    private static final java.lang.String SUMMON_CD
    private static final int TELE
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$NewbornFireElemental:
    private static final java.lang.String TARGETING_POS
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental:
    private static final java.lang.String COOLDOWN
    private static final java.lang.String SUMMONED_ALLY
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye:
    private static final java.lang.String BEAM_CHARGED
    private static final java.lang.String BEAM_COOLDOWN
    private static final java.lang.String BEAM_TARGET
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul$GhoulLifeLink:
    private static final java.lang.String GHOUL
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul:
    private static final java.lang.String PARTNER_ID
    private static final java.lang.String TIMES_DOWNED
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer:
    private static final java.lang.String ABILITY_COOLDOWN
    public static final java.lang.String HITS
    private static final java.lang.String LAST_ABILITY_WAS_ROCKFALL
    private static final java.lang.String ROCK_FROM_POS
    private static final java.lang.String ROCK_TO_POS
    private static final java.lang.String SAPPER_ID
    private static final java.lang.String SAPPER_SPAWNS
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGuard:
    private static final java.lang.String SAPPER_ID
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper:
    private static final java.lang.String ABILITY_COOLDOWN
    private static final java.lang.String LAST_ABILITY_WAS_ROCKFALL
    private static final java.lang.String PARTNER_ID
    private static final java.lang.String ROCK_FROM_POS
    private static final java.lang.String ROCK_TO_POS
    private static final java.lang.String SPAWN_POS
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollTrickster:
    private static final java.lang.String COMBO
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem:
    private static final java.lang.String ENEMY_COOLDOWN
    private static final java.lang.String SELF_COOLDOWN
    private static final java.lang.String TELEPORTING
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic:
    private static final java.lang.String ITEMS
    private static final java.lang.String LEVEL
    private static final java.lang.String STEALTHY
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Fleeing:
    public static final java.lang.String TAG
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Hunting:
    public static final java.lang.String TAG
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Passive:
    public static final java.lang.String TAG
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Sleeping:
    public static final java.lang.String TAG
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Wandering:
    public static final java.lang.String TAG
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob:
    private static final java.lang.String ENEMY_ID
    private static final java.lang.String MAX_LVL
    private static final java.lang.String SEEN
    private static final java.lang.String STATE
    private static final java.lang.String TARGET
    protected static final float TIME_TO_WAKE_UP
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer:
    private static final java.lang.String FIRST_SUMMON
    private static final java.lang.String MY_SKELETON
    private static final java.lang.String SUMMONING
    private static final java.lang.String SUMMONING_POS
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Pylon:
    private static final java.lang.String ALIGNMENT
    private static final java.lang.String TARGET_NEIGHBOUR
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Rat:
    private static final java.lang.String RAT_ALLY
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RipperDemon:
    private static final java.lang.String LAST_ENEMY_POS
    private static final java.lang.String LEAP_CD
    private static final java.lang.String LEAP_POS
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.SpectralNecromancer:
    private static final java.lang.String WRAITH_IDS
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner:
    private static final java.lang.String LAST_ENEMY_POS
    private static final java.lang.String WEB_COOLDOWN
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Statue:
    private static final java.lang.String WEAPON
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Succubus:
    private static final java.lang.String BLINK_CD
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Swarm:
    private static final java.lang.String GENERATION
    private static final float SPLIT_DELAY
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$BombAbility:
    private static final java.lang.String BOMB_POS
    private static final java.lang.String TIMER
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$FireAbility:
    private static final java.lang.String CUR_CELLS
    private static final java.lang.String DIRECTION
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility:
    private static final java.lang.String SHOCKER_POS
    private static final java.lang.String SHOCKING_ORDINALS
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu:
    private static final java.lang.String ABILITIES_USED
    private static final java.lang.String ABILITY_COOLDOWN
    private static final java.lang.String ARENA_JUMPS
    private static final int BOMB_ABILITY
    private static final int FIRE_ABILITY
    private static final java.lang.String LAST_ABILITY
    private static final int SHOCKER_ABILITY
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief:
    private static final java.lang.String ITEM
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock:
    private static final float TIME_TO_ZAP
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wraith:
    private static final java.lang.String LEVEL
    private static final float SPAWN_DELAY
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa:
    private static final java.lang.String ABILITY_CD
    private static final java.lang.String CHALLENGE_SUMMONS
    private static final java.lang.String FIST_SUMMONS
    private static final int MAX_ABILITY_CD
    private static final int MAX_SUMMON_CD
    private static final int MIN_ABILITY_CD
    private static final int MIN_SUMMON_CD
    private static final java.lang.String PHASE
    private static final java.lang.String REGULAR_SUMMONS
    private static final java.lang.String SUMMON_CD
    private static final java.lang.String TARGETED_CELLS
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist:
    public static final java.lang.String RANGED_COOLDOWN
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Blacksmith$Quest:
    private static final java.lang.String ALTERNATIVE
    private static final java.lang.String BOSS_BEATEN
    private static final java.lang.String COMPLETED
    public static final int CRYSTAL
    private static final java.lang.String ENCHANT
    private static final java.lang.String FAVOR
    public static final int FUNGI
    private static final java.lang.String GIVEN
    private static final java.lang.String GLYPH
    public static final int GNOLL
    private static final java.lang.String HARDENS
    private static final java.lang.String NODE
    public static final int OLD
    private static final java.lang.String PICKAXE
    private static final java.lang.String REFORGES
    private static final java.lang.String SMITHS
    private static final java.lang.String SMITH_REWARDS
    private static final java.lang.String SPAWNED
    private static final java.lang.String STARTED
    private static final java.lang.String TYPE
    private static final java.lang.String UPGRADES
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly:
    private static final java.lang.String DEFEND_POS
    private static final java.lang.String MOVING_TO_DEFEND
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost$Quest:
    private static final java.lang.String ARMOR
    private static final java.lang.String DEPTH
    private static final java.lang.String ENCHANT
    private static final java.lang.String GIVEN
    private static final java.lang.String GLYPH
    private static final java.lang.String NODE
    private static final java.lang.String PROCESSED
    private static final java.lang.String SPAWNED
    private static final java.lang.String TYPE
    private static final java.lang.String WEAPON
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp$Quest:
    private static final java.lang.String ALTERNATIVE
    private static final java.lang.String COMPLETED
    private static final java.lang.String GIVEN
    private static final java.lang.String NODE
    private static final java.lang.String REWARD
    private static final java.lang.String SPAWNED
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage:
    private static final java.lang.String HEROID
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.PrismaticImage:
    private static final java.lang.String HEROID
    private static final java.lang.String TIMER
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Sheep:
    private static final java.lang.String LIFESPAN
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker$Quest:
    private static final java.lang.String GIVEN
    private static final java.lang.String NODE
    private static final java.lang.String RITUALPOS
    private static final java.lang.String SPAWNED
    private static final java.lang.String TYPE
    private static final java.lang.String WAND1
    private static final java.lang.String WAND2
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.android.R$mipmap
com.shatteredpixel.shatteredpixeldungeon.android.R
com.shatteredpixel.shatteredpixeldungeon.effects.BadgeBanner:
    public static final float DEFAULT_SCALE
    private static final float FADE_IN_TIME
    private static final float FADE_OUT_TIME
    public static final int SIZE
    private static final float STATIC_TIME
com.shatteredpixel.shatteredpixeldungeon.effects.BannerSprites:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.effects.Beam:
    private static final double A
com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.effects.Chains:
    private static final double A
    public void <init>(int,int,com.shatteredpixel.shatteredpixeldungeon.effects.Effects$Type,com.watabou.utils.Callback)
com.shatteredpixel.shatteredpixeldungeon.effects.CircleArc:
    public com.shatteredpixel.shatteredpixeldungeon.effects.CircleArc show(com.watabou.noosa.Visual,float)
com.shatteredpixel.shatteredpixeldungeon.effects.Degradation$Speck
com.shatteredpixel.shatteredpixeldungeon.effects.Degradation
com.shatteredpixel.shatteredpixeldungeon.effects.Effects:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.effects.Enchanting:
    private static final float ALPHA
    private static final float FADE_IN_TIME
    private static final float FADE_OUT_TIME
    private static final float STATIC_TIME
com.shatteredpixel.shatteredpixeldungeon.effects.Fireball:
    private static final int COLOR
com.shatteredpixel.shatteredpixeldungeon.effects.FloatingText:
    private static final float DISTANCE
    public static final int ICON_SIZE
    private static final float LIFESPAN
    public static void show(float,float,java.lang.String,int)
com.shatteredpixel.shatteredpixeldungeon.effects.Identification$Speck:
    private static final int COLOR
    private static final int SIZE
com.shatteredpixel.shatteredpixeldungeon.effects.Lightning:
    private static final double A
    private static final float DURATION
    public void <init>(int,com.watabou.utils.PointF,com.watabou.utils.Callback)
com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile:
    public static final int BEACON
    public static final int BLOOD_CONE
    public static final int CORROSION
    public static final int CORROSION_CONE
    public static final int EARTH
    public static final int EARTH_CONE
    public static final int ELMO
    public static final int FIRE
    public static final int FIRE_CONE
    public static final int FOLIAGE
    public static final int FOLIAGE_CONE
    public static final int FORCE
    public static final int FORCE_CONE
    public static final int FROST
    public static final int FROST_CONE
    public static final int MAGIC_MISSILE
    public static final int MAGIC_MISS_CONE
    public static final int POISON
    public static final int PURPLE_CONE
    public static final int RAINBOW
    public static final int RAINBOW_CONE
    public static final int SHADOW
    public static final int SHADOW_CONE
    public static final int SHAMAN_BLUE
    public static final int SHAMAN_PURPLE
    public static final int SHAMAN_RED
    public static final int SPARK_CONE
    public static final int SPECK
    private static final float SPEED
    public static final int WARD
    public static final int WARD_CONE
    public void reset(int,int,int,com.watabou.utils.Callback)
    public void reset(int,com.watabou.noosa.Visual,com.watabou.noosa.Visual,com.watabou.utils.Callback)
com.shatteredpixel.shatteredpixeldungeon.effects.Pushing$Effect:
    private static final float DELAY
com.shatteredpixel.shatteredpixeldungeon.effects.Ripple:
    private static final float TIME_TO_FADE
com.shatteredpixel.shatteredpixeldungeon.effects.ShadowBox:
    public static final float SIZE
com.shatteredpixel.shatteredpixeldungeon.effects.Speck:
    public static final int BLIZZARD
    public static final int BONE
    public static final int BUBBLE
    public static final int CALM
    public static final int CHANGE
    public static final int COIN
    public static final int CONFUSION
    public static final int CORROSION
    public static final int CROWN
    public static final int DISCOVER
    public static final int DUST
    public static final int EVOKE
    public static final int FORGE
    public static final int HEALING
    public static final int HEART
    public static final int INFERNO
    public static final int JET
    public static final int LIGHT
    public static final int MASK
    public static final int NOTE
    public static final int PARALYSIS
    public static final int QUESTION
    public static final int RATTLE
    public static final int RED_LIGHT
    public static final int ROCK
    public static final int SCREAM
    private static final int SIZE
    public static final int SMOKE
    public static final int STAR
    public static final int STEAM
    public static final int STENCH
    public static final int STORM
    public static final int TOXIC
    public static final int UP
    public static final int WOOL
com.shatteredpixel.shatteredpixeldungeon.effects.SpellSprite:
    public static final int ANKH
    public static final int BERSERK
    public static final int CHARGE
    private static final float FADE_IN_TIME
    private static final float FADE_OUT_TIME
    public static final int FOOD
    public static final int HASTE
    public static final int MAP
    public static final int PURITY
    private static final int SIZE
    private static final float STATIC_TIME
    public static final int VISION
com.shatteredpixel.shatteredpixeldungeon.effects.Splash:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.effects.Surprise:
    private static final float TIME_TO_FADE
    public static void hit(int)
    public static void hit(int,float)
    public void reset(int)
com.shatteredpixel.shatteredpixeldungeon.effects.Swap$Effect
com.shatteredpixel.shatteredpixeldungeon.effects.Swap
com.shatteredpixel.shatteredpixeldungeon.effects.Transmuting:
    private static final float ALPHA
    private static final float FADE_IN_TIME
    private static final float FADE_OUT_TIME
    private static final float TRANSMUTING_TIME
com.shatteredpixel.shatteredpixeldungeon.effects.Wound:
    private static final float TIME_TO_FADE
com.shatteredpixel.shatteredpixeldungeon.effects.particles.LeafParticle:
    public static int color1
    public static int color2
com.shatteredpixel.shatteredpixeldungeon.effects.particles.RainbowParticle:
    public void reset(float,float)
com.shatteredpixel.shatteredpixeldungeon.effects.particles.SparkParticle:
    public void setMaxSize(float)
com.shatteredpixel.shatteredpixeldungeon.effects.particles.WoolParticle$1
com.shatteredpixel.shatteredpixeldungeon.effects.particles.WoolParticle
com.shatteredpixel.shatteredpixeldungeon.items.Amulet:
    private static final java.lang.String AC_END
com.shatteredpixel.shatteredpixeldungeon.items.Ankh:
    public static final java.lang.String AC_BLESS
    private static final java.lang.String BLESSED
com.shatteredpixel.shatteredpixeldungeon.items.ArcaneResin:
    private static final java.lang.String AC_APPLY
com.shatteredpixel.shatteredpixeldungeon.items.BrokenSeal:
    public static final java.lang.String AC_AFFIX
    public static final java.lang.String AC_INFO
    private static final java.lang.String GLYPH
com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem:
    public static final java.lang.String AC_EQUIP
    public static final java.lang.String AC_UNEQUIP
    private static final java.lang.String CUSTOM_NOTE_ID
com.shatteredpixel.shatteredpixeldungeon.items.Generator:
    private static final java.lang.String CATEGORY_DROPPED
    private static final java.lang.String CATEGORY_PROBS
    private static final java.lang.String CATEGORY_SEED
    private static final java.lang.String CATEGORY_USING_PROBS2
    private static final java.lang.String FIRST_DECK
    private static final java.lang.String GENERAL_PROBS
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.items.Heap:
    private static final java.lang.String AUTO_EXPLORED
    private static final java.lang.String HAUNTED
    private static final java.lang.String ITEMS
    private static final java.lang.String POS
    private static final java.lang.String SEEN
    private static final java.lang.String TYPE
com.shatteredpixel.shatteredpixeldungeon.items.Honeypot:
    public static final java.lang.String AC_SHATTER
com.shatteredpixel.shatteredpixeldungeon.items.Item:
    public static final java.lang.String AC_DROP
    public static final java.lang.String AC_THROW
    private static final java.lang.String CURSED
    private static final java.lang.String CURSED_KNOWN
    private static final java.lang.String KEPT_LOST
    private static final java.lang.String LEVEL
    private static final java.lang.String LEVEL_KNOWN
    private static final java.lang.String QUANTITY
    private static final java.lang.String QUICKSLOT
    protected static final float TIME_TO_DROP
    protected static final float TIME_TO_PICK_UP
    protected static final float TIME_TO_THROW
    protected static final java.lang.String TXT_TO_STRING_LVL
    protected static final java.lang.String TXT_TO_STRING_X
    public boolean visiblyCursed()
com.shatteredpixel.shatteredpixeldungeon.items.ItemStatusHandler:
    private static final java.lang.String PFX_KNOWN
    private static final java.lang.String PFX_LABEL
com.shatteredpixel.shatteredpixeldungeon.items.KingsCrown:
    private static final java.lang.String AC_WEAR
com.shatteredpixel.shatteredpixeldungeon.items.LiquidMetal:
    private static final java.lang.String AC_APPLY
com.shatteredpixel.shatteredpixeldungeon.items.Stylus:
    private static final java.lang.String AC_INSCRIBE
    private static final float TIME_TO_INSCRIBE
com.shatteredpixel.shatteredpixeldungeon.items.TengusMask:
    private static final java.lang.String AC_WEAR
com.shatteredpixel.shatteredpixeldungeon.items.Torch:
    public static final java.lang.String AC_LIGHT
    public static final float TIME_TO_LIGHT
com.shatteredpixel.shatteredpixeldungeon.items.Waterskin:
    private static final java.lang.String AC_DRINK
    private static final int MAX_VOLUME
    private static final float TIME_TO_DRINK
    private static final java.lang.String TXT_STATUS
    private static final java.lang.String VOLUME
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor:
    protected static final java.lang.String AC_DETACH
    private static final java.lang.String AUGMENT
    private static final java.lang.String AVAILABLE_USES
    private static final java.lang.String CURSE_INFUSION_BONUS
    private static final java.lang.String GLYPH
    private static final java.lang.String GLYPH_HARDENED
    private static final java.lang.String MASTERY_POTION_BONUS
    private static final java.lang.String SEAL
    private static final java.lang.String USES_LEFT_TO_ID
    private static final int USES_TO_ID
com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor:
    private static final java.lang.String AC_ABILITY
    private static final java.lang.String AC_TRANSFER
    private static final java.lang.String ARMOR_TIER
    private static final java.lang.String CHARGE
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity$DeferedDamage:
    private static final java.lang.String DAMAGE
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.AlchemistsToolkit:
    public static final java.lang.String AC_BREW
    public static final java.lang.String AC_ENERGIZE
    private static final java.lang.String WARM_UP
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact:
    private static final java.lang.String CHARGE
    private static final java.lang.String EXP
    private static final java.lang.String PARTIALCHARGE
    protected com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact$ArtifactBuff activeBuff()
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ChaliceOfBlood:
    public static final java.lang.String AC_PRICK
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows$cloakStealth:
    private static final java.lang.String BARRIER_INC
    private static final java.lang.String TURNSTOCOST
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows:
    public static final java.lang.String AC_STEALTH
    private static final java.lang.String BUFF
    private static final java.lang.String STEALTHED
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$WndGhostHero:
    private static final float BTN_GAP
    private static final int BTN_SIZE
    private static final float GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose:
    public static final java.lang.String AC_DIRECT
    public static final java.lang.String AC_OUTFIT
    public static final java.lang.String AC_SUMMON
    private static final java.lang.String ARMOR
    private static final java.lang.String FIRSTSUMMON
    private static final java.lang.String GHOSTID
    private static final java.lang.String PETALS
    private static final java.lang.String TALKEDTO
    private static final java.lang.String WEAPON
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.EtherealChains:
    public static final java.lang.String AC_CAST
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.HornOfPlenty:
    public static final java.lang.String AC_EAT
    public static final java.lang.String AC_SNACK
    public static final java.lang.String AC_STORE
    private static final java.lang.String STORED
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.LloydsBeacon:
    public static final java.lang.String AC_RETURN
    public static final java.lang.String AC_SET
    public static final java.lang.String AC_ZAP
    private static final java.lang.String DEPTH
    private static final java.lang.String POS
    public static final float TIME_TO_USE
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband:
    public static final java.lang.String AC_STEAL
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.SandalsOfNature:
    public static final java.lang.String AC_FEED
    public static final java.lang.String AC_ROOT
    private static final java.lang.String CUR_SEED_EFFECT
    private static final java.lang.String SEEDS
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$CharAwareness:
    private static final java.lang.String CHAR_ID
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$HeapAwareness:
    private static final java.lang.String BRANCH
    private static final java.lang.String DEPTH
    private static final java.lang.String POS
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight:
    public static final java.lang.String AC_SCRY
    private static final java.lang.String WARN
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$timeFreeze:
    private static final java.lang.String PRESSES
    private static final java.lang.String TURNSTOCOST
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass:
    public static final java.lang.String AC_ACTIVATE
    private static final java.lang.String BUFF
    private static final java.lang.String SANDBAGS
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook:
    public static final java.lang.String AC_ADD
    public static final java.lang.String AC_READ
    private static final java.lang.String SCROLLS
com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag:
    public static final java.lang.String AC_OPEN
    private static final java.lang.String ITEMS
    public void resurrect()
com.shatteredpixel.shatteredpixeldungeon.items.bags.MagicalHolster:
    public static final float HOLSTER_DURABILITY_FACTOR
    public static final float HOLSTER_SCALE_FACTOR
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb:
    private static final java.lang.String AC_LIGHTTHROW
    private static final java.lang.String FUSE
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Noisemaker$NoisemakerFuse:
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit:
    public static final java.lang.String POTIONATTRIB
com.shatteredpixel.shatteredpixeldungeon.items.food.Food:
    public static final java.lang.String AC_EAT
    public static final float TIME_TO_EAT
com.shatteredpixel.shatteredpixeldungeon.items.journal.DocumentPage:
    private static final java.lang.String PAGE
com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.items.keys.Key:
    private static final java.lang.String DEPTH
    public static final float TIME_TO_UNLOCK
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion:
    public static final java.lang.String AC_CHOOSE
    public static final java.lang.String AC_DRINK
    private static final float TIME_TO_DRINK
    public static java.util.HashSet getKnown()
com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfPurity:
    private static final int DISTANCE
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.AquaBrew$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Brew:
    public abstract void shatter(int)
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir:
    public abstract void apply(com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero)
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation$AquaHealing:
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall$FeatherBuff:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfCleansing$Cleanse:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDivineInspiration$DivineInspirationTracker:
    private static final java.lang.String BOOSTED_TIERS
com.shatteredpixel.shatteredpixeldungeon.items.quest.Pickaxe:
    public static final java.lang.String AC_MINE
    private static final java.lang.String BLOODSTAINED
    public static final float TIME_TO_MINE
com.shatteredpixel.shatteredpixeldungeon.items.remains.RemainsItem:
    public static final java.lang.String AC_USE
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring:
    private static final java.lang.String LEVELS_TO_ID
    public static boolean allKnown()
    public static java.util.HashSet getKnown()
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce$BrawlersStance:
    public static final java.lang.String ACTIVE
    public static final java.lang.String MIN_TURNS_LEFT
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth:
    private static final java.lang.String DROPS_TO_RARE
    private static final java.lang.String TRIES_TO_DROP
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll:
    public static final java.lang.String AC_READ
    protected static final float TIME_TO_READ
    public static java.util.HashSet getKnown()
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfMirrorImage:
    private static final int NIMAGES
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfChallenge$ChallengeArena:
    private static final java.lang.String ARENA_POSITIONS
    private static final float DURATION
    private static final java.lang.String LEFT
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDivination$WndDivination:
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis$WndMetamorphReplace:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize$WndAlchemizeItem:
    private static final int BTN_HEIGHT
    private static final float GAP
com.shatteredpixel.shatteredpixeldungeon.items.spells.BeaconOfReturning$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.spells.BeaconOfReturning:
    private static final java.lang.String BRANCH
    private static final java.lang.String DEPTH
    private static final java.lang.String POS
com.shatteredpixel.shatteredpixeldungeon.items.spells.CurseInfusion$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.spells.PhaseShift$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.spells.ReclaimTrap$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.spells.ReclaimTrap:
    private static final java.lang.String STORED_TRAP
com.shatteredpixel.shatteredpixeldungeon.items.spells.Recycle$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.spells.Spell:
    public static final java.lang.String AC_CAST
com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental:
    public static final java.lang.String AC_IMBUE
    private static final java.lang.String SUMMON_CLASS
com.shatteredpixel.shatteredpixeldungeon.items.spells.TelekineticGrab$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.spells.WildEnergy$Recipe:
    private static final int OUT_QUANTITY
com.shatteredpixel.shatteredpixeldungeon.items.stones.InventoryStone:
    public static final java.lang.String AC_USE
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAggression$Aggression:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAugmentation$WndAugment:
    private static final int BUTTON_HEIGHT
    private static final int BUTTON_WIDTH
    private static final int MARGIN
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfClairvoyance:
    private static final int DIST
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfDisarming$1
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfDisarming
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition$WndGuess:
    private static final int BTN_SIZE
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.MossyClump:
    private static final java.lang.String FEELS
    private static final java.lang.String SHUFFLES
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.ShardOfOblivion:
    public static final java.lang.String AC_IDENTIFY
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrapMechanism:
    private static final java.lang.String FEELS
    private static final java.lang.String SHUFFLES
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$WndTrinket:
    private static final int BTN_GAP
    private static final int BTN_SIZE
    private static final int GAP
    private static final int NUM_TRINKETS
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst:
    private static final java.lang.String ROLLED_TRINKETS
com.shatteredpixel.shatteredpixeldungeon.items.wands.CursedWand:
    public static com.shatteredpixel.shatteredpixeldungeon.items.wands.CursedWand$CursedEffect randomCommonEffect()
    public static com.shatteredpixel.shatteredpixeldungeon.items.wands.CursedWand$CursedEffect randomEffect()
    public static com.shatteredpixel.shatteredpixeldungeon.items.wands.CursedWand$CursedEffect randomRareEffect()
    public static com.shatteredpixel.shatteredpixeldungeon.items.wands.CursedWand$CursedEffect randomUncommonEffect()
    public static com.shatteredpixel.shatteredpixeldungeon.items.wands.CursedWand$CursedEffect randomVeryRareEffect()
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand$Charger:
    private static final float BASE_CHARGE_DELAY
    private static final float CHARGE_BUFF_BONUS
    private static final float NORMAL_SCALE_FACTOR
    private static final float SCALING_CHARGE_ADDITION
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand:
    public static final java.lang.String AC_ZAP
    private static final java.lang.String AVAILABLE_USES
    private static final java.lang.String CURSE_INFUSION_BONUS
    private static final java.lang.String CUR_CHARGES
    private static final java.lang.String CUR_CHARGE_KNOWN
    private static final java.lang.String PARTIALCHARGE
    private static final java.lang.String RESIN_BONUS
    private static final float TIME_TO_ZAP
    private static final java.lang.String USES_LEFT_TO_ID
    private static final int USES_TO_ID
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave$BlastWave:
    private static final float TIME_TO_FADE
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfCorruption:
    private static final float MAJOR_DEBUFF_WEAKEN
    private static final float MINOR_DEBUFF_WEAKEN
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$EarthGuardian:
    private static final java.lang.String DEFENSE
    private static final java.lang.String WAND_LEVEL
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$RockArmor:
    private static final java.lang.String ARMOR
    private static final java.lang.String WAND_LEVEL
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfMagicMissile$MagicCharge:
    private static final java.lang.String LEVEL
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Lotus:
    private static final java.lang.String WAND_LVL
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth:
    private static final java.lang.String OVER
    private static final java.lang.String TOTAL
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfTransfusion:
    private static final java.lang.String FREECHARGE
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfWarding$Ward:
    private static final java.lang.String TIER
    private static final java.lang.String TOTAL_ZAPS
    private static final java.lang.String WAND_LEVEL
com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow:
    public static final java.lang.String AC_SHOOT
com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon:
    private static final java.lang.String AUGMENT
    private static final java.lang.String AVAILABLE_USES
    private static final java.lang.String CURSE_INFUSION_BONUS
    private static final java.lang.String ENCHANTMENT
    private static final java.lang.String ENCHANT_HARDENED
    private static final java.lang.String MASTERY_POTION_BONUS
    private static final java.lang.String USES_LEFT_TO_ID
    private static final int USES_TO_ID
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Explosive:
    private static final java.lang.String DURABILITY
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Wayward$WaywardBuff:
    public static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic$ConservedDamage:
    private static final java.lang.String PRESERVED_DAMAGE
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff:
    public static final java.lang.String AC_IMBUE
    public static final java.lang.String AC_ZAP
    private static final float STAFF_SCALE_FACTOR
    private static final java.lang.String WAND
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon$Charger:
    public static final java.lang.String CHARGES
    private static final java.lang.String PARTIALCHARGE
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RoundShield$GuardTracker:
    private static final java.lang.String BLOCKED
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sai$ComboStrikeTracker:
    private static final java.lang.String TIME
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.HeavyBoomerang$CircleBack:
    private static final java.lang.String BOOMERANG
    private static final java.lang.String RETURN_BRANCH
    private static final java.lang.String RETURN_DEPTH
    private static final java.lang.String RETURN_POS
    private static final java.lang.String THROWN_POS
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon:
    private static final java.lang.String DURABILITY
    public static final float MAX_DURABILITY
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.Dart:
    protected static final java.lang.String AC_TIP
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart:
    private static final java.lang.String AC_CLEAN
com.shatteredpixel.shatteredpixeldungeon.journal.Bestiary:
    private static final java.lang.String BESTIARY_CLASSES
    private static final java.lang.String BESTIARY_ENCOUNTERS
    private static final java.lang.String BESTIARY_SEEN
com.shatteredpixel.shatteredpixeldungeon.journal.Catalog:
    private static final java.lang.String CATALOG_CLASSES
    private static final java.lang.String CATALOG_ITEMS
    private static final java.lang.String CATALOG_SEEN
    private static final java.lang.String CATALOG_USES
com.shatteredpixel.shatteredpixeldungeon.journal.Document:
    private static final java.lang.String DOCUMENTS
    public static final int FOUND
    public static final java.lang.String GUIDE_ALCHEMY
    public static final java.lang.String GUIDE_DIEING
    public static final java.lang.String GUIDE_EXAMINING
    public static final java.lang.String GUIDE_FOOD
    public static final java.lang.String GUIDE_IDING
    public static final java.lang.String GUIDE_INTRO
    public static final java.lang.String GUIDE_SEARCHING
    public static final java.lang.String GUIDE_SURPRISE_ATKS
    public static final java.lang.String KING_ATTRITION
    public static final int NOT_FOUND
    public static final int READ
    public boolean deletePage(int)
    public boolean findPage(int)
    public com.watabou.noosa.Image pageSprite()
    public boolean unreadPage(int)
com.shatteredpixel.shatteredpixeldungeon.journal.Journal:
    public static final java.lang.String JOURNAL_FILE
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.journal.Notes$CustomRecord:
    private static final java.lang.String BODY
    private static final java.lang.String ID_NUMBER
    private static final java.lang.String ITEM_CLASS
    private static final java.lang.String TITLE
    private static final java.lang.String TYPE
com.shatteredpixel.shatteredpixeldungeon.journal.Notes$KeyRecord:
    private static final java.lang.String KEY
com.shatteredpixel.shatteredpixeldungeon.journal.Notes$LandmarkRecord:
    private static final java.lang.String LANDMARK
com.shatteredpixel.shatteredpixeldungeon.journal.Notes$Record:
    private static final java.lang.String DEPTH
    public abstract boolean equals(java.lang.Object)
    public int quantity()
com.shatteredpixel.shatteredpixeldungeon.journal.Notes:
    private static final java.lang.String NEXT_CUSTOM_ID
    private static final java.lang.String RECORDS
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.levels.CavesBossLevel:
    private static final short W
    private static final short e
    private static final short n
    private static final short s
com.shatteredpixel.shatteredpixeldungeon.levels.CavesLevel$Vein:
    public void <init>(int)
com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel$CustomGroundVisuals:
    private static final int STAIR_ROWS
com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel:
    private static final java.lang.String IMP_SHOP
com.shatteredpixel.shatteredpixeldungeon.levels.DeadEndLevel:
    private static final int SIZE
com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel:
    private static final int HEIGHT
    private static final int ROOM_BOTTOM
    private static final int ROOM_LEFT
    private static final int ROOM_RIGHT
    private static final int ROOM_TOP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel:
    private static final int MID
    private static final int ROOM_TOP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.levels.Level:
    private static final java.lang.String BLOBS
    private static final java.lang.String CUSTOM_TILES
    private static final java.lang.String CUSTOM_WALLS
    private static final java.lang.String FEELING
    private static final java.lang.String HEAPS
    private static final java.lang.String HEIGHT
    private static final java.lang.String LOCKED
    private static final java.lang.String MAP
    private static final java.lang.String MAPPED
    private static final java.lang.String MOBS
    private static final java.lang.String PLANTS
    protected static final float TIME_TO_RESPAWN
    private static final java.lang.String TRANSITIONS
    private static final java.lang.String TRAPS
    private static final java.lang.String VERSION
    private static final java.lang.String VISITED
    private static final java.lang.String WIDTH
    public int entrance
    public int exit
    public void reset()
com.shatteredpixel.shatteredpixeldungeon.levels.Patch:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel:
    private static final int ENTRANCE_POS
    private static final java.lang.String STATE
    private static final java.lang.String STORED_ITEMS
    private static final java.lang.String TENGU
    private static final java.lang.String TRIGGERED
com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel:
    protected float[] trapChances()
    protected java.lang.Class[] trapClasses()
com.shatteredpixel.shatteredpixeldungeon.levels.Terrain:
    public static final int ALCHEMY
    public static final int AVOID
    public static final int BARRICADE
    public static final int BOOKSHELF
    public static final int CHASM
    public static final int CRYSTAL_DOOR
    public static final int CUSTOM_DECO
    public static final int CUSTOM_DECO_EMPTY
    public static final int DOOR
    public static final int EMBERS
    public static final int EMPTY
    public static final int EMPTY_DECO
    public static final int EMPTY_SP
    public static final int EMPTY_WELL
    public static final int ENTRANCE
    public static final int ENTRANCE_SP
    public static final int EXIT
    public static final int FLAMABLE
    public static final int FURROWED_GRASS
    public static final int GRASS
    public static final int HIGH_GRASS
    public static final int INACTIVE_TRAP
    public static final int LIQUID
    public static final int LOCKED_DOOR
    public static final int LOCKED_EXIT
    public static final int LOS_BLOCKING
    public static final int MINE_BOULDER
    public static final int MINE_CRYSTAL
    public static final int OPEN_DOOR
    public static final int PASSABLE
    public static final int PEDESTAL
    public static final int PIT
    public static final int SECRET
    public static final int SECRET_DOOR
    public static final int SECRET_TRAP
    public static final int SOLID
    public static final int STATUE
    public static final int STATUE_SP
    public static final int TRAP
    public static final int UNLOCKED_EXIT
    public static final int WALL
    public static final int WALL_DECO
    public static final int WATER
    public static final int WELL
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.levels.builders.BranchesBuilder
com.shatteredpixel.shatteredpixeldungeon.levels.builders.Builder:
    private static final double A
com.shatteredpixel.shatteredpixeldungeon.levels.builders.RegularBuilder:
    public com.shatteredpixel.shatteredpixeldungeon.levels.builders.RegularBuilder setExtraConnectionChance(float)
com.shatteredpixel.shatteredpixeldungeon.levels.features.Door:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.levels.features.HighGrass:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.levels.features.LevelTransition:
    public static final java.lang.String DEST_BRANCH
    public static final java.lang.String DEST_DEPTH
    public static final java.lang.String DEST_TYPE
    public static final java.lang.String TYPE
com.shatteredpixel.shatteredpixeldungeon.levels.features.Maze:
    public void <init>()
    public static boolean[][] generate(int,int)
    public static boolean[][] generate(com.watabou.utils.Rect)
    public static boolean[][] generate(com.watabou.utils.Rect,int[],int,int)
com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter:
    public static void fill(com.shatteredpixel.shatteredpixeldungeon.levels.Level,com.watabou.utils.Rect,int,int,int,int,int)
    public static void fillDiamond(com.shatteredpixel.shatteredpixeldungeon.levels.Level,com.watabou.utils.Rect,int)
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room:
    public static final int ALL
    public static final int BOTTOM
    public static final int LEFT
    public static final int RIGHT
    public static final int TOP
    public void <init>(com.watabou.utils.Rect)
    public boolean forceSize(int,int)
    public final java.util.ArrayList itemPlaceablePoints(com.shatteredpixel.shatteredpixeldungeon.levels.Level)
    public int minConnections(int)
    public void price(int)
    public com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room set(com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room)
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.ConnectionRoom:
    public int minConnections(int)
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MassGraveRoom$Bones:
    private static final int FLOOR
    private static final int WALL_OVERLAP
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom:
    private static final java.lang.String REGIONS
    private static final java.lang.String ROOMS
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.PoolRoom:
    private static final int NPIRANHAS
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom$Sentry:
    private static final java.lang.String CUR_DELAY
    private static final java.lang.String INITIAL_DELAY
    private static final java.lang.String ROOM
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom:
    private static final java.lang.String ENTRANCE
    private static final java.lang.String PIT
    private static final java.lang.String ROOMS
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CavesFissureRoom:
    private static final double A
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.HallwayRoom:
    protected final com.watabou.utils.Point getDoorCenter()
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ImpShopRoom:
    private static final java.lang.String IMP
    private static final java.lang.String ITEMS
com.shatteredpixel.shatteredpixeldungeon.levels.traps.DistortionTrap:
    private static final float DELAY
com.shatteredpixel.shatteredpixeldungeon.levels.traps.GatewayTrap:
    private static final java.lang.String TELE_POS
com.shatteredpixel.shatteredpixeldungeon.levels.traps.PitfallTrap$DelayedPit:
    private static final java.lang.String BRANCH
    private static final java.lang.String DEPTH
    private static final java.lang.String IGNORE_ALLIES
    private static final java.lang.String POSITIONS
com.shatteredpixel.shatteredpixeldungeon.levels.traps.SummoningTrap:
    private static final float DELAY
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap:
    private static final java.lang.String ACTIVE
    public static final int BLACK
    public static final int CROSSHAIR
    public static final int DIAMOND
    public static final int DOTS
    public static final int GREEN
    public static final int GREY
    public static final int GRILL
    public static final int LARGE_DOT
    public static final int ORANGE
    private static final java.lang.String POS
    public static final int RED
    public static final int STARS
    public static final int TEAL
    public static final int VIOLET
    private static final java.lang.String VISIBLE
    public static final int WAVES
    public static final int WHITE
    public static final int YELLOW
com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica:
    public static final int IGNORE_SOFT_SOLID
    public static final int MAGIC_BOLT
    public static final int PROJECTILE
    public static final int STOP_CHARS
    public static final int STOP_SOLID
    public static final int STOP_TARGET
    public static final int WONT_STOP
com.shatteredpixel.shatteredpixeldungeon.mechanics.ShadowCaster:
    public static final int MAX_DISTANCE
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.messages.Messages:
    public static final java.lang.String NO_TEXT_FOUND
    public void <init>()
    public static varargs java.lang.String get(java.lang.String,java.lang.Object[])
    public static java.lang.String lowerCase(java.lang.String)
com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot$Armor:
    private static final java.lang.String LEVEL
    private static final java.lang.String POS
    private static final float STEP
com.shatteredpixel.shatteredpixeldungeon.plants.Plant$Seed:
    public static final java.lang.String AC_PLANT
    private static final float TIME_TO_PLANT
com.shatteredpixel.shatteredpixeldungeon.plants.Plant:
    private static final java.lang.String POS
com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass$Health:
    private static final java.lang.String LEVEL
    private static final java.lang.String PARTIAL
    private static final java.lang.String POS
    private static final float STEP
com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle$TimeBubble:
    private static final java.lang.String LEFT
    private static final java.lang.String PRESSES
com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene:
    private static final int BTN_SIZE
com.shatteredpixel.shatteredpixeldungeon.scenes.AmuletScene:
    private static final int BTN_HEIGHT
    private static final float LARGE_GAP
    private static final float SMALL_GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene:
    private com.watabou.noosa.Group plants
    private com.watabou.noosa.Group traps
    public static void add(com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap)
    public static void add(com.shatteredpixel.shatteredpixeldungeon.plants.Plant)
    private void addPlantSprite(com.shatteredpixel.shatteredpixeldungeon.plants.Plant)
    private void addTrapSprite(com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap)
com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene$GameOptions$2:
    private static final long DAY
    private static final long HOUR
    private static final long MINUTE
    private static final long SECOND
com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene$HeroBtn:
    private static final int HEIGHT
    private static final int MIN_WIDTH
com.shatteredpixel.shatteredpixeldungeon.scenes.InterlevelScene:
    private static final float FAST_FADE
    private static final float NORM_FADE
    private static final float SLOW_FADE
com.shatteredpixel.shatteredpixeldungeon.scenes.JournalScene:
    public static final int WIDTH_L
    public static final int WIDTH_P
com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene:
    private static final int BTN_HEIGHT
    private static final int BTN_WIDTH
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene:
    public static final float MIN_HEIGHT_FULL
    public static final float MIN_HEIGHT_L
    public static final float MIN_HEIGHT_P
    public static final float MIN_WIDTH_FULL
    public static final float MIN_WIDTH_L
    public static final float MIN_WIDTH_P
com.shatteredpixel.shatteredpixeldungeon.scenes.RankingsScene$Record:
    private static final int FLARE_LOSE
    private static final int FLARE_WIN
    private static final float GAP
com.shatteredpixel.shatteredpixeldungeon.scenes.RankingsScene:
    private static final float GAP
    private static final float MAX_ROW_WIDTH
    private static final float ROW_HEIGHT_MAX
    private static final float ROW_HEIGHT_MIN
com.shatteredpixel.shatteredpixeldungeon.scenes.StartScene:
    private static final int SLOT_HEIGHT
    private static final int SLOT_WIDTH
com.shatteredpixel.shatteredpixeldungeon.scenes.SupporterScene:
    private static final int BTN_HEIGHT
    private static final int GAP
com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Avatar:
    private static final int HEIGHT
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$GrassPatch:
    public static final int HEIGHT
    public static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene:
    private static final int BUTTON_HEIGHT
    private static final int FRAME_HEIGHT
    private static final int FRAME_MARGIN_TOP
    private static final int FRAME_MARGIN_X
    private static final int FRAME_WIDTH
    private static final int NCLOUDS
    private static final int NSTARS
    private static final int SKY_HEIGHT
    private static final int SKY_WIDTH
com.shatteredpixel.shatteredpixeldungeon.scenes.WelcomeScene:
    private static final int LATEST_UPDATE
com.shatteredpixel.shatteredpixeldungeon.services.news.News:
    private static final long CHECK_DELAY
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.services.news.NewsImpl:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.services.news.ShatteredNews$1:
    public void cancelled()
com.shatteredpixel.shatteredpixeldungeon.services.updates.GitHubUpdates$1:
    public void cancelled()
com.shatteredpixel.shatteredpixeldungeon.services.updates.GitHubUpdates:
    public void initializeReview(com.shatteredpixel.shatteredpixeldungeon.services.updates.UpdateService$ReviewResultCallback)
    public void openReviewURI()
    public boolean supportsReviews()
com.shatteredpixel.shatteredpixeldungeon.services.updates.UpdateImpl:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.services.updates.UpdateService$ReviewResultCallback
com.shatteredpixel.shatteredpixeldungeon.services.updates.UpdateService:
    public abstract void initializeReview(com.shatteredpixel.shatteredpixeldungeon.services.updates.UpdateService$ReviewResultCallback)
    public abstract void openReviewURI()
    public abstract boolean supportsReviews()
com.shatteredpixel.shatteredpixeldungeon.services.updates.Updates$2
com.shatteredpixel.shatteredpixeldungeon.services.updates.Updates:
    private static final long CHECK_DELAY
    public void <init>()
    public static void launchReview(com.watabou.utils.Callback)
    public static void openReviewURI()
    public static boolean supportsReviews()
com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite:
    public static final int DEFAULT
    public static final float DEFAULT_MOVE_INTERVAL
    private static final float FLASH_INTERVAL
    public static final int NEGATIVE
    public static final int NEUTRAL
    public static final int POSITIVE
    public static final int WARNING
    public com.watabou.noosa.particles.Emitter bottomEmitter()
    public static void setMoveInterval(float)
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite:
    private static final float SLAM_TIME
com.shatteredpixel.shatteredpixeldungeon.sprites.HeroSprite:
    private static final int FRAME_HEIGHT
    private static final int FRAME_WIDTH
    private static final int RUN_FRAMERATE
com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite:
    private static final float DROP_INTERVAL
    public static final int SIZE
com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet$Icons:
    public static final int SIZE
    private static final int WIDTH
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet:
    public static final int SIZE
    private static final int WIDTH
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.sprites.MirrorSprite:
    private static final int FRAME_HEIGHT
    private static final int FRAME_WIDTH
com.shatteredpixel.shatteredpixeldungeon.sprites.MissileSprite:
    private static final int DEFAULT_ANGULAR_SPEED
    private static final float SPEED
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite:
    private static final float FADE_TIME
    private static final float FALL_TIME
com.shatteredpixel.shatteredpixeldungeon.sprites.NewbornElementalSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.RatKingSprite:
    public boolean festive
com.shatteredpixel.shatteredpixeldungeon.sprites.UndeadSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.WandmakerSprite:
    private com.shatteredpixel.shatteredpixeldungeon.effects.ShieldHalo shield
com.shatteredpixel.shatteredpixeldungeon.tiles.CustomTilemap:
    protected static final int SIZE
    private static final java.lang.String TILE_H
    private static final java.lang.String TILE_W
    private static final java.lang.String TILE_X
    private static final java.lang.String TILE_Y
    public void pos(int)
    public void setRect(int,int)
com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTileSheet:
    public static final int NULL_TILE
    private static final int WIDTH
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap:
    public static final int SIZE
    public int screenToTile(int,int)
com.shatteredpixel.shatteredpixeldungeon.tiles.FogOfWar:
    private static final int INVISIBLE
    private static final int MAPPED
    private static final int PIX_PER_TILE
    private static final int VISIBLE
    private static final int VISITED
com.shatteredpixel.shatteredpixeldungeon.tiles.WallBlockingTilemap:
    private static final int BLOCK_ALL
    private static final int BLOCK_BELOW
    private static final int BLOCK_LEFT
    private static final int BLOCK_NONE
    private static final int BLOCK_RIGHT
    private static final int CLEARED
    public static final int SIZE
    private boolean door(int)
com.shatteredpixel.shatteredpixeldungeon.ui.Archs:
    private static final float SCROLL_SPEED
com.shatteredpixel.shatteredpixeldungeon.ui.AttackIndicator:
    private static final float DISABLED
    private static final float ENABLED
com.shatteredpixel.shatteredpixeldungeon.ui.BadgesList$ListItem:
    private static final float HEIGHT
com.shatteredpixel.shatteredpixeldungeon.ui.Banner:
    public void <init>(java.lang.Object)
com.shatteredpixel.shatteredpixeldungeon.ui.BuffIcon:
    private static final int LRG_SIZE
    private static final int SML_SIZE
com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator:
    public static final int AMOK
    public static final int AMULET
    public static final int ANKH
    public static final int ARMOR
    public static final int BARKSKIN
    public static final int BERSERK
    public static final int BLEEDING
    public static final int BLESS
    public static final int BLINDNESS
    public static final int CHALLENGE
    public static final int COMBO
    public static final int CORRUPT
    public static final int CRIPPLE
    public static final int DAZE
    public static final int DEFERRED
    public static final int DEGRADE
    public static final int DISGUISE
    public static final int DROWSY
    public static final int DUEL_BRAWL
    public static final int DUEL_CLEAVE
    public static final int DUEL_COMBO
    public static final int DUEL_DANCE
    public static final int DUEL_EVASIVE
    public static final int DUEL_GUARD
    public static final int DUEL_SPIN
    public static final int DUEL_XBOW
    public static final int ENDURE
    public static final int FIRE
    public static final int FORESIGHT
    public static final int FROST
    public static final int FURY
    public static final int HASTE
    public static final int HEALING
    public static final int HEART
    public static final int HERB_HEALING
    public static final int HEX
    public static final int HUNGER
    public static final int IMBUE
    public static final int IMMUNITY
    public static final int INVERT_MARK
    public static final int INVISIBLE
    public static final int LEVITATION
    public static final int LIGHT
    public static final int LOCKED_FLOOR
    public static final int MAGIC_SLEEP
    public static final int MARK
    public static final int MIND_VISION
    public static final int MOMENTUM
    public static final int MONK_ENERGY
    public static final int NATURE_POWER
    public static final int NOINV
    public static final int NONE
    public static final int OOZE
    public static final int PARALYSIS
    public static final int PINCUSHION
    public static final int POISON
    public static final int PREPARATION
    public static final int RAGE
    public static final int RECHARGING
    public static final int ROOTS
    public static final int SACRIFICE
    public static final int SHADOWS
    public static final int SIZE_LARGE
    public static final int SIZE_SMALL
    public static final int STARVATION
    public static final int TARGETED
    public static final int TERROR
    public static final int THORNS
    public static final int TIME
    public static final int UPGRADE
    public static final int VERTIGO
    public static final int VULNERABLE
    public static final int WAND
    public static final int WEAKNESS
    public static final int WEAPON
    public static final int WELL_FED
com.shatteredpixel.shatteredpixeldungeon.ui.CharHealthIndicator:
    private static final int HEIGHT
    public com.shatteredpixel.shatteredpixeldungeon.actors.Char target()
com.shatteredpixel.shatteredpixeldungeon.ui.Compass:
    private static final float RADIUS
    private static final float RAD_2_G
com.shatteredpixel.shatteredpixeldungeon.ui.CurrencyIndicator:
    private static final float TIME
com.shatteredpixel.shatteredpixeldungeon.ui.DangerIndicator:
    public static final int COLOR
com.shatteredpixel.shatteredpixeldungeon.ui.GameLog:
    private static final int MAX_LINES
com.shatteredpixel.shatteredpixeldungeon.ui.HealthBar:
    private static final int COLOR_BG
    private static final int COLOR_HP
    private static final int COLOR_SHLD
    private static final int HEIGHT
    public void level(float)
com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon:
    public static final int ASSASSIN
    public static final int BATTLEMAGE
    public static final int BERSERK
    public static final int BERSERKER
    public static final int CHALLENGE
    public static final int CHAMPION
    public static final int COMBO
    public static final int DEATH_MARK
    public static final int ELEMENTAL_BLAST
    public static final int ELEMENTAL_STRIKE
    public static final int ENDURE
    public static final int FEINT
    public static final int FREERUNNER
    public static final int GLADIATOR
    public static final int HEROIC_LEAP
    public static final int MOMENTUM
    public static final int MONK
    public static final int MONK_ABILITIES
    public static final int NATURES_POWER
    public static final int NONE
    public static final int PREPARATION
    public static final int RATMOGRIFY
    public static final int SHADOW_CLONE
    public static final int SHOCKWAVE
    private static final int SIZE
    public static final int SMOKE_BOMB
    public static final int SNIPER
    public static final int SNIPERS_MARK
    public static final int SPECTRAL_BLADES
    public static final int SPIRIT_HAWK
    public static final int WARDEN
    public static final int WARLOCK
    public static final int WARP_BEACON
    public static final int WEAPON_SWAP
    public static final int WILD_MAGIC
com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane$BagButton:
    private static final int ACTIVE
    private static final int INACTIVE
com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane:
    public static final int HEIGHT
    private static final int SLOT_HEIGHT
    private static final int SLOT_WIDTH
    public static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.ui.InventorySlot:
    private static final int EQUIPPED
    private static final int NORMAL
com.shatteredpixel.shatteredpixeldungeon.ui.ItemSlot:
    public static final int CURSE_INFUSED
    public static final int DEGRADED
    private static final float DISABLED
    private static final float ENABLED
    public static final int ENHANCED
    public static final int FADED
    public static final int MASTERED
    private static final java.lang.String TXT_LEVEL
    private static final java.lang.String TXT_STRENGTH
    private static final java.lang.String TXT_TYPICAL_STR
    public static final int UPGRADED
    public static final int WARNING
com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane:
    public static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.ui.QuickRecipe$arrow:
    public void <init>(com.shatteredpixel.shatteredpixeldungeon.ui.QuickRecipe)
com.shatteredpixel.shatteredpixeldungeon.ui.RenderedTextBlock:
    public static final int CENTER_ALIGN
    public static final int LEFT_ALIGN
    public static final int RIGHT_ALIGN
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane:
    protected static final float THUMB_ALPHA
    protected static final int THUMB_COLOR
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingGridPane$GridHeader:
    public void <init>(java.lang.String)
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingGridPane:
    private static final int ITEM_SIZE
    private static final int MIN_GROUP_SIZE
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane$ListItem:
    public void <init>(com.watabou.noosa.Image,java.lang.String)
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane:
    private static final int ITEM_HEIGHT
    public void addItem(com.watabou.noosa.Image,java.lang.String,java.lang.String)
com.shatteredpixel.shatteredpixeldungeon.ui.StatusPane:
    public static final float FLASH_RATE
com.shatteredpixel.shatteredpixeldungeon.ui.TalentButton:
    public static final int HEIGHT
    public static final int WIDTH
    public void enable(boolean)
com.shatteredpixel.shatteredpixeldungeon.ui.TalentIcon:
    private static final int SIZE
com.shatteredpixel.shatteredpixeldungeon.ui.Toast:
    private static final float MARGIN_HOR
    private static final float MARGIN_VER
com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$PickedUpItem:
    private static final float DURATION
com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$Tool:
    private static final int BGCOLOR
com.shatteredpixel.shatteredpixeldungeon.ui.Window:
    public static final int SHPX_COLOR
    public static final int TITLE_COLOR
    public static final int WHITE
    public void <init>(int,int)
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.WndChangesTabbed:
    protected static final int GAP
    protected static final int WIDTH_MAX
    protected static final int WIDTH_MIN
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_1_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_2_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_3_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_4_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_5_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_6_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_7_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_8_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_9_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v1_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v2_X_Changes:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.utils.DungeonSeed:
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.utils.GLog:
    public static final java.lang.String HIGHLIGHT
    public static final java.lang.String NEGATIVE
    public static final java.lang.String NEW_LINE
    public static final java.lang.String POSITIVE
    public static final java.lang.String TAG
    public static final java.lang.String WARNING
    public void <init>()
com.shatteredpixel.shatteredpixeldungeon.windows.IconTitle:
    private static final float FONT_SIZE
    private static final float GAP
    public void health(float)
com.shatteredpixel.shatteredpixeldungeon.windows.WndBadge:
    private static final int MARGIN
    private static final int MAX_WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndBag:
    protected static final int COLS_L
    protected static final int COLS_P
    protected static final int SLOT_MARGIN
    protected static final int TITLE_HEIGHT
com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndReforge:
    private static final float BTN_GAP
    private static final int BTN_SIZE
    private static final float GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndSmith:
    private static final int BTN_GAP
    private static final int BTN_SIZE
    private static final int GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith:
    private static final int GAP
    private static final int WIDTH_L
    private static final int WIDTH_P
com.shatteredpixel.shatteredpixeldungeon.windows.WndChallenges:
    private static final int BTN_HEIGHT
    private static final int GAP
    private static final int TTL_HEIGHT
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndChooseAbility:
    private static final float GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndChooseSubclass:
    private static final float GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndCombo:
    private static final int MARGIN
    private static final int WIDTH_L
    private static final int WIDTH_P
com.shatteredpixel.shatteredpixeldungeon.windows.WndDailies:
    private static final int HEIGHT
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndDocument$1
com.shatteredpixel.shatteredpixeldungeon.windows.WndDocument
com.shatteredpixel.shatteredpixeldungeon.windows.WndEnergizeItem:
    private static final int BTN_HEIGHT
    private static final float GAP
com.shatteredpixel.shatteredpixeldungeon.windows.WndGame:
    private static final int BTN_HEIGHT
    private static final int GAP
    private static final int WIDTH
    private void addButtons(com.shatteredpixel.shatteredpixeldungeon.ui.RedButton,com.shatteredpixel.shatteredpixeldungeon.ui.RedButton)
com.shatteredpixel.shatteredpixeldungeon.windows.WndGameInProgress:
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$BuffsTab:
    private static final int GAP
com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$StatsTab:
    private static final int GAP
    public float height()
com.shatteredpixel.shatteredpixeldungeon.windows.WndHero:
    private static final int HEIGHT
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndImp:
    private static final int BTN_HEIGHT
    private static final int GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoBuff:
    private static final float GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoCell:
    private static final float GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem:
    private static final float GAP
    private static final int WIDTH_MAX
    private static final int WIDTH_MIN
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoMob$MobTitle:
    private static final int GAP
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoTalent:
    private static final float GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$AlchemyTab:
    private static final int NUM_BUTTONS
com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$CatalogTab:
    private static final int BESTIARY_IDX
    private static final int CONSUM_IDX
    private static final int EQUIP_IDX
    private static final int LORE_IDX
    private static final int NUM_BUTTONS
com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal:
    public static final int HEIGHT_L
    public static final int HEIGHT_P
    private static final int ITEM_HEIGHT
    public static final int WIDTH_L
    public static final int WIDTH_P
com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings$BindingItem:
    private static final int CHANGED
    private static final int DEFAULT
    private static final int HEIGHT
    private static final int UNBOUND
    private static final int UNBOUND_CHANGED
com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings:
    private static final int BTN_HEIGHT
    private static final int COL1_CENTER
    private static final int COL2_CENTER
    private static final int COL3_CENTER
    private static final int COL4_CENTER
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndList
com.shatteredpixel.shatteredpixeldungeon.windows.WndMessage:
    private static final int MARGIN
    private static final int WIDTH_MAX
    private static final int WIDTH_MIN
com.shatteredpixel.shatteredpixeldungeon.windows.WndMonkAbilities:
    private static final int MARGIN
    private static final int WIDTH_L
    private static final int WIDTH_P
com.shatteredpixel.shatteredpixeldungeon.windows.WndOptions:
    protected static final int BUTTON_HEIGHT
    protected static final int MARGIN
    protected static final int WIDTH_L
    protected static final int WIDTH_P
    public varargs void <init>(java.lang.String,java.lang.String,java.lang.String[])
com.shatteredpixel.shatteredpixeldungeon.windows.WndOptionsCondensed$1
com.shatteredpixel.shatteredpixeldungeon.windows.WndOptionsCondensed
com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$ItemButton:
    public static final int HEIGHT
com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking:
    private static final int HEIGHT
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndResurrect:
    private static final float BTN_GAP
    private static final int BTN_HEIGHT
    private static final int BTN_SIZE
    private static final float GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndSadGhost:
    private static final int BTN_GAP
    private static final int BTN_SIZE
    private static final int GAP
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndScoreBreakdown:
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$LangsTab:
    static final int BTN_HEIGHT
    static final int COLS_L
    static final int COLS_P
com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings:
    private static final int BTN_HEIGHT
    private static final float GAP
    private static final int SLIDER_HEIGHT
    private static final int WIDTH_L
    private static final int WIDTH_P
com.shatteredpixel.shatteredpixeldungeon.windows.WndStory:
    private static final int MARGIN
    private static final int WIDTH_L
    private static final int WIDTH_P
    public void <init>(java.lang.String)
    public com.shatteredpixel.shatteredpixeldungeon.windows.WndStory setDelays(float,float)
com.shatteredpixel.shatteredpixeldungeon.windows.WndSupportPrompt:
    protected static final int WIDTH_L
    protected static final int WIDTH_P
com.shatteredpixel.shatteredpixeldungeon.windows.WndTextInput:
    private static final int BUTTON_HEIGHT
    private static final int MARGIN
    private static final int WIDTH
    private static final int W_LAND_EXTRA
com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage:
    protected static final int GAP
    protected static final int WIDTH_MAX
    protected static final int WIDTH_MIN
com.shatteredpixel.shatteredpixeldungeon.windows.WndTradeItem:
    private static final int BTN_HEIGHT
    private static final float GAP
com.shatteredpixel.shatteredpixeldungeon.windows.WndUpgrade:
    private static final float COL_1
    private static final float COL_2
    private static final float COL_3
    private static final int GAP
    private static final int ITEMSLOT_SIZE
    private static final int WIDTH
com.shatteredpixel.shatteredpixeldungeon.windows.WndUseItem:
    private static final float BUTTON_HEIGHT
    private static final float GAP
com.shatteredpixel.shatteredpixeldungeon.windows.WndWandmaker:
    private static final int BTN_GAP
    private static final int BTN_SIZE
    private static final int GAP
    private static final int WIDTH
com.watabou.gltextures.Atlas
com.watabou.gltextures.SmartTexture:
    public com.watabou.gltextures.Atlas atlas
com.watabou.gltextures.TextureCache:
    public void <init>()
com.watabou.glwrap.Attribute:
    public void disable()
    public int location()
com.watabou.glwrap.Blending:
    public void <init>()
com.watabou.glwrap.Framebuffer
com.watabou.glwrap.Matrix:
    public static final float G2RAD
    public void <init>()
    public static float[] clone(float[])
    public static void multiply(float[],float[],float[])
    public static void skewY(float[],float)
com.watabou.glwrap.Program:
    public static varargs com.watabou.glwrap.Program create(com.watabou.glwrap.Shader[])
    public int handle()
com.watabou.glwrap.Quad:
    public void <init>()
    public static void fillUV(float[],float,float,float,float)
    public static void fillXY(float[],float,float,float,float)
com.watabou.glwrap.Renderbuffer
com.watabou.glwrap.Shader:
    public void delete()
com.watabou.glwrap.Texture:
    public static void activate(int)
    public static com.watabou.glwrap.Texture create(int,int,byte[])
    public static com.watabou.glwrap.Texture create(int,int,int[])
    public static com.watabou.glwrap.Texture create(com.badlogic.gdx.graphics.Pixmap)
    public void pixels(int,int,byte[])
    public void pixels(int,int,int[])
com.watabou.glwrap.Uniform:
    public void disable()
    public void enable()
    public int location()
    public void value1f(float)
    public void value2f(float,float)
    public void valueM3(float[])
com.watabou.input.ControllerHandler:
    public static final int CONTROLLER_POINTER_ID
com.watabou.input.GameAction:
    public static int totalActions()
com.watabou.input.KeyBindings:
    public void <init>()
com.watabou.input.PointerEvent:
    public static final int BACK
    public static final int FORWARD
    public static final int LEFT
    public static final int MIDDLE
    public static final int NONE
    public static final int RIGHT
    public void update(int,int)
    public void update(com.watabou.input.PointerEvent)
com.watabou.input.ScrollEvent:
    public static void clearListeners()
com.watabou.noosa.BitmapText$Font:
    public static final java.lang.String LATIN_FULL
    public void <init>(com.watabou.gltextures.SmartTexture,int,int,java.lang.String)
    public void <init>(com.watabou.gltextures.SmartTexture,int,java.lang.String)
    public static com.watabou.noosa.BitmapText$Font colorMarked(com.watabou.gltextures.SmartTexture,int,int,java.lang.String)
com.watabou.noosa.BitmapText:
    public com.watabou.noosa.BitmapText$Font font()
    public synchronized void font(com.watabou.noosa.BitmapText$Font)
    public java.lang.String text()
com.watabou.noosa.Group:
    public synchronized int countDead()
    public synchronized int indexOf(com.watabou.noosa.Gizmo)
    public synchronized com.watabou.noosa.Gizmo random()
    public synchronized com.watabou.noosa.Gizmo replace(com.watabou.noosa.Gizmo,com.watabou.noosa.Gizmo)
com.watabou.noosa.Halo:
    protected static final int RADIUS
com.watabou.noosa.NinePatch:
    public void flipVertical(boolean)
    public float innerBottom()
    public float innerRight()
com.watabou.noosa.NoosaScript:
    private static final java.lang.String SHADER
com.watabou.noosa.NoosaScriptNoLighting:
    private static final java.lang.String SHADER
com.watabou.noosa.PointerArea:
    public static final int ALWAYS_BLOCK
    public static final int BLOCK_WHEN_ACTIVE
    public static final int NEVER_BLOCK
com.watabou.noosa.PseudoPixel:
    public void <init>(float,float,int)
    public void size(float,float)
com.watabou.noosa.RenderedText$TextRenderBatch:
    public void disableBlending()
    public void draw(com.badlogic.gdx.graphics.Texture,float,float)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float,float,int,int,int,int,boolean,boolean)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,int,int,int,int,boolean,boolean)
    public void draw(com.badlogic.gdx.graphics.Texture,float,float,int,int,int,int)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float,boolean)
    public void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,com.badlogic.gdx.math.Affine2)
    public void enableBlending()
    public int getBlendDstFunc()
    public int getBlendDstFuncAlpha()
    public int getBlendSrcFunc()
    public int getBlendSrcFuncAlpha()
    public com.badlogic.gdx.math.Matrix4 getProjectionMatrix()
    public com.badlogic.gdx.graphics.glutils.ShaderProgram getShader()
    public boolean isBlendingEnabled()
    public boolean isDrawing()
    public void setBlendFunction(int,int)
    public void setBlendFunctionSeparate(int,int,int,int)
    public void setShader(com.badlogic.gdx.graphics.glutils.ShaderProgram)
com.watabou.noosa.RenderedText:
    public void <init>(int)
    public void size(int)
    public java.lang.String text()
    public void text(java.lang.String)
com.watabou.noosa.Resizable
com.watabou.noosa.Scene:
    public void onResume()
com.watabou.noosa.SkinnedBlock:
    public float offsetX()
    public void scale(float,float)
com.watabou.noosa.Visual:
    public void invert()
    public com.watabou.utils.Point point(com.watabou.utils.Point)
com.watabou.noosa.audio.Music:
    public synchronized boolean isEnabled()
    public synchronized void pause()
    public synchronized void resume()
com.watabou.noosa.audio.Sample:
    public boolean isEnabled()
    public synchronized void pause()
    public synchronized void resume()
    public synchronized void unload(java.lang.Object)
com.watabou.noosa.particles.BitmaskEmitter
com.watabou.noosa.particles.Emitter:
    public void pos(com.watabou.noosa.Visual,float,float,float,float)
com.watabou.noosa.tweeners.CameraScrollTweener
com.watabou.noosa.tweeners.Delayer:
    public void <init>()
com.watabou.noosa.ui.Cursor:
    public void <init>()
com.watabou.utils.BArray:
    public void <init>()
    public static boolean[] is(int[],boolean[],int)
    public static boolean[] isNot(int[],boolean[],int)
    public static varargs boolean[] isNotOneOf(int[],boolean[],int[])
    public static varargs boolean[] isOneOf(int[],boolean[],int[])
com.watabou.utils.BitmapCache$1
com.watabou.utils.BitmapCache$Layer
com.watabou.utils.BitmapCache
com.watabou.utils.BitmapFilm
com.watabou.utils.Bundle:
    private static final java.lang.String CLASS_NAME
    public static final java.lang.String DEFAULT_KEY
    private static final int GZIP_BUFFER
    private static final boolean compressByDefault
    public boolean remove(java.lang.String)
com.watabou.utils.ColorMath:
    public void <init>()
com.watabou.utils.DeviceCompat:
    public void <init>()
com.watabou.utils.FileUtils:
    public void <init>()
    public static boolean deleteDir(java.lang.String)
    public static boolean fileExists(java.lang.String)
com.watabou.utils.GameMath:
    public void <init>()
    public static float speed(float,float)
com.watabou.utils.GameSettings:
    public static final java.lang.String DEFAULT_PREFS_FILE
    public void <init>()
com.watabou.utils.Graph$Node:
    public abstract void price(int)
com.watabou.utils.Graph:
    public void <init>()
    public static java.util.List buildPath(java.util.Collection,com.watabou.utils.Graph$Node,com.watabou.utils.Graph$Node)
    public static void setPrice(java.util.List,int)
com.watabou.utils.PathFinder:
    public void <init>()
com.watabou.utils.Point:
    public float length()
    public com.watabou.utils.Point scale(float)
    public com.watabou.utils.Point set(com.watabou.utils.Point)
com.watabou.utils.PointF:
    public static final float G2R
    public static final float PI
    public static final float PI2
    public com.watabou.utils.Point floor()
    public static com.watabou.utils.PointF sum(com.watabou.utils.PointF,com.watabou.utils.PointF)
com.watabou.utils.Random:
    public void <init>()
    public static synchronized int Int()
    public static synchronized int Int(boolean)
    public static void shuffle(java.lang.Object[])
    public static void shuffle(java.lang.Object[],java.lang.Object[])
com.watabou.utils.Rect:
    public com.watabou.utils.Rect scale(int)
    public com.watabou.utils.Rect union(com.watabou.utils.Point)
com.watabou.utils.RectF:
    public void <init>(com.watabou.utils.Rect)
    public boolean inside(com.watabou.utils.Point)
    public com.watabou.utils.RectF intersect(com.watabou.utils.RectF)
    public boolean isEmpty()
    public com.watabou.utils.RectF resize(float,float)
    public com.watabou.utils.RectF set(com.watabou.utils.Rect)
    public com.watabou.utils.RectF setEmpty()
    public com.watabou.utils.RectF setPos(float,float)
    public com.watabou.utils.RectF shrink()
    public com.watabou.utils.RectF shrink(float)
    public float square()
    public com.watabou.utils.RectF union(float,float)
    public com.watabou.utils.RectF union(com.watabou.utils.Point)
    public com.watabou.utils.RectF union(com.watabou.utils.RectF)
com.watabou.utils.Reflection:
    public void <init>()
    public static java.lang.Class forNameUnhandled(java.lang.String)
com.watabou.utils.Signal:
    public synchronized int numListeners()
org.json.CDL
org.json.Cookie
org.json.CookieList
org.json.HTTP
org.json.HTTPTokener
org.json.JSONArray:
    public void <init>(java.lang.String)
    public java.math.BigDecimal getBigDecimal(int)
    public java.math.BigInteger getBigInteger(int)
    public java.lang.Enum getEnum(java.lang.Class,int)
    public org.json.JSONArray getJSONArray(int)
    public boolean isNull(int)
    public java.lang.String join(java.lang.String)
    public java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal)
    public java.math.BigInteger optBigInteger(int,java.math.BigInteger)
    public boolean optBoolean(int)
    public boolean optBoolean(int,boolean)
    public double optDouble(int)
    public java.lang.Enum optEnum(java.lang.Class,int)
    public java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum)
    public int optInt(int)
    public int optInt(int,int)
    public org.json.JSONArray optJSONArray(int)
    public org.json.JSONObject optJSONObject(int)
    public long optLong(int)
    public long optLong(int,long)
    public java.lang.Object optQuery(java.lang.String)
    public java.lang.Object optQuery(org.json.JSONPointer)
    public java.lang.String optString(int)
    public java.lang.String optString(int,java.lang.String)
    public org.json.JSONArray put(double)
    public org.json.JSONArray put(int)
    public org.json.JSONArray put(int,java.util.Collection)
    public org.json.JSONArray put(int,java.util.Map)
    public org.json.JSONArray put(long)
    public org.json.JSONArray put(java.util.Collection)
    public org.json.JSONArray put(java.util.Map)
    public org.json.JSONArray put(boolean)
    public java.lang.Object query(java.lang.String)
    public java.lang.Object query(org.json.JSONPointer)
    public java.lang.Object remove(int)
    public boolean similar(java.lang.Object)
    public org.json.JSONObject toJSONObject(org.json.JSONArray)
    public java.util.List toList()
    public java.io.Writer write(java.io.Writer)
org.json.JSONException:
    private static final long serialVersionUID
org.json.JSONML
org.json.JSONObject:
    public void <init>(java.lang.Object,java.lang.String[])
    public void <init>(java.lang.String)
    public void <init>(java.lang.String,java.util.Locale)
    public void <init>(org.json.JSONObject,java.lang.String[])
    public org.json.JSONObject accumulate(java.lang.String,java.lang.Object)
    public org.json.JSONObject append(java.lang.String,java.lang.Object)
    public static java.lang.String doubleToString(double)
    public java.math.BigDecimal getBigDecimal(java.lang.String)
    public java.math.BigInteger getBigInteger(java.lang.String)
    public java.lang.Enum getEnum(java.lang.Class,java.lang.String)
    public org.json.JSONObject getJSONObject(java.lang.String)
    public static java.lang.String[] getNames(java.lang.Object)
    public static java.lang.String[] getNames(org.json.JSONObject)
    public boolean has(java.lang.String)
    public org.json.JSONObject increment(java.lang.String)
    public org.json.JSONArray names()
    public java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal)
    public java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger)
    public double optDouble(java.lang.String)
    public java.lang.Enum optEnum(java.lang.Class,java.lang.String)
    public java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum)
    public org.json.JSONArray optJSONArray(java.lang.String)
    public java.lang.Object optQuery(java.lang.String)
    public java.lang.Object optQuery(org.json.JSONPointer)
    public org.json.JSONObject put(java.lang.String,java.util.Collection)
    public org.json.JSONObject put(java.lang.String,java.util.Map)
    public org.json.JSONObject putOpt(java.lang.String,java.lang.Object)
    public java.lang.Object query(java.lang.String)
    public java.lang.Object query(org.json.JSONPointer)
    public boolean similar(java.lang.Object)
    public org.json.JSONArray toJSONArray(org.json.JSONArray)
    public java.util.Map toMap()
    public static java.lang.String valueToString(java.lang.Object)
    public java.io.Writer write(java.io.Writer)
org.json.JSONPointer$Builder
org.json.JSONPointer
org.json.JSONPointerException
org.json.JSONStringer
org.json.JSONTokener:
    public void <init>(java.io.InputStream)
    public static int dehexchar(char)
    public boolean more()
    public char next(char)
    public java.lang.String nextTo(char)
    public java.lang.String nextTo(java.lang.String)
    public char skipTo(char)
org.json.JSONWriter
org.json.Property
org.json.XML$1$1
org.json.XML$1
org.json.XML
org.json.XMLTokener
com.badlogic.gdx.AbstractInput:
    public abstract boolean isCatchKey()
com.badlogic.gdx.Application$ApplicationType:
    public static final enum com.badlogic.gdx.Application$ApplicationType HeadlessDesktop
com.badlogic.gdx.ApplicationLogger:
    public abstract void error()
    public abstract void error$1()
    public abstract void log()
    public abstract void log$1()
com.badlogic.gdx.Audio:
    public abstract com.badlogic.gdx.backends.android.AndroidMusic newMusic(com.badlogic.gdx.files.FileHandle)
com.badlogic.gdx.Gdx:
    public static com.badlogic.gdx.backends.android.AndroidGL30 gl30
com.badlogic.gdx.Graphics$BufferFormat
com.badlogic.gdx.Graphics:
    public abstract int getBackBufferHeight()
    public abstract int getBackBufferWidth()
    public abstract float getDeltaTime()
    public abstract float getDensity()
    public abstract com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode getDisplayMode()
    public abstract com.badlogic.gdx.graphics.glutils.GLVersion getGLVersion()
    public abstract int getHeight()
    public abstract int getSafeInsetBottom()
    public abstract int getSafeInsetLeft()
    public abstract int getSafeInsetRight()
    public abstract int getSafeInsetTop()
    public abstract int getWidth()
    public abstract boolean isGL30Available()
    public abstract void newCursor()
    public abstract void requestRendering()
    public abstract void setCursor()
    public abstract boolean supportsExtension(java.lang.String)
com.badlogic.gdx.Input$OnscreenKeyboardType$EnumUnboxingLocalUtility
com.badlogic.gdx.Input$OnscreenKeyboardType$EnumUnboxingSharedUtility:
    public static final synthetic int[] $VALUES
    public static synthetic java.lang.Integer boxedOrdinalOrNull(int)
    public static synthetic void checkNotZero(int)
    public static synthetic void checkNotZero(int,java.lang.String)
    public static synthetic int compareTo(int,int)
    public static synthetic boolean equals(int,int)
    public static synthetic boolean objects$equals(int,int)
    public static synthetic int[] values(int)
com.badlogic.gdx.Input$OnscreenKeyboardType
com.badlogic.gdx.Input$Orientation$EnumUnboxingLocalUtility
com.badlogic.gdx.Input$Orientation
com.badlogic.gdx.Input$Peripheral$EnumUnboxingLocalUtility
com.badlogic.gdx.Input$Peripheral
com.badlogic.gdx.Input:
    public abstract void setCursorCatched()
    public abstract void setCursorPosition()
com.badlogic.gdx.Net$HttpRequest:
    public java.lang.String content
    public long contentLength
    public java.io.InputStream contentStream
    public boolean followRedirects
    public boolean includeCredentials
    public int timeOut
    public static java.lang.String getContent()
    public static java.io.InputStream getContentStream()
    public static boolean getFollowRedirects()
    public static java.util.Map getHeaders()
    public static java.lang.String getMethod()
    public static int getTimeOut()
    public static java.lang.String getUrl()
    public static void setHeader()
    public static void setUrl()
com.badlogic.gdx.Net$HttpResponse:
    public abstract java.io.InputStream getResultAsStream()
com.badlogic.gdx.Net:
    public abstract boolean openURI()
    public abstract void sendHttpRequest(com.badlogic.gdx.Net$HttpRequest,com.badlogic.gdx.Net$HttpResponseListener)
com.badlogic.gdx.Preferences:
    public abstract boolean contains()
    public abstract void flush()
    public abstract boolean getBoolean()
    public abstract int getInteger()
    public abstract long getLong()
    public abstract java.lang.String getString()
    public abstract com.badlogic.gdx.Preferences putBoolean()
    public abstract com.badlogic.gdx.Preferences putInteger()
    public abstract com.badlogic.gdx.Preferences putLong()
    public abstract com.badlogic.gdx.Preferences putString()
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback
com.badlogic.gdx.assets.AssetLoaderParameters
com.badlogic.gdx.assets.AssetManager
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter
com.badlogic.gdx.audio.Music:
    public abstract boolean isLooping()
    public abstract boolean isPlaying()
    public abstract void play()
    public abstract void setLooping()
    public abstract void setOnCompletionListener()
    public abstract void setVolume(float)
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration$1:
    public final synthetic com.badlogic.gdx.backends.android.AndroidApplicationConfiguration this$0
    public final void load()
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration:
    public int a
    public boolean disableAudio
    public boolean getTouchEventsForLiveWallpaper
    public int maxNetThreads
    public int maxSimultaneousSounds
    public int numSamples
    public int sensorDelay
    public int stencil
    public int touchSleepTime
    public boolean useGL30
    public boolean useGyroscope
    public boolean useRotationVectorSensor
    public boolean useWakelock
com.badlogic.gdx.backends.android.AndroidApplicationLogger:
    public final void error()
    public final void error$1()
    public final void log()
    public final void log$1()
com.badlogic.gdx.backends.android.AndroidAudio:
    public abstract void notifyMusicDisposed()
    public abstract void pause()
    public abstract void resume()
com.badlogic.gdx.backends.android.AndroidClipboard:
    public final boolean hasContents()
    public final void setContents(java.lang.String)
com.badlogic.gdx.backends.android.AndroidFiles:
    public abstract void getExpansionFile()
com.badlogic.gdx.backends.android.AndroidGL20:
    public final void glAttachShader()
    public final void glBindBuffer()
    public final void glBindFramebuffer()
    public final void glBindRenderbuffer()
    public final void glBindTexture()
    public final void glBlendFunc()
    public final void glBlendFuncSeparate()
    public final void glBufferData()
    public final void glBufferSubData()
    public final int glCheckFramebufferStatus()
    public final void glClear()
    public final void glCompileShader()
    public final void glCompressedTexImage2D()
    public final int glCreateProgram()
    public final int glCreateShader()
    public final void glDeleteBuffer(int)
    public final void glDeleteFramebuffer()
    public final void glDeleteProgram()
    public final void glDeleteRenderbuffer()
    public final void glDeleteShader()
    public final void glDeleteTexture(int)
    public final void glDepthMask()
    public final void glDisable()
    public final void glDisableVertexAttribArray()
    public final void glDrawArrays()
    public final void glDrawElements()
    public final void glDrawElements$1()
    public final void glEnable()
    public final void glEnableVertexAttribArray()
    public final void glFramebufferRenderbuffer()
    public final void glFramebufferTexture2D()
    public final int glGenFramebuffer()
    public final int glGenRenderbuffer()
    public final int glGenTexture()
    public final void glGenerateMipmap()
    public final java.lang.String glGetActiveAttrib()
    public final java.lang.String glGetActiveUniform()
    public final int glGetAttribLocation()
    public final void glGetFloatv()
    public final void glGetIntegerv()
    public final java.lang.String glGetProgramInfoLog()
    public final void glGetProgramiv()
    public final java.lang.String glGetShaderInfoLog()
    public final void glGetShaderiv()
    public final java.lang.String glGetString()
    public final int glGetUniformLocation()
    public final void glLinkProgram()
    public final void glPixelStorei()
    public final void glRenderbufferStorage()
    public final void glScissor()
    public final void glShaderSource()
    public final void glTexImage2D()
    public final void glTexParameterf()
    public final void glTexParameteri()
    public final void glTexSubImage2D()
    public final void glUniform1i()
    public final void glUniform4f()
    public final void glUniformMatrix4fv()
    public final void glUseProgram()
    public final void glVertexAttribPointer()
    public final void glVertexAttribPointer$1()
    public final void glViewport()
com.badlogic.gdx.backends.android.AndroidGL30$$InternalSyntheticApiModelOutline$1$25c51da43d8a58df43272b10d7894f31243ccc986c3c9c58bab95d5b0f7142ad$0
com.badlogic.gdx.backends.android.AndroidGL30$$InternalSyntheticApiModelOutline$1$36e27ac58718c1a02ff9ad5c6ca36580f7b3b46ba4442709d5cf34641b7d5d04$0
com.badlogic.gdx.backends.android.AndroidGL30$$InternalSyntheticApiModelOutline$1$69fd2f666d4dfec32889cb27e323b15b746daa9360131e42e29d897e20527de4$0
com.badlogic.gdx.backends.android.AndroidGL30$$InternalSyntheticApiModelOutline$1$7e6997f78e8b58df8192a3a44c9a9b8d44d02cb7c13a7575f9051d541c32823a$0
com.badlogic.gdx.backends.android.AndroidGL30$$InternalSyntheticApiModelOutline$1$7e6997f78e8b58df8192a3a44c9a9b8d44d02cb7c13a7575f9051d541c32823a$1
com.badlogic.gdx.backends.android.AndroidGL30$$InternalSyntheticApiModelOutline$1$8c8b64b3dbc6f9a33b7629397d42c024d9866511fb866e47ed0efbed539a94a4$0
com.badlogic.gdx.backends.android.AndroidGL30$$InternalSyntheticApiModelOutline$1$95297458fc03be5a16841c3519b056a00ddb83553f5c22664639beb0bd29d6c0$0
com.badlogic.gdx.backends.android.AndroidGL30$$InternalSyntheticApiModelOutline$1$9e6a3e6e9bb74646e1a86ea9f7db3321325a7ba9b2281da56aa43ac78e15d135$0
com.badlogic.gdx.backends.android.AndroidGL30
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode:
    public final synthetic com.badlogic.gdx.backends.android.AndroidGraphics this$0
com.badlogic.gdx.backends.android.AndroidGraphics:
    public com.badlogic.gdx.Graphics$BufferFormat bufferFormat
    public javax.microedition.khronos.egl.EGLContext eglContext
    public int fps
    public long frameId
    public int frames
    public com.badlogic.gdx.backends.android.AndroidGL30 gl30
    public float ppcX
    public float ppcY
    public float ppiX
    public float ppiY
    static void <clinit>()
    public static boolean checkGL20()
    public static void clearManagedCaches()
    public static com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 createGLSurfaceView()
    public final int getBackBufferHeight()
    public final int getBackBufferWidth()
    public final float getDeltaTime()
    public final float getDensity()
    public static android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser()
    public final com.badlogic.gdx.graphics.glutils.GLVersion getGLVersion()
    public final int getHeight()
    public final int getSafeInsetBottom()
    public final int getSafeInsetLeft()
    public final int getSafeInsetRight()
    public final int getSafeInsetTop()
    public static android.view.View getView()
    public final int getWidth()
    public static boolean isContinuousRendering()
    public final boolean isGL30Available()
    public static void logConfig()
    public final void newCursor()
    public static void onPauseGLSurfaceView()
    public static void onResumeGLSurfaceView()
    public static void pause()
    public static void preserveEGLContextOnPause()
    public static void resume()
    public final void setContinuousRendering(boolean)
    public final void setCursor()
    public static void setupGL()
    public final void updatePpi()
com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$25c2d081d383883a66426168b651a388b981d89b0aef0f265e3eab19b2606248$1
com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$25c2d081d383883a66426168b651a388b981d89b0aef0f265e3eab19b2606248$2
com.badlogic.gdx.backends.android.AndroidHaptics$$InternalSyntheticApiModelOutline$1$25c2d081d383883a66426168b651a388b981d89b0aef0f265e3eab19b2606248$3
com.badlogic.gdx.backends.android.AndroidHaptics:
    public android.media.AudioAttributes audioAttributes
    public boolean hapticsSupport
    public static boolean hasHapticsSupport()
    public static boolean hasVibratorAvailable()
    public static void vibrate()
com.badlogic.gdx.backends.android.AndroidMouseHandler:
    public static boolean onGenericMotion()
    public static void postTouchEvent(com.badlogic.gdx.backends.android.DefaultAndroidInput,int,int,int,int,int,long)
com.badlogic.gdx.backends.android.AndroidMusic:
    public boolean isPrepared
    public float volume
    public final boolean isLooping()
    public final boolean isPlaying()
    public final void pause()
    public final void setLooping()
    public final void setOnCompletionListener()
    public final void setVolume(float)
com.badlogic.gdx.backends.android.AndroidNet:
    public final boolean openURI()
com.badlogic.gdx.backends.android.AndroidPreferences:
    public final boolean contains()
    public final void edit()
    public final void flush()
    public final boolean getBoolean()
    public final int getInteger()
    public final long getLong()
    public final java.lang.String getString()
    public final com.badlogic.gdx.Preferences putBoolean()
    public final com.badlogic.gdx.Preferences putInteger()
    public final com.badlogic.gdx.Preferences putLong()
    public final com.badlogic.gdx.Preferences putString()
com.badlogic.gdx.backends.android.AndroidSound:
    public final android.media.AudioManager manager
com.badlogic.gdx.backends.android.AndroidTouchHandler:
    public static void onTouch()
    public static boolean supportsMultitouch()
    public static int toGdxButton()
com.badlogic.gdx.backends.android.AndroidVisibilityListener$1:
    public final synthetic com.badlogic.gdx.backends.android.AndroidVisibilityListener this$0
com.badlogic.gdx.backends.android.AndroidVisibilityListener
com.badlogic.gdx.backends.android.AndroidZipFileHandle
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$1574dc45ee253ee7c2ef7eefeb92cd1e1dca73d75c091a85ae8f91a0d4f43115$0
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$1574dc45ee253ee7c2ef7eefeb92cd1e1dca73d75c091a85ae8f91a0d4f43115$1
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$1574dc45ee253ee7c2ef7eefeb92cd1e1dca73d75c091a85ae8f91a0d4f43115$2
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$1574dc45ee253ee7c2ef7eefeb92cd1e1dca73d75c091a85ae8f91a0d4f43115$3
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$1574dc45ee253ee7c2ef7eefeb92cd1e1dca73d75c091a85ae8f91a0d4f43115$4
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$1574dc45ee253ee7c2ef7eefeb92cd1e1dca73d75c091a85ae8f91a0d4f43115$5
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$c23ec9102d7fe4f7b30eec9f399b786371083729855bfe24ba6c64a865fb387a$0
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$c23ec9102d7fe4f7b30eec9f399b786371083729855bfe24ba6c64a865fb387a$1
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$c23ec9102d7fe4f7b30eec9f399b786371083729855bfe24ba6c64a865fb387a$2
com.badlogic.gdx.backends.android.DefaultAndroidAudio$$InternalSyntheticApiModelOutline$1$c23ec9102d7fe4f7b30eec9f399b786371083729855bfe24ba6c64a865fb387a$3
com.badlogic.gdx.backends.android.DefaultAndroidAudio:
    public final android.media.AudioManager manager
    public static android.media.MediaPlayer createMediaPlayer()
    public final void pause()
com.badlogic.gdx.backends.android.DefaultAndroidFiles:
    public com.badlogic.gdx.backends.android.ZipResourceFile expansionFile
    public final void getExpansionFile()
    public static com.badlogic.gdx.files.FileHandle getZipFileHandleIfExists()
    public static java.lang.String initExternalFilesPath()
com.badlogic.gdx.backends.android.DefaultAndroidInput$1:
    public final synthetic com.badlogic.gdx.backends.android.DefaultAndroidInput this$0
    public static com.badlogic.gdx.backends.android.DefaultAndroidInput$KeyEvent newObject()
com.badlogic.gdx.backends.android.DefaultAndroidInput$2:
    public final synthetic com.badlogic.gdx.backends.android.DefaultAndroidInput this$0
    public static com.badlogic.gdx.backends.android.DefaultAndroidInput$TouchEvent newObject()
com.badlogic.gdx.backends.android.DefaultAndroidInput$4:
    public final synthetic int val$type
com.badlogic.gdx.backends.android.DefaultAndroidInput$5
com.badlogic.gdx.backends.android.DefaultAndroidInput:
    public final float[] R
    public float azimuth
    public boolean compassAvailable
    public long currentEventTimeStamp
    public boolean gyroscopeAvailable
    public android.hardware.SensorEventListener gyroscopeListener
    public final boolean hasMultitouch
    public final float[] orientation
    public float pitch
    public float roll
    public boolean rotationVectorAvailable
    public android.hardware.SensorEventListener rotationVectorListener
    public int sleepTime
    public static int getRotation()
    public static void registerSensorListeners()
    public static float[] resize()
    public static boolean[] resize()
    public final void setCursorCatched()
    public final void setCursorPosition()
    public static void setOnscreenKeyboardVisible()
    public static void unregisterSensorListeners()
com.badlogic.gdx.backends.android.GdxNativeLoader
com.badlogic.gdx.backends.android.ZipResourceFile$ZipEntryRO
com.badlogic.gdx.backends.android.ZipResourceFile
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy:
    public final com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1:
    public static void sendDownUpKeyEventForBackwardCompatibility()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser:
    public static int EGL_OPENGL_ES2_BIT
    public int mBlueSize
    public int mDepthSize
    public int mGreenSize
    public int mRedSize
    public int mStencilSize
    public static javax.microedition.khronos.egl.EGLConfig chooseConfig()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory:
    public static int EGL_CONTEXT_CLIENT_VERSION
    static void <clinit>()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20:
    public static java.lang.String TAG
    static void <clinit>()
    public static boolean checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10)
    public static void init()
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser:
    public int mAlphaSize
    public int mNumSamples
    public int mStencilSize
    public static javax.microedition.khronos.egl.EGLConfig chooseConfig()
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy
com.badlogic.gdx.controllers.Controller:
    public abstract boolean canVibrate()
    public abstract com.badlogic.gdx.controllers.android.AndroidControllerMapping getMapping()
    public abstract java.lang.String getName()
    public abstract void startVibration()
com.badlogic.gdx.controllers.ControllerMapping
com.badlogic.gdx.controllers.Controllers:
    public static java.lang.String preferredManager
    public static com.badlogic.gdx.controllers.Controller getCurrent()
    public static com.badlogic.gdx.controllers.ControllerManager getManager()
com.badlogic.gdx.controllers.android.AndroidController:
    public boolean connected
    public final int deviceId
    public java.lang.String uuid
    public final boolean canVibrate()
    public static float getAxis()
    public static boolean getButton()
    public static com.badlogic.gdx.utils.Array getListeners()
    public final com.badlogic.gdx.controllers.android.AndroidControllerMapping getMapping()
    public final java.lang.String getName()
    public static boolean hasPovAxis()
    public static boolean hasTriggerAxis()
    public final void startVibration()
com.badlogic.gdx.controllers.android.AndroidControllerMapping:
    public final int axisLeftX
    public final int axisLeftY
    public final int axisRightX
    public final int axisRightY
    public final int buttonA
    public final int buttonB
    public final int buttonBack
    public final int buttonDpadDown
    public final int buttonDpadLeft
    public final int buttonDpadRight
    public final int buttonDpadUp
    public final int buttonL1
    public final int buttonL2
    public final int buttonLeftStick
    public final int buttonR1
    public final int buttonR2
    public final int buttonRightStick
    public final int buttonStart
    public final int buttonX
    public final int buttonY
com.badlogic.gdx.controllers.android.AndroidControllers$1:
    public final synthetic com.badlogic.gdx.controllers.android.AndroidControllers this$0
    public static com.badlogic.gdx.controllers.android.AndroidControllerEvent newObject()
com.badlogic.gdx.controllers.android.AndroidControllers:
    static void <clinit>()
com.badlogic.gdx.files.FileHandle$1
com.badlogic.gdx.files.FileHandle:
    public static void copyTo()
    public static boolean deleteDirectory()
    public static int estimateLength()
    public static java.lang.String extension()
    public static java.nio.ByteBuffer map()
    public static java.lang.String name()
    public static java.io.BufferedReader reader()
    public static com.badlogic.gdx.Files$FileType type()
    public static void writeBytes()
com.badlogic.gdx.graphics.Camera:
    public final com.badlogic.gdx.math.collision.Ray ray
    public final com.badlogic.gdx.math.Vector3 tmpVec
    public final void project(com.badlogic.gdx.math.Vector3,float,float,float,float)
    public abstract com.badlogic.gdx.math.Vector3 unproject()
com.badlogic.gdx.graphics.Cubemap$1
com.badlogic.gdx.graphics.Cubemap:
    public static com.badlogic.gdx.assets.AssetManager assetManager
    public com.badlogic.gdx.graphics.CubemapData data
    public static com.badlogic.gdx.graphics.CubemapData getCubemapData()
    public final boolean isManaged()
    public static void load$1()
    public final void reload()
com.badlogic.gdx.graphics.CubemapData
com.badlogic.gdx.graphics.Cursor
com.badlogic.gdx.graphics.GL20
com.badlogic.gdx.graphics.GL30
com.badlogic.gdx.graphics.GLTexture:
    public final int glTarget
    static void <clinit>()
    public final void delete()
    public abstract int getMagFilter()
    public abstract int getMinFilter()
    public abstract int getTextureObjectHandle()
    public abstract int getUWrap()
    public abstract int getVWrap()
    public abstract void setWrap(int,int)
    public abstract void unsafeSetAnisotropicFilter(float)
    public abstract void unsafeSetFilter(int,int)
    public abstract void unsafeSetWrap(int,int)
com.badlogic.gdx.graphics.Mesh$1
com.badlogic.gdx.graphics.Mesh$VertexDataType$EnumUnboxingLocalUtility
com.badlogic.gdx.graphics.Mesh$VertexDataType
com.badlogic.gdx.graphics.Mesh:
    public com.badlogic.gdx.graphics.glutils.InstanceData instances
    public boolean isInstanced
    public final com.badlogic.gdx.math.Vector3 tmpV
    public static void addManagedMesh(com.badlogic.gdx.backends.android.AndroidApplication,com.badlogic.gdx.graphics.Mesh)
    public static void bind$1()
    public static void bind$2()
    public static java.nio.ShortBuffer getIndicesBuffer()
    public final int getNumIndices()
    public final int getNumVertices()
    public static com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes()
    public static com.badlogic.gdx.graphics.glutils.VertexData makeVertexBuffer()
    public static void render()
    public static void render$1()
    public static com.badlogic.gdx.graphics.Mesh setIndices()
    public final void setVertices(float[],int)
    public static void unbind()
    public static void unbind$1()
com.badlogic.gdx.graphics.OrthographicCamera:
    public static void update$1()
com.badlogic.gdx.graphics.Pixmap$Blending$EnumUnboxingLocalUtility
com.badlogic.gdx.graphics.Pixmap$Blending
com.badlogic.gdx.graphics.Pixmap$Filter$EnumUnboxingLocalUtility
com.badlogic.gdx.graphics.Pixmap$Filter
com.badlogic.gdx.graphics.Pixmap$Format$EnumUnboxingLocalUtility:
    static void <clinit>()
    public static int _valueOf(java.lang.String)
    public static int[] _values()
    public static synthetic java.lang.String name(int)
com.badlogic.gdx.graphics.Pixmap$Format
com.badlogic.gdx.graphics.Pixmap:
    public int blending
    public int filter
    public final void drawPixel(int,int,int)
    public static void drawPixmap()
    public static void drawPixmap$1()
    public static void fillCircle()
    public final void fillRectangle(int,int,int)
    public final int getGLFormat()
    public final int getGLInternalFormat()
    public final int getHeight()
    public final int getPixel(int,int)
    public final int getWidth()
    public static void setColor()
    public final void setColor(float,float,float,float)
    public final void setColor(com.badlogic.gdx.graphics.Color)
    public static void setFilter()
com.badlogic.gdx.graphics.PixmapIO$CIM:
    public static final byte[] writeBuffer
com.badlogic.gdx.graphics.Texture$1
com.badlogic.gdx.graphics.Texture$TextureFilter$EnumUnboxingLocalUtility:
    public static final enum int MipMap
    public static final enum int MipMapLinearLinear
    public static final enum int MipMapLinearNearest
    public static final enum int MipMapNearestLinear
    public static final enum int MipMapNearestNearest
    static void <clinit>()
    public static int _getGLEnum()
    public static boolean _isMipMap()
    public static int _valueOf(java.lang.String)
    public static int[] _values()
    public static synthetic java.lang.String name(int)
    public static synthetic java.lang.String stringValueOf(int)
com.badlogic.gdx.graphics.Texture$TextureFilter
com.badlogic.gdx.graphics.Texture$TextureWrap$EnumUnboxingLocalUtility:
    public static final enum int MirroredRepeat
    static void <clinit>()
    public static int _getGLEnum()
    public static int _valueOf(java.lang.String)
    public static int[] _values()
    public static synthetic java.lang.String name(int)
    public static synthetic java.lang.String stringValueOf(int)
    public static synthetic int valueOf(java.lang.String)
com.badlogic.gdx.graphics.Texture$TextureWrap
com.badlogic.gdx.graphics.Texture:
    public static com.badlogic.gdx.assets.AssetManager assetManager
    public final int getHeight()
    public static com.badlogic.gdx.graphics.TextureData getTextureData()
    public final int getWidth()
    public final boolean isManaged()
    public final void reload()
com.badlogic.gdx.graphics.TextureArray:
    public com.badlogic.gdx.graphics.TextureArrayData data
    public final boolean isManaged()
    public static void load$2()
    public final void reload()
com.badlogic.gdx.graphics.TextureArrayData
com.badlogic.gdx.graphics.TextureData$Factory
com.badlogic.gdx.graphics.TextureData$TextureDataType$EnumUnboxingLocalUtility
com.badlogic.gdx.graphics.TextureData$TextureDataType
com.badlogic.gdx.graphics.VertexAttribute:
    public int unit
    public static int getKey()
    public static int getSizeInBytes()
com.badlogic.gdx.graphics.VertexAttributes:
    public int boneWeightUnits
    public int textureCoordinates
    public static int calculateOffsets()
    public static int compareTo()
    public static com.badlogic.gdx.graphics.VertexAttribute get()
    public static int size()
com.badlogic.gdx.graphics.g2d.Batch:
    public abstract void begin()
    public abstract void end()
    public abstract void flush()
    public abstract void setProjectionMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData:
    public float blankLineScale
    public char[] breakChars
    public float cursorX
    public static int getWrapIndex()
    public static boolean isBreakChar()
    public static void setScale()
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph:
    public boolean fixedWidth
    public static int getKerning()
com.badlogic.gdx.graphics.g2d.BitmapFont:
    public static com.badlogic.gdx.graphics.g2d.GlyphLayout draw()
    public final void draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float,int,int)
    public static com.badlogic.gdx.graphics.g2d.GlyphLayout draw$1()
    public static float getCapHeight()
    public final com.badlogic.gdx.graphics.Color getColor()
    public static com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData getData()
    public static float getDescent()
    public static float getLineHeight()
    public final com.badlogic.gdx.utils.Array getRegions()
    public static boolean isFlipped()
    public static void load$3()
    public static com.badlogic.gdx.graphics.g2d.BitmapFontCache newFontCache()
    public final void setColor(float,float,float,float)
    public static void setOwnsTexture()
    public static void setUseIntegerPositions()
    public static boolean usesIntegerPositions()
com.badlogic.gdx.graphics.g2d.BitmapFontCache:
    public float currentTint
    public static final com.badlogic.gdx.graphics.Color tempColor
    public float x
    public float y
    public static void addGlyph()
    public static com.badlogic.gdx.graphics.g2d.GlyphLayout addText()
    public static void addText()
    public static com.badlogic.gdx.graphics.g2d.GlyphLayout addText$1()
    public static void addToCache()
    public static com.badlogic.gdx.graphics.Color getColor()
    public static void requireGlyphs()
    public static void setPageCount()
    public static void setUseIntegerPositions()
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    public static void convert()
    public final int getFormat()
    public final int getGLFormat()
    public final int getGLType()
    public final int getHeight()
    public final java.nio.ByteBuffer getPixels()
    public final int getWidth()
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun:
    public static void appendRun()
com.badlogic.gdx.graphics.g2d.GlyphLayout:
    public static void alignRuns()
    public static void calculateWidths()
    public static float getGlyphWidth(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData)
    public static float getLineOffset()
    public static int parseColorMarkup()
    public static void truncate()
    public static com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun wrap()
com.badlogic.gdx.graphics.g2d.NinePatch:
    public static void draw()
    public static float getBottomHeight()
    public static float getLeftWidth()
    public static float getPadBottom()
    public static float getPadLeft()
    public static float getPadRight()
    public static float getPadTop()
    public static float getRightWidth()
    public static float getTopHeight()
    public static float getTotalHeight()
    public static float getTotalWidth()
    public static void prepareVertices()
    public static void setPadding()
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page:
    public final com.badlogic.gdx.utils.Array addedRects
    public com.badlogic.gdx.utils.OrderedMap rects
    public static com.badlogic.gdx.graphics.Texture getTexture()
    public static boolean updateTexture()
com.badlogic.gdx.graphics.g2d.PixmapPacker$PixmapPackerRectangle:
    public int offsetX
    public int offsetY
    public int originalHeight
    public int originalWidth
    public int[] pads
    public int[] splits
    public void <init>(int,int,int)
com.badlogic.gdx.graphics.g2d.PixmapPacker:
    public int alphaThreshold
    public com.badlogic.gdx.graphics.Color c
    public boolean duplicateBorder
    public static java.util.regex.Pattern indexPattern
    public boolean stripWhitespaceX
    public boolean stripWhitespaceY
    public final void getPads(com.badlogic.gdx.graphics.Pixmap,int[])
    public static com.badlogic.gdx.utils.Array getPages()
    public final synchronized com.badlogic.gdx.math.Rectangle getRect()
    public final int getSplitPoint(com.badlogic.gdx.graphics.Pixmap,int,int,boolean,boolean)
    public static int[] getSplits()
    public static com.badlogic.gdx.graphics.Color getTransparentColor()
    public final synchronized com.badlogic.gdx.math.Rectangle pack()
    public static void setPackToTexture()
    public final void setTransparentColor(com.badlogic.gdx.graphics.Color)
com.badlogic.gdx.graphics.g2d.Sprite:
    public float rotation
    public static void draw()
    public static com.badlogic.gdx.graphics.Color getColor()
    public static float[] getVertices()
    public float getX()
    public float getY()
    public static void rotate90()
    public static void setPackedColor()
    public static void setRotation()
    public static void setScale()
com.badlogic.gdx.graphics.g2d.SpriteBatch:
    public boolean blendingDisabled
    public com.badlogic.gdx.graphics.glutils.ShaderProgram customShader
    public static int defaultVertexDataType
    public float invTexHeight
    public float invTexWidth
    public int renderCalls
    public int totalRenderCalls
    static void <clinit>()
    public final void begin()
    public final void end()
    public static boolean isBlendingEnabled()
    public final void setProjectionMatrix(com.badlogic.gdx.math.Matrix4)
    public final void switchTexture(com.badlogic.gdx.graphics.Texture)
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion:
    public int degrees
    public final void flip()
    public final float getRotatedPackedHeight()
    public final float getRotatedPackedWidth()
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite:
    public final float getX()
    public final float getY()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$10:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$11:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$12:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$13:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$14:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public static int compare()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$1:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse$1()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$2:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse$1()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$3:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse$1()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$4:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse$1()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$5:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse$1()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$6:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$7:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$8:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$9:
    public final synthetic com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData this$0
    public final void parse()
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page:
    public float height
    public boolean pma
    public float width
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region:
    public boolean flip
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData:
    public static void load()
com.badlogic.gdx.graphics.g2d.TextureAtlas:
    public final com.badlogic.gdx.utils.Array getRegions()
    public static void load$4()
com.badlogic.gdx.graphics.g2d.TextureRegion:
    public void flip()
    public static int getRegionHeight()
    public static int getRegionWidth()
    public static int getRegionX()
    public static int getRegionY()
    public static com.badlogic.gdx.graphics.Texture getTexture()
    public static float getU()
    public static float getU2()
    public static float getV()
    public static float getV2()
    public static void setRegion()
    public final void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Bitmap:
    public static int getPixelMode()
com.badlogic.gdx.graphics.g2d.freetype.FreeType$Library:
    public static com.badlogic.gdx.graphics.g2d.freetype.FreeType$Face newMemoryFace()
com.badlogic.gdx.graphics.g2d.freetype.FreeType:
    public static int FT_ENCODING_ADOBE_CUSTOM
    public static int FT_ENCODING_ADOBE_EXPERT
    public static int FT_ENCODING_ADOBE_LATIN_1
    public static int FT_ENCODING_ADOBE_STANDARD
    public static int FT_ENCODING_APPLE_ROMAN
    public static int FT_ENCODING_BIG5
    public static int FT_ENCODING_GB2312
    public static int FT_ENCODING_JOHAB
    public static int FT_ENCODING_MS_SYMBOL
    public static int FT_ENCODING_NONE
    public static int FT_ENCODING_OLD_LATIN_2
    public static int FT_ENCODING_SJIS
    public static int FT_ENCODING_UNICODE
    public static int FT_ENCODING_WANSUNG
    public static int FT_FACE_FLAG_CID_KEYED
    public static int FT_FACE_FLAG_EXTERNAL_STREAM
    public static int FT_FACE_FLAG_FAST_GLYPHS
    public static int FT_FACE_FLAG_FIXED_SIZES
    public static int FT_FACE_FLAG_FIXED_WIDTH
    public static int FT_FACE_FLAG_GLYPH_NAMES
    public static int FT_FACE_FLAG_HINTER
    public static int FT_FACE_FLAG_HORIZONTAL
    public static int FT_FACE_FLAG_KERNING
    public static int FT_FACE_FLAG_MULTIPLE_MASTERS
    public static int FT_FACE_FLAG_SCALABLE
    public static int FT_FACE_FLAG_SFNT
    public static int FT_FACE_FLAG_TRICKY
    public static int FT_FACE_FLAG_VERTICAL
    public static int FT_KERNING_DEFAULT
    public static int FT_KERNING_UNFITTED
    public static int FT_KERNING_UNSCALED
    public static int FT_LOAD_CROP_BITMAP
    public static int FT_LOAD_DEFAULT
    public static int FT_LOAD_FORCE_AUTOHINT
    public static int FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH
    public static int FT_LOAD_IGNORE_TRANSFORM
    public static int FT_LOAD_LINEAR_DESIGN
    public static int FT_LOAD_MONOCHROME
    public static int FT_LOAD_NO_AUTOHINT
    public static int FT_LOAD_NO_BITMAP
    public static int FT_LOAD_NO_HINTING
    public static int FT_LOAD_NO_RECURSE
    public static int FT_LOAD_NO_SCALE
    public static int FT_LOAD_PEDANTIC
    public static int FT_LOAD_RENDER
    public static int FT_LOAD_TARGET_LCD
    public static int FT_LOAD_TARGET_LCD_V
    public static int FT_LOAD_TARGET_LIGHT
    public static int FT_LOAD_TARGET_MONO
    public static int FT_LOAD_TARGET_NORMAL
    public static int FT_LOAD_VERTICAL_LAYOUT
    public static int FT_PIXEL_MODE_GRAY
    public static int FT_PIXEL_MODE_GRAY2
    public static int FT_PIXEL_MODE_GRAY4
    public static int FT_PIXEL_MODE_LCD
    public static int FT_PIXEL_MODE_LCD_V
    public static int FT_PIXEL_MODE_MONO
    public static int FT_PIXEL_MODE_NONE
    public static int FT_RENDER_MODE_LCD
    public static int FT_RENDER_MODE_LCD_V
    public static int FT_RENDER_MODE_LIGHT
    public static int FT_RENDER_MODE_MAX
    public static int FT_RENDER_MODE_MONO
    public static int FT_RENDER_MODE_NORMAL
    public static int FT_STROKER_LINECAP_BUTT
    public static int FT_STROKER_LINECAP_ROUND
    public static int FT_STROKER_LINECAP_SQUARE
    public static int FT_STROKER_LINEJOIN_BEVEL
    public static int FT_STROKER_LINEJOIN_MITER
    public static int FT_STROKER_LINEJOIN_MITER_FIXED
    public static int FT_STROKER_LINEJOIN_MITER_VARIABLE
    public static int FT_STROKER_LINEJOIN_ROUND
    public static int FT_STYLE_FLAG_BOLD
    public static int FT_STYLE_FLAG_ITALIC
    static void <clinit>()
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$1
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter:
    public boolean borderStraight
    public boolean genMipMaps
    public boolean mono
    public int padBottom
    public int padLeft
    public int padRight
    public int padTop
    public com.badlogic.gdx.graphics.Color shadowColor
    public int shadowOffsetX
    public int shadowOffsetY
    public int spaceY
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting$EnumUnboxingLocalUtility
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$Hinting
com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator:
    public static int maxTextureSize
    public int pixelHeight
    public int pixelWidth
    static void <clinit>()
    public static boolean checkForBitmapFont()
    public static com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeBitmapFontData generateData()
    public static com.badlogic.gdx.graphics.g2d.BitmapFont generateFont()
    public static int getLoadingFlags(com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator$FreeTypeFontParameter)
    public static boolean loadChar()
    public static boolean loadChar$1()
    public static com.badlogic.gdx.graphics.g2d.BitmapFont newBitmapFont()
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data:
    public final void checkNPOT()
    public final boolean hasPKMHeader()
com.badlogic.gdx.graphics.glutils.ETC1:
    public static int ETC1_RGB8_OES
    public static int PKM_HEADER_SIZE
    static void <clinit>()
com.badlogic.gdx.graphics.glutils.FrameBuffer
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferRenderBufferAttachmentSpec
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$FrameBufferTextureAttachmentSpec
com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder
com.badlogic.gdx.graphics.glutils.GLFrameBuffer:
    public com.badlogic.gdx.graphics.glutils.GLFrameBuffer$GLFrameBufferBuilder bufferBuilder
    public static int defaultFramebufferHandle
    public static boolean defaultFramebufferHandleInitialized
    public int depthStencilPackedBufferHandle
    public int depthbufferHandle
    public int framebufferHandle
    public boolean hasDepthStencilPackedBuffer
    public boolean isMRT
    public int stencilbufferHandle
    public abstract void attachFrameBufferColorTexture()
    public abstract void build()
    public abstract void checkValidBuilder()
    public abstract com.badlogic.gdx.graphics.GLTexture createTexture()
com.badlogic.gdx.graphics.glutils.GLVersion$Type$EnumUnboxingLocalUtility
com.badlogic.gdx.graphics.glutils.GLVersion$Type
com.badlogic.gdx.graphics.glutils.GLVersion:
    public final java.lang.String TAG
    public int majorVersion
    public int minorVersion
    public int releaseVersion
    public final java.lang.String rendererString
    public final int type
    public final java.lang.String vendorString
    public static int getMajorVersion()
com.badlogic.gdx.graphics.glutils.HdpiMode$EnumUnboxingLocalUtility
com.badlogic.gdx.graphics.glutils.HdpiMode
com.badlogic.gdx.graphics.glutils.HdpiUtils
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20:
    public final int normalOffset
    public int numSetTexCoords
    public final int numTexCoords
    public final java.lang.String[] shaderUniformNames
    public final int texCoordOffset
    public static void begin()
    public static com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes()
    public static void dispose()
    public static void end()
    public static void flush()
    public static int getMaxVertices()
    public static int getNumVertices()
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer
com.badlogic.gdx.graphics.glutils.IndexBufferObject:
    public final boolean isDirect
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData:
    public final boolean isDirect
com.badlogic.gdx.graphics.glutils.InstanceData
com.badlogic.gdx.graphics.glutils.KTXTextureData:
    public int glBaseInternalFormat
    public int glTypeSize
    public final void consumeCubemapData()
    public static void disposePreparedData()
com.badlogic.gdx.graphics.glutils.MipMapGenerator:
    public static boolean useHWMipMap
    static void <clinit>()
com.badlogic.gdx.graphics.glutils.PixmapTextureData:
    public final boolean disposePixmap
    public final boolean useMipMaps
com.badlogic.gdx.graphics.glutils.ShaderProgram:
    public static final java.nio.IntBuffer intbuf
    public final java.nio.FloatBuffer matrix
    public static boolean pedantic
    public static java.lang.String prependFragmentCode
    public static java.lang.String prependVertexCode
    public int refCount
    public static void addManagedShader()
    public final void bind()
    public static int createProgram()
    public final void disableVertexAttribute(int)
    public static int fetchAttributeLocation()
    public static void fetchAttributes()
    public static int fetchUniformLocation()
    public static void fetchUniforms()
    public final int getAttributeLocation(java.lang.String)
    public static boolean isCompiled()
    public static int linkProgram()
    public static void setUniformMatrix()
    public final void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4)
    public static void setUniformMatrix$1()
    public final void setUniformi(java.lang.String,int)
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType$EnumUnboxingLocalUtility:
    public static final enum int Point
    static void <clinit>()
    public static int _getGlType()
    public static int _valueOf(java.lang.String)
    public static int[] _values()
    public static synthetic java.lang.String name(int)
    public static synthetic java.lang.String stringValueOf(int)
    public static synthetic int valueOf(java.lang.String)
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType
com.badlogic.gdx.graphics.glutils.ShapeRenderer:
    public float defaultRectLineWidth
    public final com.badlogic.gdx.math.Vector2 tmp
    public final void begin()
    public final void flush()
    public final com.badlogic.gdx.math.Matrix4 getTransformMatrix()
    public static boolean isDrawing()
    public static void rect()
    public static void rect$1()
    public static void rect$2()
    public static void setAutoShapeType()
    public final void setColor(com.badlogic.gdx.graphics.Color)
    public final void setProjectionMatrix(com.badlogic.gdx.math.Matrix4)
    public final void setTransformMatrix(com.badlogic.gdx.math.Matrix4)
com.badlogic.gdx.graphics.glutils.VertexArray:
    public boolean isBound
com.badlogic.gdx.graphics.glutils.VertexBufferObject:
    public static void bufferChanged()
    public static void setBuffer()
    public static void setUsage()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData:
    public final boolean isStatic
    public static void bufferChanged$1()
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO:
    public int bufferHandle
    public com.badlogic.gdx.utils.IntArray cachedLocations
    public boolean isBound
    public boolean isDirty
    public final boolean isStatic
    public final boolean ownsBuffer
    public final int usage
    public int vaoHandle
    public static void bindAttributes()
    public static void bindData()
    public static void bufferChanged$2()
    public static void deleteVAO()
    public static void unbindAttributes()
com.badlogic.gdx.math.Affine2:
    public static com.badlogic.gdx.math.Affine2 preMul()
    public static com.badlogic.gdx.math.Affine2 setToTrnRotScl()
    public static com.badlogic.gdx.math.Affine2 translate()
com.badlogic.gdx.math.Frustum:
    public static final com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints
    public static final com.badlogic.gdx.math.Vector3 tmpV
    public static void update()
com.badlogic.gdx.math.MathUtils:
    public static java.util.Random random
    public static int clamp(int,int,int)
    public static boolean isPowerOfTwo(int)
    public static float sinDeg(float)
com.badlogic.gdx.math.Matrix4:
    public static final com.badlogic.gdx.math.Quaternion quat
    public static final com.badlogic.gdx.math.Quaternion quat2
    public static final com.badlogic.gdx.math.Vector3 right
    public static final com.badlogic.gdx.math.Vector3 tmpForward
    public static final com.badlogic.gdx.math.Vector3 tmpUp
    public final void mul(com.badlogic.gdx.math.Matrix4)
    public static com.badlogic.gdx.math.Matrix4 set()
    public static com.badlogic.gdx.math.Matrix4 set$1()
    public static com.badlogic.gdx.math.Matrix4 setToLookAt()
    public static com.badlogic.gdx.math.Matrix4 setToLookAt$1()
    public final void setToOrtho2D(float,float)
    public static com.badlogic.gdx.math.Matrix4 setToTranslation()
com.badlogic.gdx.math.Quaternion:
    public static com.badlogic.gdx.math.Quaternion tmp1
    public static com.badlogic.gdx.math.Quaternion tmp2
    public float x
    public float y
    public float z
    static void <clinit>()
    public void <init>(int)
    public static com.badlogic.gdx.math.Quaternion idt()
    public final void set(float)
com.badlogic.gdx.math.RandomXS128:
    public static final long murmurHash3(long)
    public static long nextLong$1()
    public static void setState()
com.badlogic.gdx.math.Rectangle:
    public static final com.badlogic.gdx.math.Rectangle tmp
    public static final com.badlogic.gdx.math.Rectangle tmp2
    public static float getHeight()
    public static float getWidth()
    public final void set(float,float,float,float)
com.badlogic.gdx.math.Vector2:
    public static final com.badlogic.gdx.math.Vector2 X
    public static final com.badlogic.gdx.math.Vector2 Y
    public static final com.badlogic.gdx.math.Vector2 Zero
    static void <clinit>()
    public static com.badlogic.gdx.math.Vector2 set()
    public static com.badlogic.gdx.math.Vector2 set$1()
com.badlogic.gdx.math.Vector3:
    public static final com.badlogic.gdx.math.Vector3 X
    public static final com.badlogic.gdx.math.Vector3 Y
    public static final com.badlogic.gdx.math.Vector3 Z
    public static final com.badlogic.gdx.math.Vector3 Zero
    public static final com.badlogic.gdx.math.Matrix4 tmpMat
    public static com.badlogic.gdx.math.Vector3 add()
    public static com.badlogic.gdx.math.Vector3 add$1()
    public static com.badlogic.gdx.math.Vector3 crs()
    public static float dot()
    public static float len2()
    public final void mul(com.badlogic.gdx.math.Matrix4)
    public static com.badlogic.gdx.math.Vector3 scl()
    public static com.badlogic.gdx.math.Vector3 sub()
    public final void sub(com.badlogic.gdx.math.Vector3)
com.badlogic.gdx.math.collision.Ray:
    public static com.badlogic.gdx.math.Vector3 tmp
com.badlogic.gdx.net.HttpStatus
com.badlogic.gdx.net.NetJavaImpl$1:
    public final synthetic com.badlogic.gdx.net.NetJavaImpl this$0
com.badlogic.gdx.net.NetJavaImpl$2:
    public final synthetic boolean val$doingOutPut
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse:
    public com.badlogic.gdx.net.HttpStatus status
    public static java.io.InputStream getInputStream()
    public final java.io.InputStream getResultAsStream()
com.badlogic.gdx.net.NetJavaImpl:
    public final synchronized com.badlogic.gdx.Net$HttpResponseListener getFromListeners()
    public final synchronized void putIntoConnectionsAndListeners()
    public static void sendHttpRequest()
com.badlogic.gdx.scenes.scene2d.Action:
    public com.badlogic.gdx.scenes.scene2d.Actor actor
    public com.badlogic.gdx.utils.Pool pool
    public com.badlogic.gdx.scenes.scene2d.Actor target
    public abstract void restart()
    public final void setActor()
    public abstract void setTarget()
com.badlogic.gdx.scenes.scene2d.Actor:
    public boolean clipBegin(float,float,float,float)
    public void clipEnd()
    public boolean remove()
com.badlogic.gdx.scenes.scene2d.Event:
    public boolean bubbles
    public boolean cancelled
    public boolean capture
    public boolean stopped
    public static boolean getBubbles()
    public static com.badlogic.gdx.scenes.scene2d.Actor getListenerActor()
    public static com.badlogic.gdx.scenes.scene2d.Stage getStage()
    public static com.badlogic.gdx.scenes.scene2d.Actor getTarget()
    public static void handle()
    public static boolean isCancelled()
    public static boolean isHandled()
    public static boolean isStopped()
    public static void setCapture()
    public static void setListenerActor()
    public static void setStage()
    public final void setTarget()
com.badlogic.gdx.scenes.scene2d.Group:
    public com.badlogic.gdx.math.Rectangle cullingArea
    public final void applyTransform(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.math.Matrix4)
    public final void applyTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer,com.badlogic.gdx.math.Matrix4)
    public com.badlogic.gdx.scenes.scene2d.Group debugAll()
    public static com.badlogic.gdx.utils.SnapshotArray getChildren()
    public static boolean isTransform()
    public static boolean removeActor()
    public final void resetTransform(com.badlogic.gdx.graphics.g2d.Batch)
    public final void resetTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer)
    public final void setDebug()
    public static void setTransform()
com.badlogic.gdx.scenes.scene2d.InputEvent$Type$EnumUnboxingLocalUtility:
    static void <clinit>()
    public static int _valueOf(java.lang.String)
    public static int[] _values()
    public static synthetic java.lang.String stringValueOf(int)
    public static synthetic int valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.InputEvent$Type
com.badlogic.gdx.scenes.scene2d.InputEvent:
    public com.badlogic.gdx.scenes.scene2d.Actor relatedActor
    public float scrollAmountX
    public float scrollAmountY
    public boolean touchFocus
    public static int getButton()
    public static char getCharacter()
    public static int getKeyCode()
    public static int getPointer()
    public static com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor()
    public static float getScrollAmountX()
    public static float getScrollAmountY()
    public static boolean getTouchFocus()
    public static int getType()
    public static void setButton()
    public static void setCharacter()
    public static void setKeyCode()
    public static void setPointer()
    public final void setRelatedActor()
    public static void setScrollAmountX()
    public static void setScrollAmountY()
    public static void setStageX()
    public static void setStageY()
    public static void setType()
    public static com.badlogic.gdx.math.Vector2 toCoordinates()
com.badlogic.gdx.scenes.scene2d.InputListener$1
com.badlogic.gdx.scenes.scene2d.InputListener:
    public void enter()
    public void exit()
    public static boolean mouseMoved()
    public static boolean scrolled()
    public void touchDragged()
com.badlogic.gdx.scenes.scene2d.Stage:
    public boolean debugAll
    public boolean debugParentUnderMouse
    public boolean debugUnderMouse
    public com.badlogic.gdx.scenes.scene2d.Actor scrollFocus
    public static void act()
    public static void actorRemoved()
    public static void addActor()
    public static void addTouchFocus()
    public static void calculateScissors()
    public static void cancelTouchFocus()
    public static void cancelTouchFocusExcept()
    public static void clear()
    public static void drawDebug()
    public static boolean getActionsRequestRendering()
    public static com.badlogic.gdx.utils.Array getActors()
    public static com.badlogic.gdx.graphics.Color getDebugColor()
    public static float getHeight()
    public static com.badlogic.gdx.scenes.scene2d.Actor getKeyboardFocus()
    public static com.badlogic.gdx.scenes.scene2d.Group getRoot()
    public static float getWidth()
    public final void setScrollFocus()
    public static void unfocusAll()
com.badlogic.gdx.scenes.scene2d.ui.Cell:
    public com.badlogic.gdx.scenes.scene2d.Actor actor
    public static final java.lang.Integer bottomi
    public int cellAboveIndex
    public static final java.lang.Integer centeri
    public int column
    public static final java.lang.Integer lefti
    public static final java.lang.Float onef
    public static final java.lang.Integer onei
    public static final java.lang.Integer righti
    public int row
    public com.badlogic.gdx.scenes.scene2d.ui.Table table
    public static final java.lang.Integer topi
    public java.lang.Boolean uniformX
    public java.lang.Boolean uniformY
    public static final java.lang.Float zerof
    public static final java.lang.Integer zeroi
    static void <clinit>()
    public static void setTable()
com.badlogic.gdx.scenes.scene2d.ui.Container:
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public boolean clip
    public float fillX
    public float fillY
    public static com.badlogic.gdx.scenes.scene2d.ui.Container align()
    public final void drawBackground()
    public static com.badlogic.gdx.scenes.scene2d.ui.Container size()
    public static com.badlogic.gdx.scenes.scene2d.ui.Container size$1()
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle:
    public com.badlogic.gdx.graphics.Color fontColorSelected
    public com.badlogic.gdx.graphics.Color fontColorUnselected
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle:
    public com.badlogic.gdx.graphics.Color fontColor
com.badlogic.gdx.scenes.scene2d.ui.Skin$1:
    public final boolean ignoreUnknownField()
    public final void readFields()
com.badlogic.gdx.scenes.scene2d.ui.Skin$2:
    public static com.badlogic.gdx.scenes.scene2d.ui.Skin read()
com.badlogic.gdx.scenes.scene2d.ui.Skin$3:
    public final synthetic com.badlogic.gdx.scenes.scene2d.ui.Skin this$0
    public static com.badlogic.gdx.graphics.g2d.BitmapFont read()
com.badlogic.gdx.scenes.scene2d.ui.Skin$4:
    public static com.badlogic.gdx.graphics.Color read()
com.badlogic.gdx.scenes.scene2d.ui.Skin:
    public static void addRegions()
    public static java.lang.Object get()
    public static void load$5()
    public static com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable()
    public static com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable$1()
    public static void scale()
com.badlogic.gdx.scenes.scene2d.ui.Table$1:
    public static com.badlogic.gdx.scenes.scene2d.ui.Cell newObject()
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug$EnumUnboxingLocalUtility
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug
com.badlogic.gdx.scenes.scene2d.ui.Table:
    public int align
    public com.badlogic.gdx.scenes.scene2d.utils.Drawable background
    public final com.badlogic.gdx.scenes.scene2d.ui.Cell cellDefaults
    public boolean clip
    public final com.badlogic.gdx.utils.Array columnDefaults
    public com.badlogic.gdx.utils.Array debugRects
    public boolean implicitEndRow
    public boolean round
    public com.badlogic.gdx.scenes.scene2d.ui.Cell rowDefaults
    public com.badlogic.gdx.scenes.scene2d.ui.Skin skin
    public static void addDebugRects()
    public final void clearDebugRects()
    public final com.badlogic.gdx.scenes.scene2d.Group debugAll()
    public static com.badlogic.gdx.scenes.scene2d.ui.Table debugAll()
    public final void drawBackground()
    public static void endRow()
    public static com.badlogic.gdx.scenes.scene2d.ui.Cell obtainCell()
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldClickListener:
    public final void clicked()
    public final void touchDragged()
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter
com.badlogic.gdx.scenes.scene2d.ui.TextField:
    com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter filter
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup:
    public boolean fillParent
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle:
    public com.badlogic.gdx.graphics.Color titleFontColor
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable:
    public static java.lang.String getName()
    public final void setBottomHeight(float)
    public final void setLeftWidth(float)
    public final void setMinHeight(float)
    public final void setMinWidth(float)
    public static void setName()
    public final void setRightWidth(float)
    public final void setTopHeight(float)
com.badlogic.gdx.scenes.scene2d.utils.ClickListener:
    public int button
    public boolean cancelled
    public boolean over
    public int pressedButton
    public long tapCountInterval
    public float tapSquareSize
    public static float visualPressedDuration
    public long visualPressedTime
    static void <clinit>()
    public void clicked()
    public final void enter()
    public final void exit()
    public static int getTapCount()
    public static boolean inTapSquare()
    public static void invalidateTapSquare()
    public static void setVisualPressed()
    public boolean touchDown(float,float,int,int)
    public void touchDragged()
    public void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int)
com.badlogic.gdx.scenes.scene2d.utils.Drawable:
    public abstract void setBottomHeight(float)
    public abstract void setLeftWidth(float)
    public abstract void setMinHeight(float)
    public abstract void setMinWidth(float)
    public abstract void setRightWidth(float)
    public abstract void setTopHeight(float)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type$EnumUnboxingLocalUtility
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent:
    public boolean focused
    public com.badlogic.gdx.scenes.scene2d.Actor relatedActor
    public int type
    public static void setFocused()
    public final void setRelatedActor()
    public static void setType$1()
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable:
    public static com.badlogic.gdx.graphics.g2d.NinePatch getPatch()
    public static void setPatch()
    public static com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable tint()
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable:
    public static void setSprite()
    public static com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable tint()
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable:
    public static com.badlogic.gdx.graphics.g2d.TextureRegion getRegion()
    public final void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion)
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable:
    public static com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable tint()
com.badlogic.gdx.scenes.scene2d.utils.UIUtils:
    public static boolean isLinux
    public static boolean isWindows
    public static boolean shift()
com.badlogic.gdx.utils.Align:
    public static final boolean isCenterVertical(int)
com.badlogic.gdx.utils.Array$$InternalSynthetic$IA$48$d42a9e8b97b2806d1a979bd30c4a55f1db3aeaf30b3a732abb756b3bfa204dc6$0
com.badlogic.gdx.utils.Array$$InternalSynthetic$IA$48$e58eb1c523aa61380e82cba712a79120d2f4ba75acf2859592e9ca81932abb28$0
com.badlogic.gdx.utils.Array$ArrayIterable:
    public void <init>()
com.badlogic.gdx.utils.Array$ArrayIterator:
    public static com.badlogic.gdx.utils.Array$ArrayIterator iterator()
com.badlogic.gdx.utils.Array:
    public void <init>(com.badlogic.gdx.utils.Array$$InternalSynthetic$IA$48$d42a9e8b97b2806d1a979bd30c4a55f1db3aeaf30b3a732abb756b3bfa204dc6$0)
    public void <init>(com.badlogic.gdx.utils.Array$$InternalSynthetic$IA$48$e58eb1c523aa61380e82cba712a79120d2f4ba75acf2859592e9ca81932abb28$0)
    public void <init>(java.lang.Object)
    public static void addAll()
    public final void addAll(com.badlogic.gdx.utils.Array)
    public final java.lang.Object first()
    public void insert()
    public static boolean isEmpty()
    public void sort()
    public static java.lang.Object[] toArray()
    public final java.lang.Object[] toArray(java.lang.Class)
    public static varargs com.badlogic.gdx.utils.Array with()
com.badlogic.gdx.utils.ArrayMap$Entries:
    public com.badlogic.gdx.utils.ObjectMap$Entry entry
    public int index
    public final com.badlogic.gdx.utils.ArrayMap map
    public void <init>(com.badlogic.gdx.utils.ArrayMap)
    public final boolean hasNext()
    public final java.util.Iterator iterator()
    public static com.badlogic.gdx.utils.ObjectMap$Entry next()
    public final java.lang.Object next()
    public final void remove()
com.badlogic.gdx.utils.ArrayMap:
    public transient com.badlogic.gdx.utils.ArrayMap$Entries entries1
    public transient com.badlogic.gdx.utils.ArrayMap$Entries entries2
    public boolean ordered
    public static com.badlogic.gdx.utils.ArrayMap$Entries entries()
    public static java.lang.Object get()
    public static int indexOfKey()
    public static int put()
    public static void removeIndex()
    public static void resize()
com.badlogic.gdx.utils.BufferUtils:
    public static int allocatedUnsafe
    public static java.nio.ByteBuffer newByteBuffer(int)
    public static java.nio.FloatBuffer newFloatBuffer()
com.badlogic.gdx.utils.Clipboard:
    public abstract java.lang.String getContents()
    public abstract boolean hasContents()
    public abstract void setContents(java.lang.String)
com.badlogic.gdx.utils.Collections
com.badlogic.gdx.utils.ComparableTimSort
com.badlogic.gdx.utils.DelayedRemovalArray:
    public static void begin()
    public final void sort()
com.badlogic.gdx.utils.FloatArray:
    public boolean ordered
    public final void addAll(com.badlogic.gdx.utils.FloatArray)
    public static void clear()
    public static float[] ensureCapacity()
    public static boolean notEmpty()
    public static void removeRange()
    public final float[] resize(int)
    public final void truncate(int)
com.badlogic.gdx.utils.GdxNativesLoader:
    public static boolean disableNativesLoading
    static void <clinit>()
com.badlogic.gdx.utils.I18NBundle:
    public com.badlogic.gdx.utils.TextFormatter formatter
    public static boolean simpleFormatter
    public static java.util.List getCandidateLocales()
    public static java.util.Locale getLocale()
    public static void setLocale()
com.badlogic.gdx.utils.IntArray:
    public static void add()
    public static void clear()
    public static int[] ensureCapacity()
    public final int peek()
    public final int pop()
    public static int[] toArray()
com.badlogic.gdx.utils.IntIntMap$Entries:
    public static com.badlogic.gdx.utils.IntIntMap$Entry next()
com.badlogic.gdx.utils.IntIntMap$MapIterator:
    public final void findNextIndex()
com.badlogic.gdx.utils.IntIntMap:
    public final float loadFactor
    public final boolean containsKey(int)
    public static com.badlogic.gdx.utils.IntIntMap$Entries entries()
    public static int get()
    public final int place(int)
    public static void putResize()
    public static void resize()
com.badlogic.gdx.utils.IntMap$Entries:
    public static com.badlogic.gdx.utils.IntMap$Entry next()
com.badlogic.gdx.utils.IntMap$Keys:
    public static int next()
com.badlogic.gdx.utils.IntMap$Values:
    public static com.badlogic.gdx.utils.Array toArray()
com.badlogic.gdx.utils.IntSet:
    public final float loadFactor
    public static void addResize()
    public final int place(int)
    public static boolean remove()
    public static void resize()
com.badlogic.gdx.utils.Json$FieldMetadata:
    public boolean deprecated
com.badlogic.gdx.utils.Json:
    public final com.badlogic.gdx.utils.ObjectMap classToDefaultValues
    public com.badlogic.gdx.utils.Json$Serializer defaultSerializer
    public boolean enumNames
    public boolean ignoreDeprecated
    public boolean ignoreUnknownFields
    public com.badlogic.gdx.utils.JsonWriter$OutputType outputType
    public boolean readDeprecated
    public boolean sortFields
    public boolean usePrototypes
    public static void addClassTag()
    public static java.lang.String convertToString()
    public static java.lang.Object fromJson()
    public final java.lang.Class getClass(java.lang.String)
    public boolean ignoreUnknownField()
    public void readFields()
    public static java.lang.Object readValue()
    public java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue)
    public final java.lang.Object readValue(java.lang.String,com.badlogic.gdx.utils.JsonValue)
    public static java.lang.Object readValue$1()
    public final void setSerializer(java.lang.Class,com.badlogic.gdx.utils.Json$ReadOnlySerializer)
    public static void setTypeName()
    public static void setUsePrototypes()
    public static void sortFields()
com.badlogic.gdx.utils.JsonReader:
    public boolean stop
    public final void bool(java.lang.String,boolean)
    public final void number(java.lang.String,double,java.lang.String)
    public final void number(java.lang.String,long,java.lang.String)
    public static com.badlogic.gdx.utils.JsonValue parse()
    public final void startArray(java.lang.String)
    public final void startObject(java.lang.String)
    public final void string(java.lang.String,java.lang.String)
com.badlogic.gdx.utils.JsonValue$1
com.badlogic.gdx.utils.JsonValue$JsonIterator:
    public static com.badlogic.gdx.utils.JsonValue next()
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings:
    public int singleLineColumns
    public boolean wrapNumericArrays
com.badlogic.gdx.utils.JsonValue$ValueType$EnumUnboxingLocalUtility:
    static void <clinit>()
    public static int _valueOf(java.lang.String)
    public static int[] _values()
    public static synthetic java.lang.String name(int)
    public static synthetic int valueOf(java.lang.String)
com.badlogic.gdx.utils.JsonValue$ValueType
com.badlogic.gdx.utils.JsonValue:
    public final byte asByte()
    public final float asFloat()
    public final short asShort()
    public final com.badlogic.gdx.utils.JsonValue getChild()
    public static java.lang.String getString()
    public static boolean has()
    public final boolean isArray()
    public final boolean isBoolean()
    public static boolean isDouble()
    public static boolean isFlat(com.badlogic.gdx.utils.JsonValue)
    public static boolean isLong()
    public final boolean isNull()
    public final boolean isNumber()
    public final boolean isString()
    public static com.badlogic.gdx.utils.JsonValue$JsonIterator iterator()
    public static java.lang.String name()
    public static java.lang.String prettyPrint()
    public final java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonWriter$OutputType)
    public static void set()
    public static void set$1()
    public static void set$2()
    public static void set$3()
    public static void setName()
com.badlogic.gdx.utils.JsonWriter$1
com.badlogic.gdx.utils.JsonWriter$OutputType:
    public static final enum com.badlogic.gdx.utils.JsonWriter$OutputType javascript
    public static java.lang.String quoteName()
    public static java.lang.String quoteValue()
com.badlogic.gdx.utils.LongMap$Entries:
    public static com.badlogic.gdx.utils.LongMap$Entry next()
com.badlogic.gdx.utils.LongMap:
    public final float loadFactor
    public static com.badlogic.gdx.utils.LongMap$Entries entries()
    public static java.lang.Object get()
    public final java.lang.Object get(long)
    public static void putResize()
    public static java.lang.Object remove()
    public static void resize()
    public static com.badlogic.gdx.utils.LongMap$Values values()
com.badlogic.gdx.utils.NumberUtils
com.badlogic.gdx.utils.ObjectFloatMap$Entries
com.badlogic.gdx.utils.ObjectFloatMap$Entry
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator:
    public int currentIndex
    public boolean hasNext
    public final com.badlogic.gdx.utils.ObjectFloatMap map
    public void <init>(com.badlogic.gdx.utils.ObjectFloatMap)
    public final void findNextIndex()
    public final void remove()
    public final void reset()
com.badlogic.gdx.utils.ObjectFloatMap:
    public transient com.badlogic.gdx.utils.ObjectFloatMap$Entries entries1
    public transient com.badlogic.gdx.utils.ObjectFloatMap$Entries entries2
    public float loadFactor
    public static boolean containsKey()
    public static com.badlogic.gdx.utils.ObjectFloatMap$Entries entries()
    public static float get()
    public static com.badlogic.gdx.utils.ObjectFloatMap$Entries iterator()
    public final int place(java.lang.Object)
    public static void put()
    public static void putResize()
    public static void resize()
    public static java.lang.String toString$1()
com.badlogic.gdx.utils.ObjectIntMap$Entries:
    public static com.badlogic.gdx.utils.ObjectIntMap$Entries iterator()
    public static com.badlogic.gdx.utils.ObjectIntMap$Entry next()
com.badlogic.gdx.utils.ObjectIntMap$MapIterator:
    public final void findNextIndex()
    public final void reset()
com.badlogic.gdx.utils.ObjectIntMap:
    public float loadFactor
    public static boolean containsKey()
    public static com.badlogic.gdx.utils.ObjectIntMap$Entries entries()
    public final int get(java.lang.Object,int)
    public static com.badlogic.gdx.utils.ObjectIntMap$Entries iterator()
    public final int place(java.lang.Object)
    public static void putResize()
    public static void resize()
    public static java.lang.String toString$1()
com.badlogic.gdx.utils.ObjectMap$Entries:
    public static com.badlogic.gdx.utils.ObjectMap$Entries iterator()
com.badlogic.gdx.utils.ObjectMap$Keys:
    public static com.badlogic.gdx.utils.ObjectMap$Keys iterator()
com.badlogic.gdx.utils.ObjectMap$Values:
    public static com.badlogic.gdx.utils.ObjectMap$Values iterator()
com.badlogic.gdx.utils.ObjectMap:
    public void clear()
    public static boolean containsKey()
    public static java.lang.Object get()
    public com.badlogic.gdx.utils.ObjectMap$Keys keys()
    public static void putResize()
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator:
    public final void findNextIndex()
    public static com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator()
    public final void reset()
com.badlogic.gdx.utils.ObjectSet:
    public static void addResize()
    public static void clear()
    public static void clear$1()
    public static boolean contains()
    public static void ensureCapacity()
    public final int place(java.lang.Object)
    public static java.lang.String toString$1()
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys
com.badlogic.gdx.utils.OrderedMap:
    public final void clear()
    public final com.badlogic.gdx.utils.ObjectMap$Keys keys()
com.badlogic.gdx.utils.Pools:
    public static com.badlogic.gdx.utils.Pool get()
com.badlogic.gdx.utils.PropertiesUtils
com.badlogic.gdx.utils.Queue$QueueIterable:
    public void <init>()
com.badlogic.gdx.utils.Queue:
    public static void addLast()
    public static java.lang.Object get()
    public static java.lang.Object removeIndex()
    public static void resize()
com.badlogic.gdx.utils.ReflectionPool:
    public static com.badlogic.gdx.utils.reflect.Constructor findConstructor()
com.badlogic.gdx.utils.SharedLibraryLoader:
    public java.lang.String nativesJar
    public static final java.util.Random random
com.badlogic.gdx.utils.SnapshotArray:
    public final void insert()
    public final void sort()
com.badlogic.gdx.utils.Sort:
    public com.badlogic.gdx.utils.ComparableTimSort comparableTimSort
    public static com.badlogic.gdx.utils.Sort instance()
    public static void sort()
    public static void sort$1()
com.badlogic.gdx.utils.StreamUtils:
    public static final byte[] EMPTY_BYTES
    static void <clinit>()
    public static void copyStream(java.io.InputStream,java.io.OutputStream)
    public static byte[] copyStreamToByteArray(java.io.InputStream,int)
com.badlogic.gdx.utils.StringBuilder:
    public static com.badlogic.gdx.utils.StringBuilder append()
    public final void append(float)
    public static com.badlogic.gdx.utils.StringBuilder append$1()
    public static com.badlogic.gdx.utils.StringBuilder append$10()
    public static com.badlogic.gdx.utils.StringBuilder append$11()
    public static com.badlogic.gdx.utils.StringBuilder append$12()
    public static com.badlogic.gdx.utils.StringBuilder append$13()
    public static com.badlogic.gdx.utils.StringBuilder append$2()
    public static com.badlogic.gdx.utils.StringBuilder append$3()
    public static com.badlogic.gdx.utils.StringBuilder append$4()
    public static com.badlogic.gdx.utils.StringBuilder append$5()
    public static com.badlogic.gdx.utils.StringBuilder append$6()
    public static com.badlogic.gdx.utils.StringBuilder append$7()
    public static com.badlogic.gdx.utils.StringBuilder append$8()
    public static com.badlogic.gdx.utils.StringBuilder append$9()
    public static void append0()
    public static void append0$1()
    public static void insert0()
    public static void replace0()
    public static java.lang.String substring()
com.badlogic.gdx.utils.TextFormatter
com.badlogic.gdx.utils.TimSort:
    public static void doSort()
    public static void mergeCollapse()
    public static void mergeForceCollapse()
    public static void mergeHi()
    public static void mergeLo()
    public static void pushRun()
com.badlogic.gdx.utils.TimeUtils
com.badlogic.gdx.utils.Timer$Task:
    public final boolean isScheduled()
com.badlogic.gdx.utils.Timer:
    public static com.badlogic.gdx.utils.Timer$Task scheduleTask()
    public static void start()
com.badlogic.gdx.utils.XmlReader$Element:
    public com.badlogic.gdx.utils.XmlReader$Element parent
    public static void addChild()
    public static java.lang.String get()
    public static java.lang.String getName()
    public static java.lang.String getText()
    public static void setAttribute()
    public static void setText()
com.badlogic.gdx.utils.XmlReader:
    public static void attribute()
    public final void close()
    public static java.lang.String entity()
    public static void open()
    public static com.badlogic.gdx.utils.XmlReader$Element parse()
    public final void text(java.lang.String)
com.badlogic.gdx.utils.reflect.ArrayReflection
com.badlogic.gdx.utils.reflect.Constructor:
    public static java.lang.Class getDeclaringClass()
    public final void setAccessible()
com.badlogic.gdx.utils.reflect.Field:
    public static java.lang.Class getDeclaringClass()
    public static java.lang.Class getElementType()
    public static java.lang.String getName()
    public static java.lang.Class getType()
    public static boolean isAccessible()
    public static boolean isAnnotationPresent()
    public static boolean isStatic()
    public static boolean isSynthetic()
    public static boolean isTransient()
    public static void setAccessible()
com.badlogic.gdx.utils.viewport.Viewport:
    public void calculateScissors(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle)
com.shatteredpixel.shatteredpixeldungeon.Bones:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.QuickSlot:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AdrenalineSurge:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Fury:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.HeroDisguise:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$DuelParticipant:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark$DeathMarkTracker:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Endure$EndureTracker:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Monk:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Snake:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Blacksmith$Quest:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.effects.Fireball$Flame:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.KindOfWeapon:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight$HTBoost:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDivineInspiration:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDragonsBreath:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfMastery:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.quest.CeremonialCandle:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust$DustGhostSpawner:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.InventoryScroll:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfSirensSong:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.ChaoticCenser$CenserGasTracker:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.DimensionalSundial:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.ShardOfOblivion$WandUseTracker:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.WondrousResin:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfMagicMissile$MagicCharge:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Flail$SpinAbilityTracker:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Flail:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sai$ComboStrikeTracker:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.journal.Journal:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.levels.features.HighGrass:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.levels.features.Maze:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.scenes.AmuletScene:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.scenes.ChangesScene:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.scenes.InterlevelScene:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.scenes.JournalScene:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene$Fader:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Cloud:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.scenes.WelcomeScene:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.services.news.News:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.services.updates.Updates:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator$Action$-CC:
    public static int $default$actionIcon(com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator$Action)
com.shatteredpixel.shatteredpixeldungeon.ui.Archs:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.ui.BossHealthBar:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.ui.Button:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.ui.DangerIndicator:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.ui.Tag:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.ui.Tooltip:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.utils.DungeonSeed:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.windows.WndBag:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.windows.WndHero:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$BadgesTab:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings:
    static void <clinit>()
com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings:
    static void <clinit>()
com.watabou.glwrap.Shader:
    static void <clinit>()
com.watabou.glwrap.Texture:
    public static final int MIRROR
    static void <clinit>()
com.watabou.noosa.Game:
    static void <clinit>()
com.watabou.noosa.RenderedText$TextRenderBatch:
    public void begin()
    public void end()
    public void flush()
    public void setProjectionMatrix(com.badlogic.gdx.math.Matrix4)
com.watabou.noosa.particles.Emitter:
    static void <clinit>()
com.watabou.noosa.ui.Cursor:
    private static com.badlogic.gdx.graphics.Cursor currentCursor
    static void <clinit>()
com.watabou.utils.DeviceCompat$1
com.watabou.utils.FileUtils$1
com.watabou.utils.FileUtils:
    static void <clinit>()
com.watabou.utils.PathFinder:
    static void <clinit>()
org.json.JSONArray:
    public static int length()
    public static java.lang.Object opt()
    public static double optDouble()
    public static org.json.JSONArray put()
    public final void put(java.lang.Object)
    public static org.json.JSONArray put$1()
    public static org.json.JSONArray put$2()
    public static org.json.JSONArray put$3()
    public static java.lang.String toString$1()
org.json.JSONObject$1
org.json.JSONObject:
    public static boolean isNull()
    public static java.util.Set keySet()
    public final java.util.Iterator keys()
    public static int length()
    public final java.lang.Object opt(java.lang.String)
    public static boolean optBoolean()
    public static boolean optBoolean$1()
    public static double optDouble()
    public static int optInt()
    public static int optInt$1()
    public static org.json.JSONObject optJSONObject()
    public static long optLong()
    public static long optLong$1()
    public static java.lang.String optString()
    public static java.lang.String optString$1()
    public static void populateMap()
    public static org.json.JSONObject put()
    public static org.json.JSONObject put$1()
    public static org.json.JSONObject put$2()
    public static org.json.JSONObject put$3()
    public static org.json.JSONObject putOnce()
    public static java.lang.Object remove()
    public static java.lang.String toString$1()
org.json.JSONTokener:
    public static boolean end()
    public static java.lang.String next()
    public static java.lang.String nextString()
    public static org.json.JSONException syntaxError()
